
OshStep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000234c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  0008234c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000260  2000006c  000823b8  0001006c  2**2
                  ALLOC
  3 .stack        00009004  200002cc  00082618  0001006c  2**0
                  ALLOC
  4 .heap         00002000  200092d0  0008b61c  0001006c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010095  2**0
                  CONTENTS, READONLY
  7 .debug_info   000068b3  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cab  00000000  00000000  000169a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000021a2  00000000  00000000  0001864e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000318  00000000  00000000  0001a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000440  00000000  00000000  0001ab08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00013551  00000000  00000000  0001af48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004c84  00000000  00000000  0002e499  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056e35  00000000  00000000  0003311d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000a60  00000000  00000000  00089f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  0008a9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000076  00000000  00000000  0008a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200092d0 	.word	0x200092d0
   80004:	0008014d 	.word	0x0008014d
   80008:	00080149 	.word	0x00080149
   8000c:	00080149 	.word	0x00080149
   80010:	00080149 	.word	0x00080149
   80014:	00080149 	.word	0x00080149
   80018:	00080149 	.word	0x00080149
	...
   8002c:	00080149 	.word	0x00080149
   80030:	00080149 	.word	0x00080149
   80034:	00000000 	.word	0x00000000
   80038:	00080149 	.word	0x00080149
   8003c:	00080149 	.word	0x00080149
   80040:	00080149 	.word	0x00080149
   80044:	00080149 	.word	0x00080149
   80048:	00080149 	.word	0x00080149
   8004c:	00080149 	.word	0x00080149
   80050:	00080149 	.word	0x00080149
   80054:	00080149 	.word	0x00080149
   80058:	00080149 	.word	0x00080149
   8005c:	00080149 	.word	0x00080149
   80060:	00080149 	.word	0x00080149
   80064:	00080149 	.word	0x00080149
   80068:	00000000 	.word	0x00000000
   8006c:	00080649 	.word	0x00080649
   80070:	00080659 	.word	0x00080659
   80074:	00080669 	.word	0x00080669
   80078:	00080679 	.word	0x00080679
	...
   80084:	00080149 	.word	0x00080149
   80088:	00080149 	.word	0x00080149
   8008c:	00080149 	.word	0x00080149
   80090:	00080149 	.word	0x00080149
   80094:	00080149 	.word	0x00080149
   80098:	00080149 	.word	0x00080149
   8009c:	00080149 	.word	0x00080149
   800a0:	00080149 	.word	0x00080149
   800a4:	00000000 	.word	0x00000000
   800a8:	00080149 	.word	0x00080149
   800ac:	00080245 	.word	0x00080245
   800b0:	00080149 	.word	0x00080149
   800b4:	00080149 	.word	0x00080149
   800b8:	00080149 	.word	0x00080149
   800bc:	00080149 	.word	0x00080149
   800c0:	00080149 	.word	0x00080149
   800c4:	00080149 	.word	0x00080149
   800c8:	00080149 	.word	0x00080149
   800cc:	00080149 	.word	0x00080149
   800d0:	00080149 	.word	0x00080149
   800d4:	00080149 	.word	0x00080149
   800d8:	00080149 	.word	0x00080149
   800dc:	00080149 	.word	0x00080149
   800e0:	00080149 	.word	0x00080149
   800e4:	00080149 	.word	0x00080149
   800e8:	00080149 	.word	0x00080149
   800ec:	00080149 	.word	0x00080149
   800f0:	00080149 	.word	0x00080149

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2000006c 	.word	0x2000006c
   80110:	00000000 	.word	0x00000000
   80114:	0008234c 	.word	0x0008234c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008234c 	.word	0x0008234c
   8013c:	20000070 	.word	0x20000070
   80140:	0008234c 	.word	0x0008234c
   80144:	00000000 	.word	0x00000000

00080148 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80148:	e7fe      	b.n	80148 <Dummy_Handler>
	...

0008014c <Reset_Handler>:

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
   8014c:	4b12      	ldr	r3, [pc, #72]	; (80198 <Reset_Handler+0x4c>)
   8014e:	4a13      	ldr	r2, [pc, #76]	; (8019c <Reset_Handler+0x50>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80150:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
   80152:	4293      	cmp	r3, r2
   80154:	461c      	mov	r4, r3
   80156:	d001      	beq.n	8015c <Reset_Handler+0x10>
   80158:	2300      	movs	r3, #0
   8015a:	e001      	b.n	80160 <Reset_Handler+0x14>
   8015c:	4b10      	ldr	r3, [pc, #64]	; (801a0 <Reset_Handler+0x54>)
   8015e:	e007      	b.n	80170 <Reset_Handler+0x24>
                for (; pDest < &_erelocate;) {
   80160:	4910      	ldr	r1, [pc, #64]	; (801a4 <Reset_Handler+0x58>)
   80162:	18d0      	adds	r0, r2, r3
   80164:	4288      	cmp	r0, r1
   80166:	d2f9      	bcs.n	8015c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80168:	58e1      	ldr	r1, [r4, r3]
   8016a:	50d1      	str	r1, [r2, r3]
   8016c:	3304      	adds	r3, #4
   8016e:	e7f7      	b.n	80160 <Reset_Handler+0x14>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80170:	4a0d      	ldr	r2, [pc, #52]	; (801a8 <Reset_Handler+0x5c>)
   80172:	4293      	cmp	r3, r2
   80174:	d203      	bcs.n	8017e <Reset_Handler+0x32>
                *pDest++ = 0;
   80176:	2200      	movs	r2, #0
   80178:	f843 2b04 	str.w	r2, [r3], #4
   8017c:	e7f8      	b.n	80170 <Reset_Handler+0x24>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8017e:	4b0b      	ldr	r3, [pc, #44]	; (801ac <Reset_Handler+0x60>)
   80180:	4a0b      	ldr	r2, [pc, #44]	; (801b0 <Reset_Handler+0x64>)
   80182:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80186:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8018a:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   8018c:	4b09      	ldr	r3, [pc, #36]	; (801b4 <Reset_Handler+0x68>)
   8018e:	4798      	blx	r3

        /* Branch to main function */
        main();
   80190:	4b09      	ldr	r3, [pc, #36]	; (801b8 <Reset_Handler+0x6c>)
   80192:	4798      	blx	r3
   80194:	e7fe      	b.n	80194 <Reset_Handler+0x48>
   80196:	bf00      	nop
   80198:	0008234c 	.word	0x0008234c
   8019c:	20000000 	.word	0x20000000
   801a0:	2000006c 	.word	0x2000006c
   801a4:	2000006c 	.word	0x2000006c
   801a8:	200002cc 	.word	0x200002cc
   801ac:	00080000 	.word	0x00080000
   801b0:	e000ed00 	.word	0xe000ed00
   801b4:	00081e71 	.word	0x00081e71
   801b8:	00080f71 	.word	0x00080f71

000801bc <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801bc:	4a1a      	ldr	r2, [pc, #104]	; (80228 <SystemInit+0x6c>)
   801be:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801c2:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801c8:	4b18      	ldr	r3, [pc, #96]	; (8022c <SystemInit+0x70>)
   801ca:	6a1a      	ldr	r2, [r3, #32]
   801cc:	01d2      	lsls	r2, r2, #7
   801ce:	d502      	bpl.n	801d6 <SystemInit+0x1a>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801d0:	4a17      	ldr	r2, [pc, #92]	; (80230 <SystemInit+0x74>)
   801d2:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801d4:	e005      	b.n	801e2 <SystemInit+0x26>
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801d6:	4a17      	ldr	r2, [pc, #92]	; (80234 <SystemInit+0x78>)
   801d8:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   801dc:	07d0      	lsls	r0, r2, #31
   801de:	d5fc      	bpl.n	801da <SystemInit+0x1e>
   801e0:	e7f6      	b.n	801d0 <SystemInit+0x14>
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801e2:	6e99      	ldr	r1, [r3, #104]	; 0x68
   801e4:	4a11      	ldr	r2, [pc, #68]	; (8022c <SystemInit+0x70>)
   801e6:	03c9      	lsls	r1, r1, #15
   801e8:	d5fb      	bpl.n	801e2 <SystemInit+0x26>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   801ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
   801ec:	f021 0103 	bic.w	r1, r1, #3
   801f0:	f041 0101 	orr.w	r1, r1, #1
   801f4:	6311      	str	r1, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   801f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   801f8:	0712      	lsls	r2, r2, #28
   801fa:	d5fc      	bpl.n	801f6 <SystemInit+0x3a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   801fc:	490e      	ldr	r1, [pc, #56]	; (80238 <SystemInit+0x7c>)
   801fe:	4a0b      	ldr	r2, [pc, #44]	; (8022c <SystemInit+0x70>)
   80200:	6291      	str	r1, [r2, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80202:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   80204:	0790      	lsls	r0, r2, #30
   80206:	d5fc      	bpl.n	80202 <SystemInit+0x46>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a08      	ldr	r2, [pc, #32]	; (8022c <SystemInit+0x70>)
   8020a:	2111      	movs	r1, #17
   8020c:	6311      	str	r1, [r2, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8020e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   80210:	0711      	lsls	r1, r2, #28
   80212:	d5fc      	bpl.n	8020e <SystemInit+0x52>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80214:	4a05      	ldr	r2, [pc, #20]	; (8022c <SystemInit+0x70>)
   80216:	2112      	movs	r1, #18
   80218:	6311      	str	r1, [r2, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8021a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8021c:	0712      	lsls	r2, r2, #28
   8021e:	d5fc      	bpl.n	8021a <SystemInit+0x5e>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80220:	4a06      	ldr	r2, [pc, #24]	; (8023c <SystemInit+0x80>)
   80222:	4b07      	ldr	r3, [pc, #28]	; (80240 <SystemInit+0x84>)
   80224:	601a      	str	r2, [r3, #0]
   80226:	4770      	bx	lr
   80228:	400e0a00 	.word	0x400e0a00
   8022c:	400e0600 	.word	0x400e0600
   80230:	01370809 	.word	0x01370809
   80234:	00370809 	.word	0x00370809
   80238:	200d3f01 	.word	0x200d3f01
   8023c:	0501bd00 	.word	0x0501bd00
   80240:	20000000 	.word	0x20000000

00080244 <TC0_Handler>:
     // Reset counter (SWTRG) and enable counter clock(CLKEN)
     TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;

}

void TC0_Handler(void) {
   80244:	b508      	push	{r3, lr}
     __due_tc0_callback();
   80246:	4b02      	ldr	r3, [pc, #8]	; (80250 <TC0_Handler+0xc>)
   80248:	681b      	ldr	r3, [r3, #0]
   8024a:	4798      	blx	r3
   8024c:	bd08      	pop	{r3, pc}
   8024e:	bf00      	nop
   80250:	20000088 	.word	0x20000088

00080254 <_Z10pinSetMode4Porti4Mode>:
}

 void pinSetMode(Port p, int pin, Mode m) {
    switch (m) {
   80254:	2a03      	cmp	r2, #3
   80256:	f200 8094 	bhi.w	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   8025a:	e8df f002 	tbb	[pc, r2]
   8025e:	3b02      	.short	0x3b02
   80260:	7557      	.short	0x7557
      case INPUT:
        switch (p) {
   80262:	2803      	cmp	r0, #3
   80264:	f200 808d 	bhi.w	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   80268:	e8df f000 	tbb	[pc, r0]
   8026c:	281c0e02 	.word	0x281c0e02
          case A:
            // Enable clock if it isn't enabled
            if (~(PMC->PMC_PCSR0 >> ID_PIOA) & 0x1)
   80270:	4b44      	ldr	r3, [pc, #272]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   80272:	699a      	ldr	r2, [r3, #24]
   80274:	0510      	lsls	r0, r2, #20
                PMC->PMC_PCER0 = 0x1u<<ID_PIOA;
   80276:	bf5c      	itt	pl
   80278:	f44f 6200 	movpl.w	r2, #2048	; 0x800
   8027c:	611a      	strpl	r2, [r3, #16]
            PIOA->PIO_PER=0x1u<<pin;
   8027e:	2301      	movs	r3, #1
   80280:	fa03 f101 	lsl.w	r1, r3, r1
   80284:	4b40      	ldr	r3, [pc, #256]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   80286:	e00a      	b.n	8029e <_Z10pinSetMode4Porti4Mode+0x4a>
            PIOA->PIO_ODR=0x1u<<pin;
            break;
          case B:
            if (~(PMC->PMC_PCSR0 >> ID_PIOB) & 0x1)
   80288:	4b3e      	ldr	r3, [pc, #248]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   8028a:	699a      	ldr	r2, [r3, #24]
   8028c:	04d2      	lsls	r2, r2, #19
                PMC->PMC_PCER0 = 0x1u<<ID_PIOB;
   8028e:	bf5c      	itt	pl
   80290:	f44f 5280 	movpl.w	r2, #4096	; 0x1000
   80294:	611a      	strpl	r2, [r3, #16]
            PIOB->PIO_PER=0x1u<<pin;
   80296:	2301      	movs	r3, #1
   80298:	fa03 f101 	lsl.w	r1, r3, r1
   8029c:	4b3b      	ldr	r3, [pc, #236]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   8029e:	6019      	str	r1, [r3, #0]
            PIOB->PIO_ODR=0x1u<<pin;
   802a0:	6159      	str	r1, [r3, #20]
            break;
   802a2:	4770      	bx	lr
          case C:
            if (~(PMC->PMC_PCSR0 >> ID_PIOC) & 0x1)
   802a4:	4b37      	ldr	r3, [pc, #220]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   802a6:	699a      	ldr	r2, [r3, #24]
   802a8:	0490      	lsls	r0, r2, #18
                PMC->PMC_PCER0 = 0x1u<<ID_PIOC;
   802aa:	bf5c      	itt	pl
   802ac:	f44f 5200 	movpl.w	r2, #8192	; 0x2000
   802b0:	611a      	strpl	r2, [r3, #16]
            PIOC->PIO_PER=0x1u<<pin;
   802b2:	2301      	movs	r3, #1
   802b4:	fa03 f101 	lsl.w	r1, r3, r1
   802b8:	4b35      	ldr	r3, [pc, #212]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   802ba:	e7f0      	b.n	8029e <_Z10pinSetMode4Porti4Mode+0x4a>
            PIOC->PIO_ODR=0x1u<<pin;
            break;
          case D:
            if (~(PMC->PMC_PCSR0 >> ID_PIOD) & 0x1)
   802bc:	4b31      	ldr	r3, [pc, #196]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   802be:	699a      	ldr	r2, [r3, #24]
   802c0:	0452      	lsls	r2, r2, #17
                PMC->PMC_PCER0 = 0x1u<<ID_PIOD;
   802c2:	bf5c      	itt	pl
   802c4:	f44f 4280 	movpl.w	r2, #16384	; 0x4000
   802c8:	611a      	strpl	r2, [r3, #16]
            PIOD->PIO_PER=0x1u<<pin;
   802ca:	2301      	movs	r3, #1
   802cc:	fa03 f101 	lsl.w	r1, r3, r1
   802d0:	4b30      	ldr	r3, [pc, #192]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   802d2:	e7e4      	b.n	8029e <_Z10pinSetMode4Porti4Mode+0x4a>
            PIOD->PIO_ODR=0x1u<<pin;
            break;
        }
        break;
      case OUTPUT:
        switch (p) {
   802d4:	2803      	cmp	r0, #3
   802d6:	d854      	bhi.n	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   802d8:	e8df f000 	tbb	[pc, r0]
   802dc:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PER=0x1u<<pin;
   802e0:	2301      	movs	r3, #1
   802e2:	fa03 f101 	lsl.w	r1, r3, r1
   802e6:	4b28      	ldr	r3, [pc, #160]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   802e8:	e00d      	b.n	80306 <_Z10pinSetMode4Porti4Mode+0xb2>
            PIOA->PIO_OER=0x1u<<pin;
            break;
          case B:
            PIOB->PIO_PER=0x1u<<pin;
   802ea:	2301      	movs	r3, #1
   802ec:	fa03 f101 	lsl.w	r1, r3, r1
   802f0:	4b26      	ldr	r3, [pc, #152]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   802f2:	e008      	b.n	80306 <_Z10pinSetMode4Porti4Mode+0xb2>
            PIOB->PIO_OER=0x1u<<pin;
            break;
          case C:
            PIOC->PIO_PER=0x1u<<pin;
   802f4:	2301      	movs	r3, #1
   802f6:	fa03 f101 	lsl.w	r1, r3, r1
   802fa:	4b25      	ldr	r3, [pc, #148]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   802fc:	e003      	b.n	80306 <_Z10pinSetMode4Porti4Mode+0xb2>
            PIOC->PIO_OER=0x1u<<pin;
            break;
          case D:
            PIOD->PIO_PER=0x1u<<pin;
   802fe:	2301      	movs	r3, #1
   80300:	fa03 f101 	lsl.w	r1, r3, r1
   80304:	4b23      	ldr	r3, [pc, #140]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   80306:	6019      	str	r1, [r3, #0]
            PIOD->PIO_OER=0x1u<<pin;
   80308:	6119      	str	r1, [r3, #16]
            break;
   8030a:	4770      	bx	lr
        }
        break;
      case PERIPHERAL_A:
        switch (p) {
   8030c:	2803      	cmp	r0, #3
   8030e:	d838      	bhi.n	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   80310:	e8df f000 	tbb	[pc, r0]
   80314:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PDR=0x1u<<pin;
   80318:	2301      	movs	r3, #1
   8031a:	fa03 f101 	lsl.w	r1, r3, r1
   8031e:	4b1a      	ldr	r3, [pc, #104]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   80320:	e00d      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOA->PIO_ABSR &= ~(0x1u<<pin);
            break;
          case B:
            PIOB->PIO_PDR=0x1u<<pin;
   80322:	2301      	movs	r3, #1
   80324:	fa03 f101 	lsl.w	r1, r3, r1
   80328:	4b18      	ldr	r3, [pc, #96]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   8032a:	e008      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOB->PIO_ABSR &= ~(0x1u<<pin);
            break;
          case C:
            PIOC->PIO_PDR=0x1u<<pin;
   8032c:	2301      	movs	r3, #1
   8032e:	fa03 f101 	lsl.w	r1, r3, r1
   80332:	4b17      	ldr	r3, [pc, #92]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   80334:	e003      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOC->PIO_ABSR &= ~(0x1u<<pin);
            break;
          case D:
            PIOD->PIO_PDR=0x1u<<pin;
   80336:	2301      	movs	r3, #1
   80338:	fa03 f101 	lsl.w	r1, r3, r1
   8033c:	4b15      	ldr	r3, [pc, #84]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   8033e:	6059      	str	r1, [r3, #4]
            PIOD->PIO_ABSR &= ~(0x1u<<pin);
   80340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80342:	ea22 0101 	bic.w	r1, r2, r1
   80346:	e01b      	b.n	80380 <_Z10pinSetMode4Porti4Mode+0x12c>
            break;
        }
        break;
      case PERIPHERAL_B:
        switch (p) {
   80348:	2803      	cmp	r0, #3
   8034a:	d81a      	bhi.n	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   8034c:	e8df f000 	tbb	[pc, r0]
   80350:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PDR=0x1u<<pin;
   80354:	2301      	movs	r3, #1
   80356:	fa03 f101 	lsl.w	r1, r3, r1
   8035a:	4b0b      	ldr	r3, [pc, #44]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   8035c:	e00d      	b.n	8037a <_Z10pinSetMode4Porti4Mode+0x126>
            PIOA->PIO_ABSR |=1 <<pin;
            break;
          case B:
            PIOB->PIO_PDR=0x1u<<pin;
   8035e:	2301      	movs	r3, #1
   80360:	fa03 f101 	lsl.w	r1, r3, r1
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   80366:	e008      	b.n	8037a <_Z10pinSetMode4Porti4Mode+0x126>
            PIOB->PIO_ABSR |= 0x1u<<pin;
            break;
          case C:
            PIOC->PIO_PDR=0x1u<<pin;
   80368:	2301      	movs	r3, #1
   8036a:	fa03 f101 	lsl.w	r1, r3, r1
   8036e:	4b08      	ldr	r3, [pc, #32]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   80370:	e003      	b.n	8037a <_Z10pinSetMode4Porti4Mode+0x126>
            PIOC->PIO_ABSR |= 0x1u<<pin;
            break;
          case D:
            PIOD->PIO_PDR=0x1u<<pin;
   80372:	2301      	movs	r3, #1
   80374:	fa03 f101 	lsl.w	r1, r3, r1
   80378:	4b06      	ldr	r3, [pc, #24]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   8037a:	6059      	str	r1, [r3, #4]
            PIOD->PIO_ABSR |= 0x1u<<pin;
   8037c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8037e:	4311      	orrs	r1, r2
   80380:	6719      	str	r1, [r3, #112]	; 0x70
   80382:	4770      	bx	lr
   80384:	400e0600 	.word	0x400e0600
   80388:	400e0e00 	.word	0x400e0e00
   8038c:	400e1000 	.word	0x400e1000
   80390:	400e1200 	.word	0x400e1200
   80394:	400e1400 	.word	0x400e1400

00080398 <_Z15pinEnablePullup4Porti>:
          break;
    }
}

void pinEnablePullup(Port p, int pin) {
    switch (p) {
   80398:	2803      	cmp	r0, #3
   8039a:	d817      	bhi.n	803cc <_Z15pinEnablePullup4Porti+0x34>
   8039c:	e8df f000 	tbb	[pc, r0]
   803a0:	110c0702 	.word	0x110c0702
      case A:
        PIOA->PIO_PUER=0x1u<<pin;
   803a4:	2301      	movs	r3, #1
   803a6:	fa03 f101 	lsl.w	r1, r3, r1
   803aa:	4b09      	ldr	r3, [pc, #36]	; (803d0 <_Z15pinEnablePullup4Porti+0x38>)
   803ac:	e00d      	b.n	803ca <_Z15pinEnablePullup4Porti+0x32>
        break;
      case B:
        PIOB->PIO_PUER=0x1u<<pin;
   803ae:	2301      	movs	r3, #1
   803b0:	fa03 f101 	lsl.w	r1, r3, r1
   803b4:	4b07      	ldr	r3, [pc, #28]	; (803d4 <_Z15pinEnablePullup4Porti+0x3c>)
   803b6:	e008      	b.n	803ca <_Z15pinEnablePullup4Porti+0x32>
        break;
      case C:
        PIOC->PIO_PUER=0x1u<<pin;
   803b8:	2301      	movs	r3, #1
   803ba:	fa03 f101 	lsl.w	r1, r3, r1
   803be:	4b06      	ldr	r3, [pc, #24]	; (803d8 <_Z15pinEnablePullup4Porti+0x40>)
   803c0:	e003      	b.n	803ca <_Z15pinEnablePullup4Porti+0x32>
        break;
      case D:
        PIOD->PIO_PUER=0x1u<<pin;
   803c2:	2301      	movs	r3, #1
   803c4:	fa03 f101 	lsl.w	r1, r3, r1
   803c8:	4b04      	ldr	r3, [pc, #16]	; (803dc <_Z15pinEnablePullup4Porti+0x44>)
   803ca:	6659      	str	r1, [r3, #100]	; 0x64
   803cc:	4770      	bx	lr
   803ce:	bf00      	nop
   803d0:	400e0e00 	.word	0x400e0e00
   803d4:	400e1000 	.word	0x400e1000
   803d8:	400e1200 	.word	0x400e1200
   803dc:	400e1400 	.word	0x400e1400

000803e0 <_Z16pinDisablePullup4Porti>:
        break;
    }
}

void pinDisablePullup(Port p, int pin) {
    switch (p) {
   803e0:	2803      	cmp	r0, #3
   803e2:	d817      	bhi.n	80414 <_Z16pinDisablePullup4Porti+0x34>
   803e4:	e8df f000 	tbb	[pc, r0]
   803e8:	110c0702 	.word	0x110c0702
      case A:
        PIOA->PIO_PUDR=0x1u<<pin;
   803ec:	2301      	movs	r3, #1
   803ee:	fa03 f101 	lsl.w	r1, r3, r1
   803f2:	4b09      	ldr	r3, [pc, #36]	; (80418 <_Z16pinDisablePullup4Porti+0x38>)
   803f4:	e00d      	b.n	80412 <_Z16pinDisablePullup4Porti+0x32>
        break;
      case B:
        PIOB->PIO_PUDR=0x1u<<pin;
   803f6:	2301      	movs	r3, #1
   803f8:	fa03 f101 	lsl.w	r1, r3, r1
   803fc:	4b07      	ldr	r3, [pc, #28]	; (8041c <_Z16pinDisablePullup4Porti+0x3c>)
   803fe:	e008      	b.n	80412 <_Z16pinDisablePullup4Porti+0x32>
        break;
      case C:
        PIOC->PIO_PUDR=0x1u<<pin;
   80400:	2301      	movs	r3, #1
   80402:	fa03 f101 	lsl.w	r1, r3, r1
   80406:	4b06      	ldr	r3, [pc, #24]	; (80420 <_Z16pinDisablePullup4Porti+0x40>)
   80408:	e003      	b.n	80412 <_Z16pinDisablePullup4Porti+0x32>
        break;
      case D:
        PIOD->PIO_PUDR=0x1u<<pin;
   8040a:	2301      	movs	r3, #1
   8040c:	fa03 f101 	lsl.w	r1, r3, r1
   80410:	4b04      	ldr	r3, [pc, #16]	; (80424 <_Z16pinDisablePullup4Porti+0x44>)
   80412:	6619      	str	r1, [r3, #96]	; 0x60
   80414:	4770      	bx	lr
   80416:	bf00      	nop
   80418:	400e0e00 	.word	0x400e0e00
   8041c:	400e1000 	.word	0x400e1000
   80420:	400e1200 	.word	0x400e1200
   80424:	400e1400 	.word	0x400e1400

00080428 <_Z12pinSetOutput4Portii>:
        break;
    }
}

void pinSetOutput(Port p, int pin, int level) {
    switch (level) {
   80428:	b1e2      	cbz	r2, 80464 <_Z12pinSetOutput4Portii+0x3c>
   8042a:	2a01      	cmp	r2, #1
   8042c:	d134      	bne.n	80498 <_Z12pinSetOutput4Portii+0x70>
      case HIGH:
        switch (p) {
   8042e:	2803      	cmp	r0, #3
   80430:	d832      	bhi.n	80498 <_Z12pinSetOutput4Portii+0x70>
   80432:	e8df f000 	tbb	[pc, r0]
   80436:	0702      	.short	0x0702
   80438:	110c      	.short	0x110c
          case A:
            PIOA->PIO_SODR=0x1u<<pin;
   8043a:	2301      	movs	r3, #1
   8043c:	fa03 f101 	lsl.w	r1, r3, r1
   80440:	4b16      	ldr	r3, [pc, #88]	; (8049c <_Z12pinSetOutput4Portii+0x74>)
   80442:	e00d      	b.n	80460 <_Z12pinSetOutput4Portii+0x38>
            break;
          case B:
            PIOB->PIO_SODR=0x1u<<pin;
   80444:	2301      	movs	r3, #1
   80446:	fa03 f101 	lsl.w	r1, r3, r1
   8044a:	4b15      	ldr	r3, [pc, #84]	; (804a0 <_Z12pinSetOutput4Portii+0x78>)
   8044c:	e008      	b.n	80460 <_Z12pinSetOutput4Portii+0x38>
            break;
          case C:
            PIOC->PIO_SODR=0x1u<<pin;
   8044e:	2301      	movs	r3, #1
   80450:	fa03 f101 	lsl.w	r1, r3, r1
   80454:	4b13      	ldr	r3, [pc, #76]	; (804a4 <_Z12pinSetOutput4Portii+0x7c>)
   80456:	e003      	b.n	80460 <_Z12pinSetOutput4Portii+0x38>
            break;
          case D:
            PIOD->PIO_SODR=0x1u<<pin;
   80458:	2301      	movs	r3, #1
   8045a:	fa03 f101 	lsl.w	r1, r3, r1
   8045e:	4b12      	ldr	r3, [pc, #72]	; (804a8 <_Z12pinSetOutput4Portii+0x80>)
   80460:	6319      	str	r1, [r3, #48]	; 0x30
            break;
   80462:	4770      	bx	lr
        }
        break;
      case LOW:
        switch (p) {
   80464:	2803      	cmp	r0, #3
   80466:	d817      	bhi.n	80498 <_Z12pinSetOutput4Portii+0x70>
   80468:	e8df f000 	tbb	[pc, r0]
   8046c:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_CODR=0x1u<<pin;
   80470:	2301      	movs	r3, #1
   80472:	fa03 f101 	lsl.w	r1, r3, r1
   80476:	4b09      	ldr	r3, [pc, #36]	; (8049c <_Z12pinSetOutput4Portii+0x74>)
   80478:	e00d      	b.n	80496 <_Z12pinSetOutput4Portii+0x6e>
            break;
          case B:
            PIOB->PIO_CODR=0x1u<<pin;
   8047a:	2301      	movs	r3, #1
   8047c:	fa03 f101 	lsl.w	r1, r3, r1
   80480:	4b07      	ldr	r3, [pc, #28]	; (804a0 <_Z12pinSetOutput4Portii+0x78>)
   80482:	e008      	b.n	80496 <_Z12pinSetOutput4Portii+0x6e>
            break;
          case C:
            PIOC->PIO_CODR=0x1u<<pin;
   80484:	2301      	movs	r3, #1
   80486:	fa03 f101 	lsl.w	r1, r3, r1
   8048a:	4b06      	ldr	r3, [pc, #24]	; (804a4 <_Z12pinSetOutput4Portii+0x7c>)
   8048c:	e003      	b.n	80496 <_Z12pinSetOutput4Portii+0x6e>
            break;
          case D:
            PIOD->PIO_CODR=0x1u<<pin;
   8048e:	2301      	movs	r3, #1
   80490:	fa03 f101 	lsl.w	r1, r3, r1
   80494:	4b04      	ldr	r3, [pc, #16]	; (804a8 <_Z12pinSetOutput4Portii+0x80>)
   80496:	6359      	str	r1, [r3, #52]	; 0x34
   80498:	4770      	bx	lr
   8049a:	bf00      	nop
   8049c:	400e0e00 	.word	0x400e0e00
   804a0:	400e1000 	.word	0x400e1000
   804a4:	400e1200 	.word	0x400e1200
   804a8:	400e1400 	.word	0x400e1400

000804ac <_Z12pinReadInput4Porti>:
    }
    return -1;
}

int pinReadInput(Port p, int pin) {
    switch (p) {
   804ac:	2803      	cmp	r0, #3
   804ae:	d80f      	bhi.n	804d0 <_Z12pinReadInput4Porti+0x24>
   804b0:	e8df f000 	tbb	[pc, r0]
   804b4:	08060402 	.word	0x08060402
      case A:
        return (PIOA->PIO_PDSR >> pin) & 0x1;
   804b8:	4b07      	ldr	r3, [pc, #28]	; (804d8 <_Z12pinReadInput4Porti+0x2c>)
   804ba:	e004      	b.n	804c6 <_Z12pinReadInput4Porti+0x1a>
      case B:
        return (PIOB->PIO_PDSR >> pin) & 0x1;
   804bc:	4b07      	ldr	r3, [pc, #28]	; (804dc <_Z12pinReadInput4Porti+0x30>)
   804be:	e002      	b.n	804c6 <_Z12pinReadInput4Porti+0x1a>
      case C:
        return (PIOC->PIO_PDSR >> pin) & 0x1;
   804c0:	4b07      	ldr	r3, [pc, #28]	; (804e0 <_Z12pinReadInput4Porti+0x34>)
   804c2:	e000      	b.n	804c6 <_Z12pinReadInput4Porti+0x1a>
      case D:
        return (PIOD->PIO_PDSR >> pin) & 0x1;
   804c4:	4b07      	ldr	r3, [pc, #28]	; (804e4 <_Z12pinReadInput4Porti+0x38>)
   804c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   804c8:	40c8      	lsrs	r0, r1
   804ca:	f000 0001 	and.w	r0, r0, #1
   804ce:	4770      	bx	lr
    }
    return -1;
   804d0:	f04f 30ff 	mov.w	r0, #4294967295
}
   804d4:	4770      	bx	lr
   804d6:	bf00      	nop
   804d8:	400e0e00 	.word	0x400e0e00
   804dc:	400e1000 	.word	0x400e1000
   804e0:	400e1200 	.word	0x400e1200
   804e4:	400e1400 	.word	0x400e1400

000804e8 <_Z15attachInterrupt4PortiPFvS_iE>:

void attachInterrupt(Port p, int pin, void(*isr)(Port, int)) {
   804e8:	b510      	push	{r4, lr}
    // Initialize interrupt for Port
    volatile __IsrBank *isr_bank = 0;
    switch (p) {
   804ea:	2803      	cmp	r0, #3
   804ec:	d833      	bhi.n	80556 <_Z15attachInterrupt4PortiPFvS_iE+0x6e>
   804ee:	e8df f000 	tbb	[pc, r0]
   804f2:	0f02      	.short	0x0f02
   804f4:	2518      	.short	0x2518
      case A:
        isr_bank = &__isr_a;
        if (!(__isr_enabled_mask & __ISR_ENABLED_A)) {
   804f6:	4b2b      	ldr	r3, [pc, #172]	; (805a4 <_Z15attachInterrupt4PortiPFvS_iE+0xbc>)
   804f8:	781c      	ldrb	r4, [r3, #0]
   804fa:	f014 0f08 	tst.w	r4, #8
   804fe:	d12c      	bne.n	8055a <_Z15attachInterrupt4PortiPFvS_iE+0x72>
            __isr_enabled_mask |= __ISR_ENABLED_A;
   80500:	f044 0408 	orr.w	r4, r4, #8
   80504:	701c      	strb	r4, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80506:	4b28      	ldr	r3, [pc, #160]	; (805a8 <_Z15attachInterrupt4PortiPFvS_iE+0xc0>)
   80508:	f44f 6400 	mov.w	r4, #2048	; 0x800
   8050c:	601c      	str	r4, [r3, #0]
   8050e:	e024      	b.n	8055a <_Z15attachInterrupt4PortiPFvS_iE+0x72>
            NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
        }
        break;
      case B:
        isr_bank = &__isr_b;
        if (!(__isr_enabled_mask & __ISR_ENABLED_B)) {
   80510:	4b24      	ldr	r3, [pc, #144]	; (805a4 <_Z15attachInterrupt4PortiPFvS_iE+0xbc>)
   80512:	781b      	ldrb	r3, [r3, #0]
   80514:	075b      	lsls	r3, r3, #29
   80516:	d422      	bmi.n	8055e <_Z15attachInterrupt4PortiPFvS_iE+0x76>
   80518:	4b23      	ldr	r3, [pc, #140]	; (805a8 <_Z15attachInterrupt4PortiPFvS_iE+0xc0>)
   8051a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
   8051e:	601c      	str	r4, [r3, #0]
   80520:	e01d      	b.n	8055e <_Z15attachInterrupt4PortiPFvS_iE+0x76>
            NVIC_EnableIRQ(PIOB_IRQn);  
        }
        break;
      case C:
        isr_bank = &__isr_c;
        if (!(__isr_enabled_mask & __ISR_ENABLED_C)) {
   80522:	4b20      	ldr	r3, [pc, #128]	; (805a4 <_Z15attachInterrupt4PortiPFvS_iE+0xbc>)
   80524:	781c      	ldrb	r4, [r3, #0]
   80526:	f014 0f02 	tst.w	r4, #2
   8052a:	d11a      	bne.n	80562 <_Z15attachInterrupt4PortiPFvS_iE+0x7a>
            __isr_enabled_mask |= __ISR_ENABLED_C;
   8052c:	f044 0402 	orr.w	r4, r4, #2
   80530:	701c      	strb	r4, [r3, #0]
   80532:	4b1d      	ldr	r3, [pc, #116]	; (805a8 <_Z15attachInterrupt4PortiPFvS_iE+0xc0>)
   80534:	f44f 5400 	mov.w	r4, #8192	; 0x2000
   80538:	601c      	str	r4, [r3, #0]
   8053a:	e012      	b.n	80562 <_Z15attachInterrupt4PortiPFvS_iE+0x7a>
            NVIC_EnableIRQ((IRQn_Type) ID_PIOC);
        }
        break;
      case D:
        isr_bank = &__isr_d;
        if (!(__isr_enabled_mask & __ISR_ENABLED_D)) {
   8053c:	4b19      	ldr	r3, [pc, #100]	; (805a4 <_Z15attachInterrupt4PortiPFvS_iE+0xbc>)
   8053e:	781c      	ldrb	r4, [r3, #0]
   80540:	f014 0f01 	tst.w	r4, #1
   80544:	d10f      	bne.n	80566 <_Z15attachInterrupt4PortiPFvS_iE+0x7e>
            __isr_enabled_mask |= __ISR_ENABLED_D;
   80546:	f044 0401 	orr.w	r4, r4, #1
   8054a:	701c      	strb	r4, [r3, #0]
   8054c:	4b16      	ldr	r3, [pc, #88]	; (805a8 <_Z15attachInterrupt4PortiPFvS_iE+0xc0>)
   8054e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   80552:	601c      	str	r4, [r3, #0]
   80554:	e007      	b.n	80566 <_Z15attachInterrupt4PortiPFvS_iE+0x7e>
    return -1;
}

void attachInterrupt(Port p, int pin, void(*isr)(Port, int)) {
    // Initialize interrupt for Port
    volatile __IsrBank *isr_bank = 0;
   80556:	2300      	movs	r3, #0
   80558:	e006      	b.n	80568 <_Z15attachInterrupt4PortiPFvS_iE+0x80>
    switch (p) {
      case A:
        isr_bank = &__isr_a;
   8055a:	4b14      	ldr	r3, [pc, #80]	; (805ac <_Z15attachInterrupt4PortiPFvS_iE+0xc4>)
   8055c:	e004      	b.n	80568 <_Z15attachInterrupt4PortiPFvS_iE+0x80>
            __isr_enabled_mask |= __ISR_ENABLED_A;
            NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
        }
        break;
      case B:
        isr_bank = &__isr_b;
   8055e:	4b14      	ldr	r3, [pc, #80]	; (805b0 <_Z15attachInterrupt4PortiPFvS_iE+0xc8>)
   80560:	e002      	b.n	80568 <_Z15attachInterrupt4PortiPFvS_iE+0x80>
        if (!(__isr_enabled_mask & __ISR_ENABLED_B)) {
            NVIC_EnableIRQ(PIOB_IRQn);  
        }
        break;
      case C:
        isr_bank = &__isr_c;
   80562:	4b14      	ldr	r3, [pc, #80]	; (805b4 <_Z15attachInterrupt4PortiPFvS_iE+0xcc>)
   80564:	e000      	b.n	80568 <_Z15attachInterrupt4PortiPFvS_iE+0x80>
            __isr_enabled_mask |= __ISR_ENABLED_C;
            NVIC_EnableIRQ((IRQn_Type) ID_PIOC);
        }
        break;
      case D:
        isr_bank = &__isr_d;
   80566:	4b14      	ldr	r3, [pc, #80]	; (805b8 <_Z15attachInterrupt4PortiPFvS_iE+0xd0>)
            NVIC_EnableIRQ((IRQn_Type) ID_PIOD);
        }
        break;
    }

    (*isr_bank)[pin] = isr;
   80568:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    switch (p) {
   8056c:	2803      	cmp	r0, #3
   8056e:	d817      	bhi.n	805a0 <_Z15attachInterrupt4PortiPFvS_iE+0xb8>
   80570:	e8df f000 	tbb	[pc, r0]
   80574:	110c0702 	.word	0x110c0702
      case A:
        PIOA->PIO_IER = 0x1u << pin;
   80578:	2301      	movs	r3, #1
   8057a:	fa03 f101 	lsl.w	r1, r3, r1
   8057e:	4b0f      	ldr	r3, [pc, #60]	; (805bc <_Z15attachInterrupt4PortiPFvS_iE+0xd4>)
   80580:	e00d      	b.n	8059e <_Z15attachInterrupt4PortiPFvS_iE+0xb6>
        break;
      case B:
        PIOB->PIO_IER = 0x1u << pin;
   80582:	2301      	movs	r3, #1
   80584:	fa03 f101 	lsl.w	r1, r3, r1
   80588:	4b0d      	ldr	r3, [pc, #52]	; (805c0 <_Z15attachInterrupt4PortiPFvS_iE+0xd8>)
   8058a:	e008      	b.n	8059e <_Z15attachInterrupt4PortiPFvS_iE+0xb6>
        break;
      case C:
        PIOC->PIO_IER = 0x1u << pin;
   8058c:	2301      	movs	r3, #1
   8058e:	fa03 f101 	lsl.w	r1, r3, r1
   80592:	4b0c      	ldr	r3, [pc, #48]	; (805c4 <_Z15attachInterrupt4PortiPFvS_iE+0xdc>)
   80594:	e003      	b.n	8059e <_Z15attachInterrupt4PortiPFvS_iE+0xb6>
        break;
      case D:
        PIOD->PIO_IER = 0x1u << pin;
   80596:	2301      	movs	r3, #1
   80598:	fa03 f101 	lsl.w	r1, r3, r1
   8059c:	4b0a      	ldr	r3, [pc, #40]	; (805c8 <_Z15attachInterrupt4PortiPFvS_iE+0xe0>)
   8059e:	6419      	str	r1, [r3, #64]	; 0x40
   805a0:	bd10      	pop	{r4, pc}
   805a2:	bf00      	nop
   805a4:	2000008c 	.word	0x2000008c
   805a8:	e000e100 	.word	0xe000e100
   805ac:	20000090 	.word	0x20000090
   805b0:	20000110 	.word	0x20000110
   805b4:	20000190 	.word	0x20000190
   805b8:	20000210 	.word	0x20000210
   805bc:	400e0e00 	.word	0x400e0e00
   805c0:	400e1000 	.word	0x400e1000
   805c4:	400e1200 	.word	0x400e1200
   805c8:	400e1400 	.word	0x400e1400

000805cc <_Z6pioIsr4Port>:
    }

}

// This is some nonsense. I'm sorry. It should be really fast.
void pioIsr(Port p) {
   805cc:	b538      	push	{r3, r4, r5, lr}
   805ce:	4605      	mov	r5, r0
    int pin_mask = 0;
    volatile __IsrBank *isr_bank = 0;

    switch (p) {
   805d0:	2803      	cmp	r0, #3
   805d2:	d813      	bhi.n	805fc <_Z6pioIsr4Port+0x30>
   805d4:	e8df f000 	tbb	[pc, r0]
   805d8:	0e0a0602 	.word	0x0e0a0602
      case A:
        pin_mask = PIOA->PIO_ISR;
   805dc:	4b0f      	ldr	r3, [pc, #60]	; (8061c <_Z6pioIsr4Port+0x50>)
        isr_bank = &__isr_a;
   805de:	4c10      	ldr	r4, [pc, #64]	; (80620 <_Z6pioIsr4Port+0x54>)
    int pin_mask = 0;
    volatile __IsrBank *isr_bank = 0;

    switch (p) {
      case A:
        pin_mask = PIOA->PIO_ISR;
   805e0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        isr_bank = &__isr_a;
        break;
   805e2:	e00d      	b.n	80600 <_Z6pioIsr4Port+0x34>
      case B:
        pin_mask = PIOB->PIO_ISR;
   805e4:	4b0f      	ldr	r3, [pc, #60]	; (80624 <_Z6pioIsr4Port+0x58>)
        isr_bank = &__isr_b;
   805e6:	4c10      	ldr	r4, [pc, #64]	; (80628 <_Z6pioIsr4Port+0x5c>)
      case A:
        pin_mask = PIOA->PIO_ISR;
        isr_bank = &__isr_a;
        break;
      case B:
        pin_mask = PIOB->PIO_ISR;
   805e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        isr_bank = &__isr_b;
        break;
   805ea:	e009      	b.n	80600 <_Z6pioIsr4Port+0x34>
      case C:
        pin_mask = PIOC->PIO_ISR;
   805ec:	4b0f      	ldr	r3, [pc, #60]	; (8062c <_Z6pioIsr4Port+0x60>)
        isr_bank = &__isr_c;
   805ee:	4c10      	ldr	r4, [pc, #64]	; (80630 <_Z6pioIsr4Port+0x64>)
      case B:
        pin_mask = PIOB->PIO_ISR;
        isr_bank = &__isr_b;
        break;
      case C:
        pin_mask = PIOC->PIO_ISR;
   805f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        isr_bank = &__isr_c;
        break;
   805f2:	e005      	b.n	80600 <_Z6pioIsr4Port+0x34>
      case D:
        pin_mask = PIOD->PIO_ISR;
   805f4:	4b0f      	ldr	r3, [pc, #60]	; (80634 <_Z6pioIsr4Port+0x68>)
        isr_bank = &__isr_d;
   805f6:	4c10      	ldr	r4, [pc, #64]	; (80638 <_Z6pioIsr4Port+0x6c>)
      case C:
        pin_mask = PIOC->PIO_ISR;
        isr_bank = &__isr_c;
        break;
      case D:
        pin_mask = PIOD->PIO_ISR;
   805f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        isr_bank = &__isr_d;
        break;
   805fa:	e001      	b.n	80600 <_Z6pioIsr4Port+0x34>
}

// This is some nonsense. I'm sorry. It should be really fast.
void pioIsr(Port p) {
    int pin_mask = 0;
    volatile __IsrBank *isr_bank = 0;
   805fc:	2400      	movs	r4, #0

}

// This is some nonsense. I'm sorry. It should be really fast.
void pioIsr(Port p) {
    int pin_mask = 0;
   805fe:	4620      	mov	r0, r4
        pin_mask = PIOD->PIO_ISR;
        isr_bank = &__isr_d;
        break;
    }
    
    int pin = log2(pin_mask);       // Convert the mask to a pin number quickly
   80600:	4b0e      	ldr	r3, [pc, #56]	; (8063c <_Z6pioIsr4Port+0x70>)
   80602:	4798      	blx	r3
   80604:	4b0e      	ldr	r3, [pc, #56]	; (80640 <_Z6pioIsr4Port+0x74>)
   80606:	4798      	blx	r3
   80608:	4b0e      	ldr	r3, [pc, #56]	; (80644 <_Z6pioIsr4Port+0x78>)
   8060a:	4798      	blx	r3
    __Isr isr = (*isr_bank)[pin];
   8060c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
        pin_mask = PIOD->PIO_ISR;
        isr_bank = &__isr_d;
        break;
    }
    
    int pin = log2(pin_mask);       // Convert the mask to a pin number quickly
   80610:	4601      	mov	r1, r0
    __Isr isr = (*isr_bank)[pin];

    if (isr != NULL) {
   80612:	b10b      	cbz	r3, 80618 <_Z6pioIsr4Port+0x4c>
        isr(p, pin);
   80614:	4628      	mov	r0, r5
   80616:	4798      	blx	r3
   80618:	bd38      	pop	{r3, r4, r5, pc}
   8061a:	bf00      	nop
   8061c:	400e0e00 	.word	0x400e0e00
   80620:	20000090 	.word	0x20000090
   80624:	400e1000 	.word	0x400e1000
   80628:	20000110 	.word	0x20000110
   8062c:	400e1200 	.word	0x400e1200
   80630:	20000190 	.word	0x20000190
   80634:	400e1400 	.word	0x400e1400
   80638:	20000210 	.word	0x20000210
   8063c:	00081805 	.word	0x00081805
   80640:	00081009 	.word	0x00081009
   80644:	00081e05 	.word	0x00081e05

00080648 <PIOA_Handler>:
    }
}

void PIOA_Handler(void) {
   80648:	b508      	push	{r3, lr}
    pioIsr(A);
   8064a:	2000      	movs	r0, #0
   8064c:	4b01      	ldr	r3, [pc, #4]	; (80654 <PIOA_Handler+0xc>)
   8064e:	4798      	blx	r3
   80650:	bd08      	pop	{r3, pc}
   80652:	bf00      	nop
   80654:	000805cd 	.word	0x000805cd

00080658 <PIOB_Handler>:
}

void PIOB_Handler(void) {
   80658:	b508      	push	{r3, lr}
    pioIsr(B);
   8065a:	2001      	movs	r0, #1
   8065c:	4b01      	ldr	r3, [pc, #4]	; (80664 <PIOB_Handler+0xc>)
   8065e:	4798      	blx	r3
   80660:	bd08      	pop	{r3, pc}
   80662:	bf00      	nop
   80664:	000805cd 	.word	0x000805cd

00080668 <PIOC_Handler>:
}

void PIOC_Handler(void) {
   80668:	b508      	push	{r3, lr}
    pioIsr(C);
   8066a:	2002      	movs	r0, #2
   8066c:	4b01      	ldr	r3, [pc, #4]	; (80674 <PIOC_Handler+0xc>)
   8066e:	4798      	blx	r3
   80670:	bd08      	pop	{r3, pc}
   80672:	bf00      	nop
   80674:	000805cd 	.word	0x000805cd

00080678 <PIOD_Handler>:
}

void PIOD_Handler(void) {
   80678:	b508      	push	{r3, lr}
    pioIsr(D);
   8067a:	2003      	movs	r0, #3
   8067c:	4b01      	ldr	r3, [pc, #4]	; (80684 <PIOD_Handler+0xc>)
   8067e:	4798      	blx	r3
   80680:	bd08      	pop	{r3, pc}
   80682:	bf00      	nop
   80684:	000805cd 	.word	0x000805cd

00080688 <_ZN7SSD13058InstanceEv>:

    SSD1305() {};
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
   80688:	b510      	push	{r4, lr}
        static SSD1305 instance;
   8068a:	4c08      	ldr	r4, [pc, #32]	; (806ac <_ZN7SSD13058InstanceEv+0x24>)
   8068c:	6823      	ldr	r3, [r4, #0]
   8068e:	07db      	lsls	r3, r3, #31
   80690:	d409      	bmi.n	806a6 <_ZN7SSD13058InstanceEv+0x1e>
   80692:	4620      	mov	r0, r4
   80694:	4b06      	ldr	r3, [pc, #24]	; (806b0 <_ZN7SSD13058InstanceEv+0x28>)
   80696:	4798      	blx	r3
   80698:	b128      	cbz	r0, 806a6 <_ZN7SSD13058InstanceEv+0x1e>
    static const Port resPort   =  B;
    static const int  resPin    = 25;
    static const Port dcPort    =  C;
    static const int  dcPin     = 28;

    SSD1305() {};
   8069a:	4b06      	ldr	r3, [pc, #24]	; (806b4 <_ZN7SSD13058InstanceEv+0x2c>)
   8069c:	4a06      	ldr	r2, [pc, #24]	; (806b8 <_ZN7SSD13058InstanceEv+0x30>)
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
        static SSD1305 instance;
   8069e:	4620      	mov	r0, r4
    static const Port resPort   =  B;
    static const int  resPin    = 25;
    static const Port dcPort    =  C;
    static const int  dcPin     = 28;

    SSD1305() {};
   806a0:	601a      	str	r2, [r3, #0]
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
        static SSD1305 instance;
   806a2:	4b06      	ldr	r3, [pc, #24]	; (806bc <_ZN7SSD13058InstanceEv+0x34>)
   806a4:	4798      	blx	r3
        return instance;
    };
   806a6:	4803      	ldr	r0, [pc, #12]	; (806b4 <_ZN7SSD13058InstanceEv+0x2c>)
   806a8:	bd10      	pop	{r4, pc}
   806aa:	bf00      	nop
   806ac:	20000294 	.word	0x20000294
   806b0:	00080fe1 	.word	0x00080fe1
   806b4:	20000290 	.word	0x20000290
   806b8:	000822f8 	.word	0x000822f8
   806bc:	00080ffd 	.word	0x00080ffd

000806c0 <_ZN7DisplayC1Ev>:
#include "driver/SSD1305.h"
#include "../assets/images.h"

#include <math.h>

Display::Display() {
   806c0:	b530      	push	{r4, r5, lr}
   806c2:	4d0f      	ldr	r5, [pc, #60]	; (80700 <_ZN7DisplayC1Ev+0x40>)
   806c4:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
   806c8:	4604      	mov	r4, r0
   806ca:	47a8      	blx	r5
    ssdp = SSD1305Params();
   806cc:	4668      	mov	r0, sp
   806ce:	47a8      	blx	r5
   806d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   806d4:	4669      	mov	r1, sp
   806d6:	4620      	mov	r0, r4
   806d8:	4b0a      	ldr	r3, [pc, #40]	; (80704 <_ZN7DisplayC1Ev+0x44>)
   806da:	4798      	blx	r3
   806dc:	4668      	mov	r0, sp
   806de:	4b0a      	ldr	r3, [pc, #40]	; (80708 <_ZN7DisplayC1Ev+0x48>)
   806e0:	4798      	blx	r3
    ssdp.clear(PIXEL_OFF);
   806e2:	4620      	mov	r0, r4
   806e4:	2100      	movs	r1, #0
   806e6:	4b09      	ldr	r3, [pc, #36]	; (8070c <_ZN7DisplayC1Ev+0x4c>)
   806e8:	4798      	blx	r3
    SSD1305::Instance().open(NULL);
   806ea:	4b09      	ldr	r3, [pc, #36]	; (80710 <_ZN7DisplayC1Ev+0x50>)
   806ec:	4798      	blx	r3
   806ee:	6803      	ldr	r3, [r0, #0]
   806f0:	2100      	movs	r1, #0
   806f2:	681b      	ldr	r3, [r3, #0]
   806f4:	4798      	blx	r3
}
   806f6:	4620      	mov	r0, r4
   806f8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   806fc:	bd30      	pop	{r4, r5, pc}
   806fe:	bf00      	nop
   80700:	00080a61 	.word	0x00080a61
   80704:	00081ebd 	.word	0x00081ebd
   80708:	00080a63 	.word	0x00080a63
   8070c:	00080aa3 	.word	0x00080aa3
   80710:	00080689 	.word	0x00080689

00080714 <_ZN7Display8drawTextEhh4FontPKc>:

void Display::drawBitmap( Bitmap &bmp) {
    bmp.draw(ssdp);
}

void Display::drawText( uint8_t x, uint8_t y, Font f, const char* str) {
   80714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int glyph_w, glyph_h;
    uint8_t x_origin = x;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
   80718:	2b01      	cmp	r3, #1

void Display::drawBitmap( Bitmap &bmp) {
    bmp.draw(ssdp);
}

void Display::drawText( uint8_t x, uint8_t y, Font f, const char* str) {
   8071a:	b08b      	sub	sp, #44	; 0x2c
   8071c:	9003      	str	r0, [sp, #12]
   8071e:	4688      	mov	r8, r1
   80720:	4617      	mov	r7, r2
    int glyph_w, glyph_h;
    uint8_t x_origin = x;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
   80722:	d103      	bne.n	8072c <_ZN7Display8drawTextEhh4FontPKc+0x18>
        bitmap_raw = font_large;
   80724:	492f      	ldr	r1, [pc, #188]	; (807e4 <_ZN7Display8drawTextEhh4FontPKc+0xd0>)
        glyph_w = 8;
        glyph_h = 32;
   80726:	2520      	movs	r5, #32
    uint8_t x_origin = x;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
        bitmap_raw = font_large;
        glyph_w = 8;
   80728:	2408      	movs	r4, #8
   8072a:	e002      	b.n	80732 <_ZN7Display8drawTextEhh4FontPKc+0x1e>
        glyph_h = 32;
    } else {    // default is SMALL_FONT
        bitmap_raw = font_small;
        glyph_w = 7;
        glyph_h = 7;
   8072c:	2507      	movs	r5, #7
    if (f == LARGE_FONT) {
        bitmap_raw = font_large;
        glyph_w = 8;
        glyph_h = 32;
    } else {    // default is SMALL_FONT
        bitmap_raw = font_small;
   8072e:	492e      	ldr	r1, [pc, #184]	; (807e8 <_ZN7Display8drawTextEhh4FontPKc+0xd4>)
        glyph_w = 7;
   80730:	462c      	mov	r4, r5
        glyph_h = 7;
    }

    Bitmap bmp(bitmap_raw);
   80732:	4b2e      	ldr	r3, [pc, #184]	; (807ec <_ZN7Display8drawTextEhh4FontPKc+0xd8>)
   80734:	a805      	add	r0, sp, #20
   80736:	4798      	blx	r3

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
   80738:	9b08      	ldr	r3, [sp, #32]
   8073a:	fb93 f3f4 	sdiv	r3, r3, r4
   8073e:	fb04 f903 	mul.w	r9, r4, r3
   80742:	9b14      	ldr	r3, [sp, #80]	; 0x50
   80744:	f103 3aff 	add.w	sl, r3, #4294967295
        else if (str[i] >= 97 && str[i] <= 122) glyphPos = str[i] - 83; // a-z
        else                                    glyphPos = 12;          // ?
        
        // If this is a newline
        if (str[i] == 10) { 
            x = x_origin;
   80748:	4646      	mov	r6, r8

    Bitmap bmp(bitmap_raw);

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
    
    for (int i = 0; str[i] != 0; i++) {
   8074a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   8074e:	2b00      	cmp	r3, #0
   80750:	d045      	beq.n	807de <_ZN7Display8drawTextEhh4FontPKc+0xca>
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
   80752:	2b20      	cmp	r3, #32
   80754:	d020      	beq.n	80798 <_ZN7Display8drawTextEhh4FontPKc+0x84>
        else if (str[i] == 45)                  glyphPos = 1;           // -
   80756:	2b2d      	cmp	r3, #45	; 0x2d
   80758:	d03b      	beq.n	807d2 <_ZN7Display8drawTextEhh4FontPKc+0xbe>
        else if (str[i] >= 48 && str[i] <= 57)  glyphPos = str[i] - 46; // 0-9
   8075a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8075e:	2a09      	cmp	r2, #9
   80760:	d802      	bhi.n	80768 <_ZN7Display8drawTextEhh4FontPKc+0x54>
   80762:	f1a3 022e 	sub.w	r2, r3, #46	; 0x2e
   80766:	e018      	b.n	8079a <_ZN7Display8drawTextEhh4FontPKc+0x86>
        else if (str[i] == 63)                  glyphPos = 12;          // ?
   80768:	2b3f      	cmp	r3, #63	; 0x3f
   8076a:	d034      	beq.n	807d6 <_ZN7Display8drawTextEhh4FontPKc+0xc2>
        else if (str[i] == 46)                  glyphPos = 13;          // .
   8076c:	2b2e      	cmp	r3, #46	; 0x2e
   8076e:	d034      	beq.n	807da <_ZN7Display8drawTextEhh4FontPKc+0xc6>
        else if (str[i] >= 65 && str[i] <= 90)  glyphPos = str[i] - 51; // A-Z
   80770:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   80774:	2a19      	cmp	r2, #25
   80776:	d802      	bhi.n	8077e <_ZN7Display8drawTextEhh4FontPKc+0x6a>
   80778:	f1a3 0233 	sub.w	r2, r3, #51	; 0x33
   8077c:	e006      	b.n	8078c <_ZN7Display8drawTextEhh4FontPKc+0x78>
        else if (str[i] >= 97 && str[i] <= 122) glyphPos = str[i] - 83; // a-z
   8077e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   80782:	2a19      	cmp	r2, #25
   80784:	bf94      	ite	ls
   80786:	f1a3 0253 	subls.w	r2, r3, #83	; 0x53
        else                                    glyphPos = 12;          // ?
   8078a:	220c      	movhi	r2, #12
        
        // If this is a newline
        if (str[i] == 10) { 
   8078c:	2b0a      	cmp	r3, #10
   8078e:	d104      	bne.n	8079a <_ZN7Display8drawTextEhh4FontPKc+0x86>
            x = x_origin;
            y += glyph_h + 1;
   80790:	1c6b      	adds	r3, r5, #1
   80792:	441f      	add	r7, r3
   80794:	b2ff      	uxtb	r7, r7
   80796:	e7d7      	b.n	80748 <_ZN7Display8drawTextEhh4FontPKc+0x34>

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
    
    for (int i = 0; str[i] != 0; i++) {
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
   80798:	2200      	movs	r2, #0
        // If this is a newline
        if (str[i] == 10) { 
            x = x_origin;
            y += glyph_h + 1;
        } else {
            bmp.setRectangle(   (glyphPos * glyph_w) % glyph_map_w,
   8079a:	4362      	muls	r2, r4
   8079c:	fb92 f3f9 	sdiv	r3, r2, r9
   807a0:	fb09 2113 	mls	r1, r9, r3, r2
            (((glyphPos * glyph_w) / glyph_map_w) * glyph_h),
            glyph_w, glyph_h);
   807a4:	436b      	muls	r3, r5
   807a6:	fa5f fb84 	uxtb.w	fp, r4
   807aa:	b2da      	uxtb	r2, r3
   807ac:	f8df c048 	ldr.w	ip, [pc, #72]	; 807f8 <_ZN7Display8drawTextEhh4FontPKc+0xe4>
   807b0:	a805      	add	r0, sp, #20
   807b2:	b2c9      	uxtb	r1, r1
   807b4:	465b      	mov	r3, fp
   807b6:	9500      	str	r5, [sp, #0]
   807b8:	47e0      	blx	ip
            bmp.moveTo(x, y);
   807ba:	4631      	mov	r1, r6
   807bc:	a805      	add	r0, sp, #20
   807be:	463a      	mov	r2, r7
   807c0:	4b0b      	ldr	r3, [pc, #44]	; (807f0 <_ZN7Display8drawTextEhh4FontPKc+0xdc>)
   807c2:	4798      	blx	r3
            bmp.draw(ssdp);
            x += glyph_w;
   807c4:	445e      	add	r6, fp
        } else {
            bmp.setRectangle(   (glyphPos * glyph_w) % glyph_map_w,
            (((glyphPos * glyph_w) / glyph_map_w) * glyph_h),
            glyph_w, glyph_h);
            bmp.moveTo(x, y);
            bmp.draw(ssdp);
   807c6:	a805      	add	r0, sp, #20
   807c8:	9903      	ldr	r1, [sp, #12]
   807ca:	4b0a      	ldr	r3, [pc, #40]	; (807f4 <_ZN7Display8drawTextEhh4FontPKc+0xe0>)
   807cc:	4798      	blx	r3
            x += glyph_w;
   807ce:	b2f6      	uxtb	r6, r6
   807d0:	e7bb      	b.n	8074a <_ZN7Display8drawTextEhh4FontPKc+0x36>
    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
    
    for (int i = 0; str[i] != 0; i++) {
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
        else if (str[i] == 45)                  glyphPos = 1;           // -
   807d2:	2201      	movs	r2, #1
   807d4:	e7e1      	b.n	8079a <_ZN7Display8drawTextEhh4FontPKc+0x86>
        else if (str[i] >= 48 && str[i] <= 57)  glyphPos = str[i] - 46; // 0-9
        else if (str[i] == 63)                  glyphPos = 12;          // ?
   807d6:	220c      	movs	r2, #12
   807d8:	e7df      	b.n	8079a <_ZN7Display8drawTextEhh4FontPKc+0x86>
        else if (str[i] == 46)                  glyphPos = 13;          // .
   807da:	220d      	movs	r2, #13
   807dc:	e7dd      	b.n	8079a <_ZN7Display8drawTextEhh4FontPKc+0x86>
            bmp.moveTo(x, y);
            bmp.draw(ssdp);
            x += glyph_w;
        }
    }
}
   807de:	b00b      	add	sp, #44	; 0x2c
   807e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807e4:	000820be 	.word	0x000820be
   807e8:	00081f7c 	.word	0x00081f7c
   807ec:	00080825 	.word	0x00080825
   807f0:	00080849 	.word	0x00080849
   807f4:	0008085d 	.word	0x0008085d
   807f8:	0008084f 	.word	0x0008084f

000807fc <_ZN7Display5clearEv>:

void Display::drawPixel(int x, int y) {
    ssdp.setPixel(x, y, PIXEL_ON);
}

void Display::clear() {
   807fc:	b508      	push	{r3, lr}
    ssdp.clear(PIXEL_OFF);
   807fe:	2100      	movs	r1, #0
   80800:	4b01      	ldr	r3, [pc, #4]	; (80808 <_ZN7Display5clearEv+0xc>)
   80802:	4798      	blx	r3
   80804:	bd08      	pop	{r3, pc}
   80806:	bf00      	nop
   80808:	00080aa3 	.word	0x00080aa3

0008080c <_ZN7Display5paintEv>:
}

void Display::paint() {
   8080c:	b510      	push	{r4, lr}
    SSD1305::Instance().write(&ssdp);
   8080e:	4b04      	ldr	r3, [pc, #16]	; (80820 <_ZN7Display5paintEv+0x14>)

void Display::clear() {
    ssdp.clear(PIXEL_OFF);
}

void Display::paint() {
   80810:	4604      	mov	r4, r0
    SSD1305::Instance().write(&ssdp);
   80812:	4798      	blx	r3
   80814:	6803      	ldr	r3, [r0, #0]
   80816:	4621      	mov	r1, r4
   80818:	689b      	ldr	r3, [r3, #8]
   8081a:	4798      	blx	r3
   8081c:	bd10      	pop	{r4, pc}
   8081e:	bf00      	nop
   80820:	00080689 	.word	0x00080689

00080824 <_ZN6BitmapC1EPKh>:

Bitmap::Bitmap(uint8_t x, uint8_t y, const unsigned char* bmp) {
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], x, y, bmp);
}

Bitmap::Bitmap(const unsigned char* bmp) {
   80824:	b530      	push	{r4, r5, lr}
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], 0, 0, bmp);
   80826:	780d      	ldrb	r5, [r1, #0]
   80828:	784c      	ldrb	r4, [r1, #1]
}

void Bitmap::init(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h, 
                  uint8_t x, uint8_t y, const unsigned char* bmp) {
    this->r_x = r_x;
   8082a:	2200      	movs	r2, #0
   8082c:	7082      	strb	r2, [r0, #2]
    this->r_y = r_y;
   8082e:	70c2      	strb	r2, [r0, #3]
    this->r_w = r_w;
   80830:	7105      	strb	r5, [r0, #4]
    this->r_h = r_h;
   80832:	7144      	strb	r4, [r0, #5]

    this->x = x;
   80834:	7002      	strb	r2, [r0, #0]
    this->y = y;
   80836:	7042      	strb	r2, [r0, #1]

    width = bmp[0];
   80838:	780a      	ldrb	r2, [r1, #0]
    height = bmp[1];

    bitmap = &bmp[2];
   8083a:	3102      	adds	r1, #2
    this->r_h = r_h;

    this->x = x;
    this->y = y;

    width = bmp[0];
   8083c:	60c2      	str	r2, [r0, #12]
    height = bmp[1];
   8083e:	f811 2c01 	ldrb.w	r2, [r1, #-1]

    bitmap = &bmp[2];
   80842:	6081      	str	r1, [r0, #8]

    this->x = x;
    this->y = y;

    width = bmp[0];
    height = bmp[1];
   80844:	6102      	str	r2, [r0, #16]
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], x, y, bmp);
}

Bitmap::Bitmap(const unsigned char* bmp) {
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], 0, 0, bmp);
}
   80846:	bd30      	pop	{r4, r5, pc}

00080848 <_ZN6Bitmap6moveToEhh>:

    bitmap = &bmp[2];
}

void Bitmap::moveTo(uint8_t x, uint8_t y) {
    this->x = x;
   80848:	7001      	strb	r1, [r0, #0]
    this->y = y;
   8084a:	7042      	strb	r2, [r0, #1]
   8084c:	4770      	bx	lr

0008084e <_ZN6Bitmap12setRectangleEhhhh>:
}

void Bitmap::setRectangle(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h) {
    this->r_x = r_x;
    this->r_y = r_y;
    this->r_w = r_w;
   8084e:	7103      	strb	r3, [r0, #4]
    this->r_h = r_h;
   80850:	f89d 3000 	ldrb.w	r3, [sp]
uint8_t Bitmap::getY() {
    return y;
}

void Bitmap::setRectangle(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h) {
    this->r_x = r_x;
   80854:	7081      	strb	r1, [r0, #2]
    this->r_y = r_y;
   80856:	70c2      	strb	r2, [r0, #3]
    this->r_w = r_w;
    this->r_h = r_h;
   80858:	7143      	strb	r3, [r0, #5]
   8085a:	4770      	bx	lr

0008085c <_ZN6Bitmap4drawER13SSD1305Params>:

uint8_t Bitmap::getRectH() {
    return r_h;
}

void Bitmap::draw(SSD1305Params &ssdp) {
   8085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80860:	4604      	mov	r4, r0
   80862:	4688      	mov	r8, r1
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
   80864:	2600      	movs	r6, #0
   80866:	7963      	ldrb	r3, [r4, #5]
   80868:	b2f5      	uxtb	r5, r6
   8086a:	42ab      	cmp	r3, r5
   8086c:	d926      	bls.n	808bc <_ZN6Bitmap4drawER13SSD1305Params+0x60>
   8086e:	2300      	movs	r3, #0
   80870:	b2da      	uxtb	r2, r3
   80872:	f103 0901 	add.w	r9, r3, #1
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
   80876:	7923      	ldrb	r3, [r4, #4]
   80878:	4293      	cmp	r3, r2
   8087a:	d91d      	bls.n	808b8 <_ZN6Bitmap4drawER13SSD1305Params+0x5c>
            uint8_t disp_x = x + d_x;
   8087c:	7823      	ldrb	r3, [r4, #0]
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   8087e:	78a7      	ldrb	r7, [r4, #2]
   80880:	68e1      	ldr	r1, [r4, #12]
   80882:	4417      	add	r7, r2
}

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
   80884:	441a      	add	r2, r3
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   80886:	78e3      	ldrb	r3, [r4, #3]

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
            uint8_t disp_y = y + d_y;
   80888:	f894 e001 	ldrb.w	lr, [r4, #1]

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   8088c:	442b      	add	r3, r5
   8088e:	fb01 7303 	mla	r3, r1, r3, r7
   80892:	2108      	movs	r1, #8
   80894:	fb93 f3f1 	sdiv	r3, r3, r1

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
                PIXEL_ON : PIXEL_OFF;
   80898:	68a1      	ldr	r1, [r4, #8]
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
   8089a:	f007 0707 	and.w	r7, r7, #7
                PIXEL_ON : PIXEL_OFF;
   8089e:	5ccb      	ldrb	r3, [r1, r3]

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
            uint8_t disp_y = y + d_y;
   808a0:	44ae      	add	lr, r5

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
                PIXEL_ON : PIXEL_OFF;
   808a2:	413b      	asrs	r3, r7

            ssdp.setPixel(disp_x, disp_y, pix_status);
   808a4:	b2d1      	uxtb	r1, r2
   808a6:	f003 0301 	and.w	r3, r3, #1
   808aa:	4640      	mov	r0, r8
   808ac:	fa5f f28e 	uxtb.w	r2, lr
   808b0:	4f03      	ldr	r7, [pc, #12]	; (808c0 <_ZN6Bitmap4drawER13SSD1305Params+0x64>)
   808b2:	47b8      	blx	r7
   808b4:	464b      	mov	r3, r9
   808b6:	e7db      	b.n	80870 <_ZN6Bitmap4drawER13SSD1305Params+0x14>
   808b8:	3601      	adds	r6, #1
   808ba:	e7d4      	b.n	80866 <_ZN6Bitmap4drawER13SSD1305Params+0xa>
   808bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   808c0:	00080a65 	.word	0x00080a65

000808c4 <_ZN8Encoders5closeEv>:
    return 0;
}

int Encoders::close() {
    return 0;
}
   808c4:	2000      	movs	r0, #0
   808c6:	4770      	bx	lr

000808c8 <_ZN8Encoders5writeEPv>:

int Encoders::write(void* p) {
    return 0;
}
   808c8:	2000      	movs	r0, #0
   808ca:	4770      	bx	lr

000808cc <_ZN8Encoders4readEv>:

void *Encoders::read() {
    for (int i = 0; i < 4; i++) {
   808cc:	2300      	movs	r3, #0
   808ce:	eb00 0243 	add.w	r2, r0, r3, lsl #1
        readStatus.relative_position[i] = status.relative_position[i];
   808d2:	8891      	ldrh	r1, [r2, #4]
int Encoders::write(void* p) {
    return 0;
}

void *Encoders::read() {
    for (int i = 0; i < 4; i++) {
   808d4:	3301      	adds	r3, #1
        readStatus.relative_position[i] = status.relative_position[i];
   808d6:	8191      	strh	r1, [r2, #12]
int Encoders::write(void* p) {
    return 0;
}

void *Encoders::read() {
    for (int i = 0; i < 4; i++) {
   808d8:	2b04      	cmp	r3, #4
        readStatus.relative_position[i] = status.relative_position[i];
        status.relative_position[i] = 0;
   808da:	f04f 0100 	mov.w	r1, #0
   808de:	8091      	strh	r1, [r2, #4]
int Encoders::write(void* p) {
    return 0;
}

void *Encoders::read() {
    for (int i = 0; i < 4; i++) {
   808e0:	d1f5      	bne.n	808ce <_ZN8Encoders4readEv+0x2>
        readStatus.relative_position[i] = status.relative_position[i];
        status.relative_position[i] = 0;
    }
    
    return (void*)&readStatus;
}
   808e2:	300c      	adds	r0, #12
   808e4:	4770      	bx	lr

000808e6 <_ZN8Encoders5ioctlEiPv>:

 void *Encoders::ioctl(int ioctl_t, void *params) {
    return (void*)0;
 }
   808e6:	2000      	movs	r0, #0
   808e8:	4770      	bx	lr
	...

000808ec <_ZN8Encoders4openEPv>:
Port const Encoders::aPorts[] = {B,  A,  D, D};
int  const Encoders::aPins[]  = {26, 15, 1, 3};
Port const Encoders::bPorts[] = {A,  D,  D, D};
int  const Encoders::bPins[]  = {14, 0,  2, 6};

int Encoders::open(void* p) {
   808ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   808f0:	4607      	mov	r7, r0
    /* Set up our IO */
    for (int i = 0; i < 4; i++) {
   808f2:	2400      	movs	r4, #0
        // Enable, set to input
        pinSetMode(aPorts[i], aPins[i], INPUT);
   808f4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 809a8 <_ZN8Encoders4openEPv+0xbc>
   808f8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 809ac <_ZN8Encoders4openEPv+0xc0>
   808fc:	f814 600a 	ldrb.w	r6, [r4, sl]
   80900:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
   80904:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 809b0 <_ZN8Encoders4openEPv+0xc4>
   80908:	4630      	mov	r0, r6
   8090a:	4629      	mov	r1, r5
   8090c:	2200      	movs	r2, #0
   8090e:	f8cd c004 	str.w	ip, [sp, #4]
   80912:	47e0      	blx	ip
        pinSetMode(bPorts[i], bPins[i], INPUT);
   80914:	f8df 809c 	ldr.w	r8, [pc, #156]	; 809b4 <_ZN8Encoders4openEPv+0xc8>
   80918:	4a1e      	ldr	r2, [pc, #120]	; (80994 <_ZN8Encoders4openEPv+0xa8>)
   8091a:	f814 3008 	ldrb.w	r3, [r4, r8]
   8091e:	f852 b024 	ldr.w	fp, [r2, r4, lsl #2]
   80922:	4618      	mov	r0, r3
   80924:	f8dd c004 	ldr.w	ip, [sp, #4]
   80928:	9300      	str	r3, [sp, #0]
   8092a:	4659      	mov	r1, fp
   8092c:	2200      	movs	r2, #0
   8092e:	47e0      	blx	ip

        // Enable pull-ups
        pinEnablePullup(aPorts[i], aPins[i]);
   80930:	4a19      	ldr	r2, [pc, #100]	; (80998 <_ZN8Encoders4openEPv+0xac>)
   80932:	4630      	mov	r0, r6
   80934:	4629      	mov	r1, r5
   80936:	9201      	str	r2, [sp, #4]
   80938:	4790      	blx	r2
        pinEnablePullup(bPorts[i], bPins[i]);
   8093a:	9b00      	ldr	r3, [sp, #0]
   8093c:	4659      	mov	r1, fp
   8093e:	4618      	mov	r0, r3
   80940:	9a01      	ldr	r2, [sp, #4]
   80942:	4790      	blx	r2
Port const Encoders::bPorts[] = {A,  D,  D, D};
int  const Encoders::bPins[]  = {14, 0,  2, 6};

int Encoders::open(void* p) {
    /* Set up our IO */
    for (int i = 0; i < 4; i++) {
   80944:	3401      	adds	r4, #1

        // Enable pull-ups
        pinEnablePullup(aPorts[i], aPins[i]);
        pinEnablePullup(bPorts[i], bPins[i]);

        attachInterrupt(aPorts[i], aPins[i], &__encoders_isr);
   80946:	4630      	mov	r0, r6
   80948:	4629      	mov	r1, r5
   8094a:	4a14      	ldr	r2, [pc, #80]	; (8099c <_ZN8Encoders4openEPv+0xb0>)
   8094c:	4b14      	ldr	r3, [pc, #80]	; (809a0 <_ZN8Encoders4openEPv+0xb4>)
   8094e:	4798      	blx	r3
Port const Encoders::bPorts[] = {A,  D,  D, D};
int  const Encoders::bPins[]  = {14, 0,  2, 6};

int Encoders::open(void* p) {
    /* Set up our IO */
    for (int i = 0; i < 4; i++) {
   80950:	2c04      	cmp	r4, #4
   80952:	4e10      	ldr	r6, [pc, #64]	; (80994 <_ZN8Encoders4openEPv+0xa8>)
   80954:	d1ce      	bne.n	808f4 <_ZN8Encoders4openEPv+0x8>
   80956:	2400      	movs	r4, #0
    }

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
        // States are in the form of 0b000000ab
        states[i] = (pinReadInput(aPorts[i], aPins[i]) << 1) | pinReadInput(bPorts[i], bPins[i]);
   80958:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
   8095c:	f81a 0004 	ldrb.w	r0, [sl, r4]
   80960:	4d10      	ldr	r5, [pc, #64]	; (809a4 <_ZN8Encoders4openEPv+0xb8>)
   80962:	47a8      	blx	r5
   80964:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   80968:	4683      	mov	fp, r0
   8096a:	f818 0004 	ldrb.w	r0, [r8, r4]
   8096e:	47a8      	blx	r5
   80970:	ea40 004b 	orr.w	r0, r0, fp, lsl #1
   80974:	193b      	adds	r3, r7, r4
   80976:	fa5f fb80 	uxtb.w	fp, r0
   8097a:	f883 b014 	strb.w	fp, [r3, #20]

        // And set encoder status
        status.relative_position[i] = 0;
   8097e:	eb07 0344 	add.w	r3, r7, r4, lsl #1

        attachInterrupt(aPorts[i], aPins[i], &__encoders_isr);
    }

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
   80982:	3401      	adds	r4, #1
        // States are in the form of 0b000000ab
        states[i] = (pinReadInput(aPorts[i], aPins[i]) << 1) | pinReadInput(bPorts[i], bPins[i]);

        // And set encoder status
        status.relative_position[i] = 0;
   80984:	2000      	movs	r0, #0

        attachInterrupt(aPorts[i], aPins[i], &__encoders_isr);
    }

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
   80986:	2c04      	cmp	r4, #4
        // States are in the form of 0b000000ab
        states[i] = (pinReadInput(aPorts[i], aPins[i]) << 1) | pinReadInput(bPorts[i], bPins[i]);

        // And set encoder status
        status.relative_position[i] = 0;
   80988:	8098      	strh	r0, [r3, #4]

        attachInterrupt(aPorts[i], aPins[i], &__encoders_isr);
    }

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
   8098a:	d1e5      	bne.n	80958 <_ZN8Encoders4openEPv+0x6c>
        // And set encoder status
        status.relative_position[i] = 0;
    }

    return 0;
}
   8098c:	b003      	add	sp, #12
   8098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80992:	bf00      	nop
   80994:	00082280 	.word	0x00082280
   80998:	00080399 	.word	0x00080399
   8099c:	00080a19 	.word	0x00080a19
   809a0:	000804e9 	.word	0x000804e9
   809a4:	000804ad 	.word	0x000804ad
   809a8:	00082290 	.word	0x00082290
   809ac:	000822bc 	.word	0x000822bc
   809b0:	00080255 	.word	0x00080255
   809b4:	000822b8 	.word	0x000822b8

000809b8 <_ZN8Encoders18interrupt_callbackE4Porti>:

 void *Encoders::ioctl(int ioctl_t, void *params) {
    return (void*)0;
 }

 void Encoders::interrupt_callback(Port p, int pin) {
   809b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   809ba:	4605      	mov	r5, r0
    for (int i = 0; i < 4; i++) {
   809bc:	2400      	movs	r4, #0

 void *Encoders::ioctl(int ioctl_t, void *params) {
    return (void*)0;
 }

 void Encoders::interrupt_callback(Port p, int pin) {
   809be:	4608      	mov	r0, r1
    for (int i = 0; i < 4; i++) {
        if (p == aPorts[i] && pin == aPins[i]) {
   809c0:	4b10      	ldr	r3, [pc, #64]	; (80a04 <_ZN8Encoders18interrupt_callbackE4Porti+0x4c>)
   809c2:	5ce3      	ldrb	r3, [r4, r3]
   809c4:	4283      	cmp	r3, r0
   809c6:	d119      	bne.n	809fc <_ZN8Encoders18interrupt_callbackE4Porti+0x44>
   809c8:	4b0f      	ldr	r3, [pc, #60]	; (80a08 <_ZN8Encoders18interrupt_callbackE4Porti+0x50>)
   809ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   809ce:	429a      	cmp	r2, r3
   809d0:	d114      	bne.n	809fc <_ZN8Encoders18interrupt_callbackE4Porti+0x44>
            if (pinReadInput(p, pin) == pinReadInput(bPorts[i], bPins[i])) {
   809d2:	4611      	mov	r1, r2
   809d4:	4e0d      	ldr	r6, [pc, #52]	; (80a0c <_ZN8Encoders18interrupt_callbackE4Porti+0x54>)
   809d6:	47b0      	blx	r6
   809d8:	4b0d      	ldr	r3, [pc, #52]	; (80a10 <_ZN8Encoders18interrupt_callbackE4Porti+0x58>)
   809da:	4607      	mov	r7, r0
   809dc:	5d18      	ldrb	r0, [r3, r4]
   809de:	4b0d      	ldr	r3, [pc, #52]	; (80a14 <_ZN8Encoders18interrupt_callbackE4Porti+0x5c>)
   809e0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   809e4:	47b0      	blx	r6
   809e6:	0064      	lsls	r4, r4, #1
   809e8:	4425      	add	r5, r4
                status.relative_position[i] ++;
   809ea:	88ab      	ldrh	r3, [r5, #4]
 }

 void Encoders::interrupt_callback(Port p, int pin) {
    for (int i = 0; i < 4; i++) {
        if (p == aPorts[i] && pin == aPins[i]) {
            if (pinReadInput(p, pin) == pinReadInput(bPorts[i], bPins[i])) {
   809ec:	4287      	cmp	r7, r0
                status.relative_position[i] ++;
   809ee:	bf0c      	ite	eq
   809f0:	3301      	addeq	r3, #1
            } else {
                status.relative_position[i] --;
   809f2:	f103 33ff 	addne.w	r3, r3, #4294967295
   809f6:	b29b      	uxth	r3, r3
   809f8:	80ab      	strh	r3, [r5, #4]
   809fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 void *Encoders::ioctl(int ioctl_t, void *params) {
    return (void*)0;
 }

 void Encoders::interrupt_callback(Port p, int pin) {
    for (int i = 0; i < 4; i++) {
   809fc:	3401      	adds	r4, #1
   809fe:	2c04      	cmp	r4, #4
   80a00:	d1de      	bne.n	809c0 <_ZN8Encoders18interrupt_callbackE4Porti+0x8>
   80a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80a04:	00082290 	.word	0x00082290
   80a08:	000822bc 	.word	0x000822bc
   80a0c:	000804ad 	.word	0x000804ad
   80a10:	000822b8 	.word	0x000822b8
   80a14:	00082280 	.word	0x00082280

00080a18 <_Z14__encoders_isr4Porti>:
            break;
        }
    }
 }

 void __encoders_isr(Port p, int pin) {
   80a18:	b570      	push	{r4, r5, r6, lr}
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   80a1a:	4c0b      	ldr	r4, [pc, #44]	; (80a48 <_Z14__encoders_isr4Porti+0x30>)
   80a1c:	4606      	mov	r6, r0
   80a1e:	6823      	ldr	r3, [r4, #0]
   80a20:	460d      	mov	r5, r1
   80a22:	07db      	lsls	r3, r3, #31
   80a24:	d409      	bmi.n	80a3a <_Z14__encoders_isr4Porti+0x22>
   80a26:	4620      	mov	r0, r4
   80a28:	4b08      	ldr	r3, [pc, #32]	; (80a4c <_Z14__encoders_isr4Porti+0x34>)
   80a2a:	4798      	blx	r3
   80a2c:	b128      	cbz	r0, 80a3a <_Z14__encoders_isr4Porti+0x22>
    EncodersStatus readStatus;
    volatile uint8_t states[4];
    //volatile EncoderState *states[4];

    // Define as a singleton
    Encoders() {};
   80a2e:	4b08      	ldr	r3, [pc, #32]	; (80a50 <_Z14__encoders_isr4Porti+0x38>)
   80a30:	4a08      	ldr	r2, [pc, #32]	; (80a54 <_Z14__encoders_isr4Porti+0x3c>)
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   80a32:	4620      	mov	r0, r4
    EncodersStatus readStatus;
    volatile uint8_t states[4];
    //volatile EncoderState *states[4];

    // Define as a singleton
    Encoders() {};
   80a34:	601a      	str	r2, [r3, #0]
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   80a36:	4b08      	ldr	r3, [pc, #32]	; (80a58 <_Z14__encoders_isr4Porti+0x40>)
   80a38:	4798      	blx	r3
    Encoders::Instance().interrupt_callback(p, pin);
   80a3a:	4805      	ldr	r0, [pc, #20]	; (80a50 <_Z14__encoders_isr4Porti+0x38>)
   80a3c:	4631      	mov	r1, r6
   80a3e:	462a      	mov	r2, r5
   80a40:	4b06      	ldr	r3, [pc, #24]	; (80a5c <_Z14__encoders_isr4Porti+0x44>)
   80a42:	4798      	blx	r3
   80a44:	bd70      	pop	{r4, r5, r6, pc}
   80a46:	bf00      	nop
   80a48:	200002b0 	.word	0x200002b0
   80a4c:	00080fe1 	.word	0x00080fe1
   80a50:	20000298 	.word	0x20000298
   80a54:	000822a0 	.word	0x000822a0
   80a58:	00080ffd 	.word	0x00080ffd
   80a5c:	000809b9 	.word	0x000809b9

00080a60 <_ZN13SSD1305ParamsC1Ev>:
#include "../SSD1305.h"

#include <stdlib.h>

SSD1305Params::SSD1305Params() {
}
   80a60:	4770      	bx	lr

00080a62 <_ZN13SSD1305ParamsD1Ev>:

SSD1305Params::~SSD1305Params() {

}
   80a62:	4770      	bx	lr

00080a64 <_ZN13SSD1305Params8setPixelEiii>:

void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
   80a64:	297f      	cmp	r1, #127	; 0x7f

SSD1305Params::~SSD1305Params() {

}

void SSD1305Params::setPixel(int x, int y, int val) {
   80a66:	b510      	push	{r4, lr}
    if (x >= 0 && x < width && y >= 0 && y < height) {
   80a68:	d81a      	bhi.n	80aa0 <_ZN13SSD1305Params8setPixelEiii+0x3c>
   80a6a:	2a1f      	cmp	r2, #31
   80a6c:	d818      	bhi.n	80aa0 <_ZN13SSD1305Params8setPixelEiii+0x3c>
   80a6e:	f1c2 041f 	rsb	r4, r2, #31
   80a72:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   80a76:	f002 0207 	and.w	r2, r2, #7
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
   80a7a:	10e4      	asrs	r4, r4, #3
void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
   80a7c:	2b01      	cmp	r3, #1
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
                    0x1 << ((pix_in_page - 1) - ( y % pix_in_page));
   80a7e:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
   80a82:	f1c2 0207 	rsb	r2, r2, #7
void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
   80a86:	d104      	bne.n	80a92 <_ZN13SSD1305Params8setPixelEiii+0x2e>
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
                    0x1 << ((pix_in_page - 1) - ( y % pix_in_page));
   80a88:	4093      	lsls	r3, r2
   80a8a:	5c42      	ldrb	r2, [r0, r1]
   80a8c:	4313      	orrs	r3, r2
   80a8e:	5443      	strb	r3, [r0, r1]
   80a90:	bd10      	pop	{r4, pc}
            else
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] &=
                   ~(0x1 << ((pix_in_page - 1) - (y % pix_in_page))); 
   80a92:	2301      	movs	r3, #1
   80a94:	fa03 f202 	lsl.w	r2, r3, r2
   80a98:	5c43      	ldrb	r3, [r0, r1]
   80a9a:	ea23 0202 	bic.w	r2, r3, r2
   80a9e:	5442      	strb	r2, [r0, r1]
   80aa0:	bd10      	pop	{r4, pc}

00080aa2 <_ZN13SSD1305Params5clearEi>:
        #endif
    }
}

void SSD1305Params::clear(int val) {
    for (int i = 0; i < visible_buffers; i++) {
   80aa2:	2300      	movs	r3, #0
        if (val == PIXEL_ON)
   80aa4:	2901      	cmp	r1, #1
            buffer[i] = 0xFF; // <<<< Problem is here
   80aa6:	bf0c      	ite	eq
   80aa8:	22ff      	moveq	r2, #255	; 0xff
        else
            buffer[i] = 0x00;
   80aaa:	2200      	movne	r2, #0
   80aac:	54c2      	strb	r2, [r0, r3]
        #endif
    }
}

void SSD1305Params::clear(int val) {
    for (int i = 0; i < visible_buffers; i++) {
   80aae:	3301      	adds	r3, #1
   80ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80ab4:	d1f6      	bne.n	80aa4 <_ZN13SSD1305Params5clearEi+0x2>
        if (val == PIXEL_ON)
            buffer[i] = 0xFF; // <<<< Problem is here
        else
            buffer[i] = 0x00;
    }
   80ab6:	4770      	bx	lr

00080ab8 <_ZN3SPI5closeEv>:

    return 0;
 }

 int SPI::close() {
    SPI0->SPI_CR = SPI_CR_SPIDIS;
   80ab8:	4b05      	ldr	r3, [pc, #20]	; (80ad0 <_ZN3SPI5closeEv+0x18>)
   80aba:	2202      	movs	r2, #2
   80abc:	601a      	str	r2, [r3, #0]
    PMC->PMC_PCDR0 = 1<<ID_SPI0;
   80abe:	f503 2358 	add.w	r3, r3, #884736	; 0xd8000
   80ac2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80ac6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   80aca:	615a      	str	r2, [r3, #20]
    return 0;
 }
   80acc:	2000      	movs	r0, #0
   80ace:	4770      	bx	lr
   80ad0:	40008000 	.word	0x40008000

00080ad4 <_ZN3SPI4readEv>:
 }

 void* SPI::read() {

    return (void*)NULL;
 }
   80ad4:	2000      	movs	r0, #0
   80ad6:	4770      	bx	lr

00080ad8 <_ZN3SPI4openEPv>:
 #include "ShiftRegisters.h"
 #include "../Reporting.h"

 #include <stdlib.h> // Used for definition of NULL

 int SPI::open( void* data) {
   80ad8:	b538      	push	{r3, r4, r5, lr}
   80ada:	4604      	mov	r4, r0
    SPIParams *params = (SPIParams*)data;
    csPort = params->csPort;
   80adc:	7808      	ldrb	r0, [r1, #0]
    csPin  = params->csPin;
   80ade:	6849      	ldr	r1, [r1, #4]

    // Configure cs pin
    pinSetMode(csPort,   csPin,   OUTPUT);
   80ae0:	4d16      	ldr	r5, [pc, #88]	; (80b3c <_ZN3SPI4openEPv+0x64>)

 #include <stdlib.h> // Used for definition of NULL

 int SPI::open( void* data) {
    SPIParams *params = (SPIParams*)data;
    csPort = params->csPort;
   80ae2:	7120      	strb	r0, [r4, #4]
    csPin  = params->csPin;
   80ae4:	60a1      	str	r1, [r4, #8]

    // Configure cs pin
    pinSetMode(csPort,   csPin,   OUTPUT);
   80ae6:	2201      	movs	r2, #1
   80ae8:	47a8      	blx	r5
    pinDisablePullup(csPort, csPin);
   80aea:	7920      	ldrb	r0, [r4, #4]
   80aec:	68a1      	ldr	r1, [r4, #8]
   80aee:	4b14      	ldr	r3, [pc, #80]	; (80b40 <_ZN3SPI4openEPv+0x68>)
   80af0:	4798      	blx	r3
    pinSetOutput(csPort, csPin, HIGH);
   80af2:	4b14      	ldr	r3, [pc, #80]	; (80b44 <_ZN3SPI4openEPv+0x6c>)
   80af4:	7920      	ldrb	r0, [r4, #4]
   80af6:	68a1      	ldr	r1, [r4, #8]
   80af8:	2201      	movs	r2, #1
   80afa:	4798      	blx	r3

    // Configure SPI peripheral pins
    pinSetMode(misoPort, misoPin, PERIPHERAL_A);
   80afc:	2000      	movs	r0, #0
   80afe:	2119      	movs	r1, #25
   80b00:	2202      	movs	r2, #2
   80b02:	47a8      	blx	r5
    pinSetMode(mosiPort, mosiPin, PERIPHERAL_A);
   80b04:	2000      	movs	r0, #0
   80b06:	211a      	movs	r1, #26
   80b08:	2202      	movs	r2, #2
   80b0a:	47a8      	blx	r5
    pinSetMode(clkPort,  clkPin,  PERIPHERAL_A);
   80b0c:	2000      	movs	r0, #0
   80b0e:	211b      	movs	r1, #27
   80b10:	2202      	movs	r2, #2
   80b12:	47a8      	blx	r5

    // Enable SPI controller
    PMC->PMC_PCER0 = 1<<ID_SPI0;    
   80b14:	4b0c      	ldr	r3, [pc, #48]	; (80b48 <_ZN3SPI4openEPv+0x70>)
   80b16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80b1a:	611a      	str	r2, [r3, #16]
    
    // Disable SPI in SPI controller so we can configure it
    SPI0->SPI_CR = SPI_CR_SPIDIS;
   80b1c:	4b0b      	ldr	r3, [pc, #44]	; (80b4c <_ZN3SPI4openEPv+0x74>)
   80b1e:	2202      	movs	r2, #2
   80b20:	601a      	str	r2, [r3, #0]

    // Mode Register = Master, Disable fault detection, NPCS[3:0] = 
    SPI0->SPI_MR = SPI_MR_MSTR | SPI_MR_MODFDIS | 0x000E0000; 
   80b22:	4a0b      	ldr	r2, [pc, #44]	; (80b50 <_ZN3SPI4openEPv+0x78>)

    // Enable SPI in SPI controller
    SPI0->SPI_CR = SPI_CR_SPIEN;    

    return 0;
 }
   80b24:	2000      	movs	r0, #0
    
    // Disable SPI in SPI controller so we can configure it
    SPI0->SPI_CR = SPI_CR_SPIDIS;

    // Mode Register = Master, Disable fault detection, NPCS[3:0] = 
    SPI0->SPI_MR = SPI_MR_MSTR | SPI_MR_MODFDIS | 0x000E0000; 
   80b26:	605a      	str	r2, [r3, #4]

    // SPCK baudrate = MCK / SCBR = 84 MHz / 40 (0x28) = 2.1Mhz
    SPI0->SPI_CSR[0] |= 0x00002800 | SPI_CSR_NCPHA;
   80b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b2a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
   80b2e:	f042 0202 	orr.w	r2, r2, #2
   80b32:	631a      	str	r2, [r3, #48]	; 0x30

    // Enable SPI in SPI controller
    SPI0->SPI_CR = SPI_CR_SPIEN;    
   80b34:	2201      	movs	r2, #1
   80b36:	601a      	str	r2, [r3, #0]

    return 0;
 }
   80b38:	bd38      	pop	{r3, r4, r5, pc}
   80b3a:	bf00      	nop
   80b3c:	00080255 	.word	0x00080255
   80b40:	000803e1 	.word	0x000803e1
   80b44:	00080429 	.word	0x00080429
   80b48:	400e0600 	.word	0x400e0600
   80b4c:	40008000 	.word	0x40008000
   80b50:	000e0011 	.word	0x000e0011

00080b54 <_ZN3SPI5ioctlEiPv>:

    return (void*)NULL;
 }

 void* SPI::ioctl(int ioctl_t, void *params) {
    if (ioctl_t == SPI_BLOCK_UNTIL_TRANSFERRED) {
   80b54:	b919      	cbnz	r1, 80b5e <_ZN3SPI5ioctlEiPv+0xa>
        while (!(SPI0->SPI_SR & SPI_SR_TXEMPTY)) {};
   80b56:	4b03      	ldr	r3, [pc, #12]	; (80b64 <_ZN3SPI5ioctlEiPv+0x10>)
   80b58:	691b      	ldr	r3, [r3, #16]
   80b5a:	059b      	lsls	r3, r3, #22
   80b5c:	d5fb      	bpl.n	80b56 <_ZN3SPI5ioctlEiPv+0x2>
    }

    return (void*)NULL;
   80b5e:	2000      	movs	r0, #0
   80b60:	4770      	bx	lr
   80b62:	bf00      	nop
   80b64:	40008000 	.word	0x40008000

00080b68 <_ZN3SPI5writeEPv>:
    SPI0->SPI_CR = SPI_CR_SPIDIS;
    PMC->PMC_PCDR0 = 1<<ID_SPI0;
    return 0;
 }

 int SPI::write( void* data) {
   80b68:	b538      	push	{r3, r4, r5, lr}
   80b6a:	4604      	mov	r4, r0
   80b6c:	460d      	mov	r5, r1
    SPIWriteParams *swp = (SPIWriteParams*)data;

    // Wait for previous transfer to complete
    while ((SPI0->SPI_SR & SPI_SR_TXEMPTY) == 0);
   80b6e:	4b0e      	ldr	r3, [pc, #56]	; (80ba8 <_ZN3SPI5writeEPv+0x40>)
   80b70:	691b      	ldr	r3, [r3, #16]
   80b72:	0599      	lsls	r1, r3, #22
   80b74:	d5fb      	bpl.n	80b6e <_ZN3SPI5writeEPv+0x6>

    // Send data
    if (!csOpen) {
   80b76:	68e2      	ldr	r2, [r4, #12]
   80b78:	b92a      	cbnz	r2, 80b86 <_ZN3SPI5writeEPv+0x1e>
        pinSetOutput(csPort, csPin, LOW);
   80b7a:	4b0c      	ldr	r3, [pc, #48]	; (80bac <_ZN3SPI5writeEPv+0x44>)
   80b7c:	7920      	ldrb	r0, [r4, #4]
   80b7e:	68a1      	ldr	r1, [r4, #8]
   80b80:	4798      	blx	r3
        csOpen = 1;
   80b82:	2301      	movs	r3, #1
   80b84:	60e3      	str	r3, [r4, #12]
    }
    SPI0->SPI_TDR = swp->data;
   80b86:	882a      	ldrh	r2, [r5, #0]
   80b88:	4b07      	ldr	r3, [pc, #28]	; (80ba8 <_ZN3SPI5writeEPv+0x40>)
   80b8a:	60da      	str	r2, [r3, #12]

    // Wait til data has been sent
    // (SPI_BLOCK_UNTIL_TRANSFERRED ioctl does the same)
    while (!(SPI0->SPI_SR & SPI_SR_TXEMPTY)) {};
   80b8c:	691a      	ldr	r2, [r3, #16]
   80b8e:	0592      	lsls	r2, r2, #22
   80b90:	d5fc      	bpl.n	80b8c <_ZN3SPI5writeEPv+0x24>
    if (swp->mode == SPI_LAST) {
   80b92:	686d      	ldr	r5, [r5, #4]
   80b94:	b92d      	cbnz	r5, 80ba2 <_ZN3SPI5writeEPv+0x3a>
        pinSetOutput(csPort, csPin, HIGH);
   80b96:	7920      	ldrb	r0, [r4, #4]
   80b98:	68a1      	ldr	r1, [r4, #8]
   80b9a:	2201      	movs	r2, #1
   80b9c:	4b03      	ldr	r3, [pc, #12]	; (80bac <_ZN3SPI5writeEPv+0x44>)
   80b9e:	4798      	blx	r3
        csOpen = 0;
   80ba0:	60e5      	str	r5, [r4, #12]
    }

    // We're out
    return 0;
 }
   80ba2:	2000      	movs	r0, #0
   80ba4:	bd38      	pop	{r3, r4, r5, pc}
   80ba6:	bf00      	nop
   80ba8:	40008000 	.word	0x40008000
   80bac:	00080429 	.word	0x00080429

00080bb0 <_ZN7SSD13055closeEv>:
    return 0;
 }

 int SSD1305::close() {
    return 0;
 }
   80bb0:	2000      	movs	r0, #0
   80bb2:	4770      	bx	lr

00080bb4 <_ZN7SSD13054readEv>:
    return 0;
 }

 void *SSD1305::read() {
    return (void*)0;
 }
   80bb4:	2000      	movs	r0, #0
   80bb6:	4770      	bx	lr

00080bb8 <_ZN7SSD13055ioctlEiPv>:

 void *SSD1305::ioctl(int ioctl_t, void* params) {
    return (void*)0;
   80bb8:	2000      	movs	r0, #0
   80bba:	4770      	bx	lr

00080bbc <_ZN3SPI8InstanceEv>:

    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
   80bbc:	b538      	push	{r3, r4, r5, lr}
        static SPI instance;
   80bbe:	4c09      	ldr	r4, [pc, #36]	; (80be4 <_ZN3SPI8InstanceEv+0x28>)
   80bc0:	6823      	ldr	r3, [r4, #0]
   80bc2:	f013 0501 	ands.w	r5, r3, #1
   80bc6:	d10a      	bne.n	80bde <_ZN3SPI8InstanceEv+0x22>
   80bc8:	4620      	mov	r0, r4
   80bca:	4b07      	ldr	r3, [pc, #28]	; (80be8 <_ZN3SPI8InstanceEv+0x2c>)
   80bcc:	4798      	blx	r3
   80bce:	b130      	cbz	r0, 80bde <_ZN3SPI8InstanceEv+0x22>

    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
   80bd0:	4a06      	ldr	r2, [pc, #24]	; (80bec <_ZN3SPI8InstanceEv+0x30>)
   80bd2:	4b07      	ldr	r3, [pc, #28]	; (80bf0 <_ZN3SPI8InstanceEv+0x34>)
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80bd4:	4620      	mov	r0, r4

    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
   80bd6:	6013      	str	r3, [r2, #0]
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80bd8:	4b06      	ldr	r3, [pc, #24]	; (80bf4 <_ZN3SPI8InstanceEv+0x38>)
    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
        csOpen = 0;
   80bda:	60d5      	str	r5, [r2, #12]
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80bdc:	4798      	blx	r3
        return instance;
    };
   80bde:	4803      	ldr	r0, [pc, #12]	; (80bec <_ZN3SPI8InstanceEv+0x30>)
   80be0:	bd38      	pop	{r3, r4, r5, pc}
   80be2:	bf00      	nop
   80be4:	200002c4 	.word	0x200002c4
   80be8:	00080fe1 	.word	0x00080fe1
   80bec:	200002b4 	.word	0x200002b4
   80bf0:	000822d8 	.word	0x000822d8
   80bf4:	00080ffd 	.word	0x00080ffd

00080bf8 <_ZN7SSD13054openEPv>:

 #include "../Reporting.h"

 #include <stdlib.h>

 int SSD1305::open( void* params) {
   80bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    pinSetMode(dcPort,  dcPin,  OUTPUT);
   80bfc:	4c9c      	ldr	r4, [pc, #624]	; (80e70 <_ZN7SSD13054openEPv+0x278>)
   80bfe:	2002      	movs	r0, #2
   80c00:	211c      	movs	r1, #28
   80c02:	2201      	movs	r2, #1
   80c04:	47a0      	blx	r4
    pinSetMode(resPort, resPin, OUTPUT);
   80c06:	2001      	movs	r0, #1
   80c08:	4602      	mov	r2, r0
   80c0a:	2119      	movs	r1, #25
   80c0c:	47a0      	blx	r4
    pinDisablePullup(dcPort, dcPin);
   80c0e:	4c99      	ldr	r4, [pc, #612]	; (80e74 <_ZN7SSD13054openEPv+0x27c>)
   80c10:	2002      	movs	r0, #2
   80c12:	211c      	movs	r1, #28
   80c14:	47a0      	blx	r4
    pinDisablePullup(resPort, resPin);
   80c16:	2001      	movs	r0, #1
   80c18:	2119      	movs	r1, #25
   80c1a:	47a0      	blx	r4
    pinSetOutput(resPort, resPin, LOW);
   80c1c:	4f96      	ldr	r7, [pc, #600]	; (80e78 <_ZN7SSD13054openEPv+0x280>)
   80c1e:	2200      	movs	r2, #0
   80c20:	2119      	movs	r1, #25
   80c22:	2001      	movs	r0, #1

    SPIParams sp;
    sp.csPort = csPort;
    sp.csPin  = csPin;

    SPI::Instance().open(&sp);
   80c24:	4d95      	ldr	r5, [pc, #596]	; (80e7c <_ZN7SSD13054openEPv+0x284>)
 int SSD1305::open( void* params) {
    pinSetMode(dcPort,  dcPin,  OUTPUT);
    pinSetMode(resPort, resPin, OUTPUT);
    pinDisablePullup(dcPort, dcPin);
    pinDisablePullup(resPort, resPin);
    pinSetOutput(resPort, resPin, LOW);
   80c26:	47b8      	blx	r7


    SPIParams sp;
    sp.csPort = csPort;
   80c28:	f04f 0902 	mov.w	r9, #2
    sp.csPin  = csPin;
   80c2c:	231a      	movs	r3, #26
   80c2e:	9301      	str	r3, [sp, #4]
    pinDisablePullup(resPort, resPin);
    pinSetOutput(resPort, resPin, LOW);


    SPIParams sp;
    sp.csPort = csPort;
   80c30:	f88d 9000 	strb.w	r9, [sp]
    sp.csPin  = csPin;

    SPI::Instance().open(&sp);
   80c34:	47a8      	blx	r5
   80c36:	6803      	ldr	r3, [r0, #0]
   80c38:	4669      	mov	r1, sp
   80c3a:	681b      	ldr	r3, [r3, #0]
   80c3c:	4798      	blx	r3

    pinSetOutput(resPort, resPin, HIGH);
   80c3e:	2001      	movs	r0, #1
   80c40:	4602      	mov	r2, r0
   80c42:	2119      	movs	r1, #25
   80c44:	47b8      	blx	r7
    pinSetOutput(dcPort,  dcPin,  LOW);
   80c46:	2200      	movs	r2, #0
   80c48:	211c      	movs	r1, #28
   80c4a:	4648      	mov	r0, r9
   80c4c:	47b8      	blx	r7

    // Do our initialization
    SPIWriteParams swp;
    swp.mode = SPI_CONTINUE;
    swp.data = 0xAE;
   80c4e:	ac04      	add	r4, sp, #16
   80c50:	23ae      	movs	r3, #174	; 0xae
    pinSetOutput(resPort, resPin, HIGH);
    pinSetOutput(dcPort,  dcPin,  LOW);

    // Do our initialization
    SPIWriteParams swp;
    swp.mode = SPI_CONTINUE;
   80c52:	f04f 0a01 	mov.w	sl, #1
    swp.data = 0xAE;
   80c56:	f824 3d08 	strh.w	r3, [r4, #-8]!
    pinSetOutput(resPort, resPin, HIGH);
    pinSetOutput(dcPort,  dcPin,  LOW);

    // Do our initialization
    SPIWriteParams swp;
    swp.mode = SPI_CONTINUE;
   80c5a:	f8cd a00c 	str.w	sl, [sp, #12]
    swp.data = 0xAE;
    SPI::Instance().write(&swp);
   80c5e:	47a8      	blx	r5
   80c60:	6803      	ldr	r3, [r0, #0]
   80c62:	4621      	mov	r1, r4
   80c64:	689b      	ldr	r3, [r3, #8]
   80c66:	4798      	blx	r3
    swp.data = 0xD5;
   80c68:	23d5      	movs	r3, #213	; 0xd5
   80c6a:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // set display clock divider ratio
   80c6e:	47a8      	blx	r5
   80c70:	6803      	ldr	r3, [r0, #0]
   80c72:	4621      	mov	r1, r4
   80c74:	689b      	ldr	r3, [r3, #8]
   80c76:	4798      	blx	r3
    swp.data = 0xA0;
   80c78:	23a0      	movs	r3, #160	; 0xa0
   80c7a:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);
   80c7e:	47a8      	blx	r5
   80c80:	6803      	ldr	r3, [r0, #0]
   80c82:	4621      	mov	r1, r4
   80c84:	689b      	ldr	r3, [r3, #8]
   80c86:	4798      	blx	r3
    swp.data = 0xA8;
   80c88:	23a8      	movs	r3, #168	; 0xa8
   80c8a:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // set multiplex ratio
   80c8e:	47a8      	blx	r5
   80c90:	6803      	ldr	r3, [r0, #0]
    swp.data = 0x3F;
   80c92:	263f      	movs	r6, #63	; 0x3f
    swp.data = 0xD5;
    SPI::Instance().write(&swp);  // set display clock divider ratio
    swp.data = 0xA0;
    SPI::Instance().write(&swp);
    swp.data = 0xA8;
    SPI::Instance().write(&swp);  // set multiplex ratio
   80c94:	689b      	ldr	r3, [r3, #8]
   80c96:	4621      	mov	r1, r4
   80c98:	4798      	blx	r3
    swp.data = 0x3F;
   80c9a:	f8ad 6008 	strh.w	r6, [sp, #8]
    SPI::Instance().write(&swp);
   80c9e:	47a8      	blx	r5
   80ca0:	6803      	ldr	r3, [r0, #0]
   80ca2:	4621      	mov	r1, r4
   80ca4:	689b      	ldr	r3, [r3, #8]
   80ca6:	4798      	blx	r3
    swp.data = 0xD3;
   80ca8:	23d3      	movs	r3, #211	; 0xd3
   80caa:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // set display offset
   80cae:	47a8      	blx	r5
   80cb0:	6803      	ldr	r3, [r0, #0]
    swp.data = 0x00;
   80cb2:	f04f 0800 	mov.w	r8, #0
    swp.data = 0xA8;
    SPI::Instance().write(&swp);  // set multiplex ratio
    swp.data = 0x3F;
    SPI::Instance().write(&swp);
    swp.data = 0xD3;
    SPI::Instance().write(&swp);  // set display offset
   80cb6:	689b      	ldr	r3, [r3, #8]
   80cb8:	4621      	mov	r1, r4
   80cba:	4798      	blx	r3
    swp.data = 0x00;
   80cbc:	f8ad 8008 	strh.w	r8, [sp, #8]
    SPI::Instance().write(&swp);
   80cc0:	47a8      	blx	r5
   80cc2:	6803      	ldr	r3, [r0, #0]
   80cc4:	4621      	mov	r1, r4
   80cc6:	689b      	ldr	r3, [r3, #8]
   80cc8:	4798      	blx	r3
    swp.data = 0x40;
   80cca:	2340      	movs	r3, #64	; 0x40
   80ccc:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // set display start line
   80cd0:	47a8      	blx	r5
   80cd2:	6803      	ldr	r3, [r0, #0]
   80cd4:	4621      	mov	r1, r4
   80cd6:	689b      	ldr	r3, [r3, #8]
   80cd8:	4798      	blx	r3
    swp.data = 0xAD;
   80cda:	23ad      	movs	r3, #173	; 0xad
   80cdc:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // set master configuration
   80ce0:	47a8      	blx	r5
   80ce2:	6803      	ldr	r3, [r0, #0]
   80ce4:	4621      	mov	r1, r4
   80ce6:	689b      	ldr	r3, [r3, #8]
   80ce8:	4798      	blx	r3
    swp.data = 0x8E;
   80cea:	238e      	movs	r3, #142	; 0x8e
   80cec:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);
   80cf0:	47a8      	blx	r5
   80cf2:	6803      	ldr	r3, [r0, #0]
   80cf4:	4621      	mov	r1, r4
   80cf6:	689b      	ldr	r3, [r3, #8]
   80cf8:	4798      	blx	r3
    swp.data = 0xD8;
   80cfa:	23d8      	movs	r3, #216	; 0xd8
   80cfc:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set area color mode
   80d00:	47a8      	blx	r5
   80d02:	6803      	ldr	r3, [r0, #0]
   80d04:	4621      	mov	r1, r4
   80d06:	689b      	ldr	r3, [r3, #8]
   80d08:	4798      	blx	r3
    swp.data = 0x05;
   80d0a:	2305      	movs	r3, #5
   80d0c:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);
   80d10:	47a8      	blx	r5
   80d12:	6803      	ldr	r3, [r0, #0]
   80d14:	4621      	mov	r1, r4
   80d16:	689b      	ldr	r3, [r3, #8]
   80d18:	4798      	blx	r3
    swp.data = 0xA1;
   80d1a:	23a1      	movs	r3, #161	; 0xa1
   80d1c:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set segment re-map
   80d20:	47a8      	blx	r5
   80d22:	6803      	ldr	r3, [r0, #0]
   80d24:	4621      	mov	r1, r4
   80d26:	689b      	ldr	r3, [r3, #8]
   80d28:	4798      	blx	r3
    swp.data = 0xC8;
   80d2a:	23c8      	movs	r3, #200	; 0xc8
   80d2c:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set com output scan direction
   80d30:	47a8      	blx	r5
   80d32:	6803      	ldr	r3, [r0, #0]
   80d34:	4621      	mov	r1, r4
   80d36:	689b      	ldr	r3, [r3, #8]
   80d38:	4798      	blx	r3
    swp.data = 0xDA;
   80d3a:	23da      	movs	r3, #218	; 0xda
   80d3c:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set com pins hardware configuration
   80d40:	47a8      	blx	r5
   80d42:	6803      	ldr	r3, [r0, #0]
   80d44:	4621      	mov	r1, r4
   80d46:	689b      	ldr	r3, [r3, #8]
   80d48:	4798      	blx	r3
    swp.data = 0x12;
   80d4a:	2312      	movs	r3, #18
   80d4c:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);
   80d50:	47a8      	blx	r5
   80d52:	6803      	ldr	r3, [r0, #0]
   80d54:	4621      	mov	r1, r4
   80d56:	689b      	ldr	r3, [r3, #8]
   80d58:	4798      	blx	r3
    swp.data = 0x91;
   80d5a:	2391      	movs	r3, #145	; 0x91
   80d5c:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set lookup table
   80d60:	47a8      	blx	r5
   80d62:	6803      	ldr	r3, [r0, #0]
   80d64:	4621      	mov	r1, r4
   80d66:	689b      	ldr	r3, [r3, #8]
   80d68:	4798      	blx	r3
    swp.data = 0x3F;
   80d6a:	f8ad 6008 	strh.w	r6, [sp, #8]
    SPI::Instance().write(&swp);
   80d6e:	47a8      	blx	r5
   80d70:	6803      	ldr	r3, [r0, #0]
   80d72:	4621      	mov	r1, r4
   80d74:	689b      	ldr	r3, [r3, #8]
   80d76:	4798      	blx	r3
    swp.data = 0x3F;
   80d78:	f8ad 6008 	strh.w	r6, [sp, #8]
    SPI::Instance().write(&swp);
   80d7c:	47a8      	blx	r5
   80d7e:	6803      	ldr	r3, [r0, #0]
   80d80:	4621      	mov	r1, r4
   80d82:	689b      	ldr	r3, [r3, #8]
   80d84:	4798      	blx	r3
    swp.data = 0x3F;
   80d86:	f8ad 6008 	strh.w	r6, [sp, #8]
    SPI::Instance().write(&swp);
   80d8a:	47a8      	blx	r5
   80d8c:	6803      	ldr	r3, [r0, #0]
   80d8e:	4621      	mov	r1, r4
   80d90:	689b      	ldr	r3, [r3, #8]
   80d92:	4798      	blx	r3
    swp.data = 0x3F;
   80d94:	f8ad 6008 	strh.w	r6, [sp, #8]
    SPI::Instance().write(&swp);
   80d98:	47a8      	blx	r5
   80d9a:	6803      	ldr	r3, [r0, #0]
   80d9c:	4621      	mov	r1, r4
   80d9e:	689b      	ldr	r3, [r3, #8]
   80da0:	4798      	blx	r3
    swp.data = 0x81;
   80da2:	2381      	movs	r3, #129	; 0x81
   80da4:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set current control for bank 0
   80da8:	47a8      	blx	r5
   80daa:	6803      	ldr	r3, [r0, #0]
   80dac:	4621      	mov	r1, r4
   80dae:	689b      	ldr	r3, [r3, #8]
   80db0:	4798      	blx	r3
    swp.data = 0x8F;
   80db2:	238f      	movs	r3, #143	; 0x8f
   80db4:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);
   80db8:	47a8      	blx	r5
   80dba:	6803      	ldr	r3, [r0, #0]
   80dbc:	4621      	mov	r1, r4
   80dbe:	689b      	ldr	r3, [r3, #8]
   80dc0:	4798      	blx	r3
    swp.data = 0xD9;
   80dc2:	23d9      	movs	r3, #217	; 0xd9
   80dc4:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set pre-charge period
   80dc8:	47a8      	blx	r5
   80dca:	6803      	ldr	r3, [r0, #0]
   80dcc:	4621      	mov	r1, r4
   80dce:	689b      	ldr	r3, [r3, #8]
   80dd0:	4798      	blx	r3
    swp.data = 0xD2;
   80dd2:	23d2      	movs	r3, #210	; 0xd2
   80dd4:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);
   80dd8:	47a8      	blx	r5
   80dda:	6803      	ldr	r3, [r0, #0]
   80ddc:	4621      	mov	r1, r4
   80dde:	689b      	ldr	r3, [r3, #8]
   80de0:	4798      	blx	r3
    swp.data = 0xDB;
   80de2:	23db      	movs	r3, #219	; 0xdb
   80de4:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set vcomh deselect level
   80de8:	47a8      	blx	r5
   80dea:	6803      	ldr	r3, [r0, #0]
   80dec:	4621      	mov	r1, r4
   80dee:	689b      	ldr	r3, [r3, #8]
   80df0:	4798      	blx	r3
    swp.data = 0x34;
   80df2:	2334      	movs	r3, #52	; 0x34
   80df4:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);
   80df8:	47a8      	blx	r5
   80dfa:	6803      	ldr	r3, [r0, #0]
   80dfc:	4621      	mov	r1, r4
   80dfe:	689b      	ldr	r3, [r3, #8]
   80e00:	4798      	blx	r3
    swp.data = 0xA4;
   80e02:	23a4      	movs	r3, #164	; 0xa4
   80e04:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Set entire display on/off
   80e08:	47a8      	blx	r5
   80e0a:	6803      	ldr	r3, [r0, #0]
   80e0c:	4621      	mov	r1, r4
   80e0e:	689b      	ldr	r3, [r3, #8]
   80e10:	4798      	blx	r3
    swp.data = 0xA6;
   80e12:	23a6      	movs	r3, #166	; 0xa6
   80e14:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // set normal/inverse display
   80e18:	47a8      	blx	r5
   80e1a:	6803      	ldr	r3, [r0, #0]
   80e1c:	4621      	mov	r1, r4
   80e1e:	689b      	ldr	r3, [r3, #8]
   80e20:	4798      	blx	r3
    swp.data = 0x20;
   80e22:	2320      	movs	r3, #32
   80e24:	f8ad 3008 	strh.w	r3, [sp, #8]
    SPI::Instance().write(&swp);  // Page mode
   80e28:	47a8      	blx	r5
   80e2a:	6803      	ldr	r3, [r0, #0]
   80e2c:	4621      	mov	r1, r4
   80e2e:	689b      	ldr	r3, [r3, #8]
   80e30:	4798      	blx	r3
    swp.data = 0X00;
   80e32:	f8ad 8008 	strh.w	r8, [sp, #8]
    SPI::Instance().write(&swp);
   80e36:	47a8      	blx	r5
   80e38:	6803      	ldr	r3, [r0, #0]
   80e3a:	4621      	mov	r1, r4
   80e3c:	689b      	ldr	r3, [r3, #8]
   80e3e:	4798      	blx	r3
    
    SPI::Instance().ioctl(SPI_BLOCK_UNTIL_TRANSFERRED, NULL);
   80e40:	47a8      	blx	r5
   80e42:	6803      	ldr	r3, [r0, #0]
   80e44:	4641      	mov	r1, r8
   80e46:	4642      	mov	r2, r8
   80e48:	691b      	ldr	r3, [r3, #16]
   80e4a:	4798      	blx	r3
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);
   80e4c:	4648      	mov	r0, r9
   80e4e:	211c      	movs	r1, #28
   80e50:	4652      	mov	r2, sl
   80e52:	47b8      	blx	r7

    // Transfer 0 for every buffer
    swp.data = 0x00;
   80e54:	f44f 6684 	mov.w	r6, #1056	; 0x420
   80e58:	f8ad 8008 	strh.w	r8, [sp, #8]
   80e5c:	46a8      	mov	r8, r5
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
        SPI::Instance().write(&swp);
   80e5e:	47c0      	blx	r8
   80e60:	6803      	ldr	r3, [r0, #0]
   80e62:	4621      	mov	r1, r4
   80e64:	689b      	ldr	r3, [r3, #8]
   80e66:	4798      	blx	r3
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);

    // Transfer 0 for every buffer
    swp.data = 0x00;
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
   80e68:	3e01      	subs	r6, #1
        SPI::Instance().write(&swp);
   80e6a:	4d04      	ldr	r5, [pc, #16]	; (80e7c <_ZN7SSD13054openEPv+0x284>)
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);

    // Transfer 0 for every buffer
    swp.data = 0x00;
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
   80e6c:	d1f7      	bne.n	80e5e <_ZN7SSD13054openEPv+0x266>
   80e6e:	e007      	b.n	80e80 <_ZN7SSD13054openEPv+0x288>
   80e70:	00080255 	.word	0x00080255
   80e74:	000803e1 	.word	0x000803e1
   80e78:	00080429 	.word	0x00080429
   80e7c:	00080bbd 	.word	0x00080bbd
        SPI::Instance().write(&swp);
    }

    SPI::Instance().ioctl(SPI_BLOCK_UNTIL_TRANSFERRED, NULL);
   80e80:	47a8      	blx	r5
   80e82:	6803      	ldr	r3, [r0, #0]
   80e84:	4631      	mov	r1, r6
   80e86:	691b      	ldr	r3, [r3, #16]
   80e88:	4632      	mov	r2, r6
   80e8a:	4798      	blx	r3
    pinSetOutput(dcPort, dcPin, LOW);
   80e8c:	4632      	mov	r2, r6
   80e8e:	211c      	movs	r1, #28
   80e90:	2002      	movs	r0, #2
   80e92:	47b8      	blx	r7

    swp.data = 0xAF;
   80e94:	23af      	movs	r3, #175	; 0xaf
   80e96:	f8ad 3008 	strh.w	r3, [sp, #8]
    swp.mode = SPI_LAST;
   80e9a:	9603      	str	r6, [sp, #12]
    SPI::Instance().write(&swp);
   80e9c:	47a8      	blx	r5
   80e9e:	6803      	ldr	r3, [r0, #0]
   80ea0:	4621      	mov	r1, r4
   80ea2:	689b      	ldr	r3, [r3, #8]
   80ea4:	4798      	blx	r3

    return 0;
 }
   80ea6:	4630      	mov	r0, r6
   80ea8:	b004      	add	sp, #16
   80eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80eae:	bf00      	nop

00080eb0 <_ZN7SSD13055writeEPv>:

 int SSD1305::close() {
    return 0;
 }

 int SSD1305::write( void* params) {
   80eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
   80eb2:	4b1f      	ldr	r3, [pc, #124]	; (80f30 <_ZN7SSD13055writeEPv+0x80>)

 int SSD1305::close() {
    return 0;
 }

 int SSD1305::write( void* params) {
   80eb4:	460f      	mov	r7, r1
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
   80eb6:	2002      	movs	r0, #2
   80eb8:	211c      	movs	r1, #28
   80eba:	2201      	movs	r2, #1
   80ebc:	4798      	blx	r3
    SPIWriteParams swp;
    
    // transfer color data (we don't use this)
    swp.data = 0x00;
   80ebe:	2300      	movs	r3, #0
   80ec0:	f8ad 3000 	strh.w	r3, [sp]
    swp.mode = SPI_CONTINUE;
   80ec4:	2301      	movs	r3, #1
   80ec6:	9301      	str	r3, [sp, #4]
   80ec8:	f44f 7405 	mov.w	r4, #532	; 0x214
    for (int i = 0; i < ssdp->junk_buffer; i++) {
        SPI::Instance().write(&swp);
   80ecc:	4e19      	ldr	r6, [pc, #100]	; (80f34 <_ZN7SSD13055writeEPv+0x84>)
   80ece:	47b0      	blx	r6
   80ed0:	6803      	ldr	r3, [r0, #0]
   80ed2:	4669      	mov	r1, sp
   80ed4:	689b      	ldr	r3, [r3, #8]
   80ed6:	4798      	blx	r3
    SPIWriteParams swp;
    
    // transfer color data (we don't use this)
    swp.data = 0x00;
    swp.mode = SPI_CONTINUE;
    for (int i = 0; i < ssdp->junk_buffer; i++) {
   80ed8:	3c01      	subs	r4, #1
   80eda:	d1f7      	bne.n	80ecc <_ZN7SSD13055writeEPv+0x1c>
        SPI::Instance().write(&swp);
    }

    for (int i = 0; i < ssdp->visible_buffers; i++) {
        swp.data = ssdp->buffer[i];
   80edc:	5d3b      	ldrb	r3, [r7, r4]
   80ede:	f8ad 3000 	strh.w	r3, [sp]
        if (i == ssdp->visible_buffers - 1)
   80ee2:	f240 13ff 	movw	r3, #511	; 0x1ff
   80ee6:	429c      	cmp	r4, r3
            swp.mode = SPI_LAST;
   80ee8:	bf04      	itt	eq
   80eea:	2300      	moveq	r3, #0
   80eec:	9301      	streq	r3, [sp, #4]
        SPI::Instance().write(&swp);
   80eee:	47b0      	blx	r6
   80ef0:	6803      	ldr	r3, [r0, #0]
   80ef2:	4669      	mov	r1, sp
   80ef4:	689b      	ldr	r3, [r3, #8]
   80ef6:	4798      	blx	r3

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
   80ef8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
   80efc:	2b7f      	cmp	r3, #127	; 0x7f
   80efe:	d006      	beq.n	80f0e <_ZN7SSD13055writeEPv+0x5e>
    swp.mode = SPI_CONTINUE;
    for (int i = 0; i < ssdp->junk_buffer; i++) {
        SPI::Instance().write(&swp);
    }

    for (int i = 0; i < ssdp->visible_buffers; i++) {
   80f00:	3401      	adds	r4, #1
   80f02:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   80f06:	d1e9      	bne.n	80edc <_ZN7SSD13055writeEPv+0x2c>
            }
        }
    }

    return 0;
 }
   80f08:	2000      	movs	r0, #0
   80f0a:	b003      	add	sp, #12
   80f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        swp.data = ssdp->buffer[i];
        if (i == ssdp->visible_buffers - 1)
            swp.mode = SPI_LAST;
        SPI::Instance().write(&swp);

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
   80f0e:	f240 13ff 	movw	r3, #511	; 0x1ff
   80f12:	429c      	cmp	r4, r3
   80f14:	d0f4      	beq.n	80f00 <_ZN7SSD13055writeEPv+0x50>
   80f16:	2504      	movs	r5, #4
            for (int j = 0; j < ssdp->blank; j++) {
                swp.data = 255;
   80f18:	23ff      	movs	r3, #255	; 0xff
   80f1a:	f8ad 3000 	strh.w	r3, [sp]
                SPI::Instance().write(&swp);
   80f1e:	47b0      	blx	r6
   80f20:	6803      	ldr	r3, [r0, #0]
   80f22:	4669      	mov	r1, sp
   80f24:	689b      	ldr	r3, [r3, #8]
   80f26:	4798      	blx	r3
        if (i == ssdp->visible_buffers - 1)
            swp.mode = SPI_LAST;
        SPI::Instance().write(&swp);

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
            for (int j = 0; j < ssdp->blank; j++) {
   80f28:	3d01      	subs	r5, #1
   80f2a:	d1f5      	bne.n	80f18 <_ZN7SSD13055writeEPv+0x68>
   80f2c:	e7e8      	b.n	80f00 <_ZN7SSD13055writeEPv+0x50>
   80f2e:	bf00      	nop
   80f30:	00080429 	.word	0x00080429
   80f34:	00080bbd 	.word	0x00080bbd

00080f38 <_ZN8Encoders8InstanceEv>:
    // Define as a singleton
    Encoders() {};
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
   80f38:	b510      	push	{r4, lr}
    {
        static Encoders instance;
   80f3a:	4c08      	ldr	r4, [pc, #32]	; (80f5c <_ZN8Encoders8InstanceEv+0x24>)
   80f3c:	6823      	ldr	r3, [r4, #0]
   80f3e:	07db      	lsls	r3, r3, #31
   80f40:	d409      	bmi.n	80f56 <_ZN8Encoders8InstanceEv+0x1e>
   80f42:	4620      	mov	r0, r4
   80f44:	4b06      	ldr	r3, [pc, #24]	; (80f60 <_ZN8Encoders8InstanceEv+0x28>)
   80f46:	4798      	blx	r3
   80f48:	b128      	cbz	r0, 80f56 <_ZN8Encoders8InstanceEv+0x1e>
    EncodersStatus readStatus;
    volatile uint8_t states[4];
    //volatile EncoderState *states[4];

    // Define as a singleton
    Encoders() {};
   80f4a:	4b06      	ldr	r3, [pc, #24]	; (80f64 <_ZN8Encoders8InstanceEv+0x2c>)
   80f4c:	4a06      	ldr	r2, [pc, #24]	; (80f68 <_ZN8Encoders8InstanceEv+0x30>)
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   80f4e:	4620      	mov	r0, r4
    EncodersStatus readStatus;
    volatile uint8_t states[4];
    //volatile EncoderState *states[4];

    // Define as a singleton
    Encoders() {};
   80f50:	601a      	str	r2, [r3, #0]
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   80f52:	4b06      	ldr	r3, [pc, #24]	; (80f6c <_ZN8Encoders8InstanceEv+0x34>)
   80f54:	4798      	blx	r3
        return instance;
    }
   80f56:	4803      	ldr	r0, [pc, #12]	; (80f64 <_ZN8Encoders8InstanceEv+0x2c>)
   80f58:	bd10      	pop	{r4, pc}
   80f5a:	bf00      	nop
   80f5c:	200002b0 	.word	0x200002b0
   80f60:	00080fe1 	.word	0x00080fe1
   80f64:	20000298 	.word	0x20000298
   80f68:	000822a0 	.word	0x000822a0
   80f6c:	00080ffd 	.word	0x00080ffd

00080f70 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80f70:	b530      	push	{r4, r5, lr}
    /* Initialize the SAM system */
    SystemInit();
   80f72:	4b14      	ldr	r3, [pc, #80]	; (80fc4 <main+0x54>)
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80f74:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    /* Initialize the SAM system */
    SystemInit();
   80f78:	4798      	blx	r3

    //Reporting::Instance().reportCode(PRIORITY_DEBUG, LIGHTS, 0xDEADBEEF);

    Display disp = Display();
    volatile int x = 0;
   80f7a:	2500      	movs	r5, #0
    /* Initialize the SAM system */
    SystemInit();

    //Reporting::Instance().reportCode(PRIORITY_DEBUG, LIGHTS, 0xDEADBEEF);

    Display disp = Display();
   80f7c:	4b12      	ldr	r3, [pc, #72]	; (80fc8 <main+0x58>)
   80f7e:	a804      	add	r0, sp, #16
    volatile int x = 0;
    Encoders::Instance().open(NULL);
   80f80:	4c12      	ldr	r4, [pc, #72]	; (80fcc <main+0x5c>)
    /* Initialize the SAM system */
    SystemInit();

    //Reporting::Instance().reportCode(PRIORITY_DEBUG, LIGHTS, 0xDEADBEEF);

    Display disp = Display();
   80f82:	4798      	blx	r3
    volatile int x = 0;
   80f84:	9503      	str	r5, [sp, #12]
    Encoders::Instance().open(NULL);
   80f86:	47a0      	blx	r4
   80f88:	6803      	ldr	r3, [r0, #0]
   80f8a:	4629      	mov	r1, r5
   80f8c:	681b      	ldr	r3, [r3, #0]
   80f8e:	4798      	blx	r3
    while (1) 
    {
        EncodersStatus *eStat = (EncodersStatus*)Encoders::Instance().read();
   80f90:	47a0      	blx	r4
   80f92:	6803      	ldr	r3, [r0, #0]
        x += eStat->relative_position[0];

        disp.drawText(x, 0, SMALL_FONT, "hello\nworld!");
   80f94:	4d0e      	ldr	r5, [pc, #56]	; (80fd0 <main+0x60>)
    Display disp = Display();
    volatile int x = 0;
    Encoders::Instance().open(NULL);
    while (1) 
    {
        EncodersStatus *eStat = (EncodersStatus*)Encoders::Instance().read();
   80f96:	68db      	ldr	r3, [r3, #12]
   80f98:	4798      	blx	r3
        x += eStat->relative_position[0];
   80f9a:	9b03      	ldr	r3, [sp, #12]
   80f9c:	f9b0 2000 	ldrsh.w	r2, [r0]

        disp.drawText(x, 0, SMALL_FONT, "hello\nworld!");
   80fa0:	a804      	add	r0, sp, #16
    volatile int x = 0;
    Encoders::Instance().open(NULL);
    while (1) 
    {
        EncodersStatus *eStat = (EncodersStatus*)Encoders::Instance().read();
        x += eStat->relative_position[0];
   80fa2:	4413      	add	r3, r2
   80fa4:	9303      	str	r3, [sp, #12]

        disp.drawText(x, 0, SMALL_FONT, "hello\nworld!");
   80fa6:	9903      	ldr	r1, [sp, #12]
   80fa8:	4b0a      	ldr	r3, [pc, #40]	; (80fd4 <main+0x64>)
   80faa:	2200      	movs	r2, #0
   80fac:	9300      	str	r3, [sp, #0]
   80fae:	b2c9      	uxtb	r1, r1
   80fb0:	4613      	mov	r3, r2
   80fb2:	47a8      	blx	r5
        disp.paint();
   80fb4:	a804      	add	r0, sp, #16
   80fb6:	4b08      	ldr	r3, [pc, #32]	; (80fd8 <main+0x68>)
   80fb8:	4798      	blx	r3
        disp.clear();
   80fba:	a804      	add	r0, sp, #16
   80fbc:	4b07      	ldr	r3, [pc, #28]	; (80fdc <main+0x6c>)
   80fbe:	4798      	blx	r3
   80fc0:	e7e6      	b.n	80f90 <main+0x20>
   80fc2:	bf00      	nop
   80fc4:	000801bd 	.word	0x000801bd
   80fc8:	000806c1 	.word	0x000806c1
   80fcc:	00080f39 	.word	0x00080f39
   80fd0:	00080715 	.word	0x00080715
   80fd4:	00082310 	.word	0x00082310
   80fd8:	0008080d 	.word	0x0008080d
   80fdc:	000807fd 	.word	0x000807fd

00080fe0 <__cxa_guard_acquire>:
   80fe0:	b508      	push	{r3, lr}
   80fe2:	6803      	ldr	r3, [r0, #0]
   80fe4:	07db      	lsls	r3, r3, #31
   80fe6:	d407      	bmi.n	80ff8 <__cxa_guard_acquire+0x18>
   80fe8:	7843      	ldrb	r3, [r0, #1]
   80fea:	b10b      	cbz	r3, 80ff0 <__cxa_guard_acquire+0x10>
   80fec:	f000 ff32 	bl	81e54 <abort>
   80ff0:	2301      	movs	r3, #1
   80ff2:	7043      	strb	r3, [r0, #1]
   80ff4:	4618      	mov	r0, r3
   80ff6:	bd08      	pop	{r3, pc}
   80ff8:	2000      	movs	r0, #0
   80ffa:	bd08      	pop	{r3, pc}

00080ffc <__cxa_guard_release>:
   80ffc:	2301      	movs	r3, #1
   80ffe:	6003      	str	r3, [r0, #0]
   81000:	4770      	bx	lr
   81002:	0000      	movs	r0, r0
   81004:	0000      	movs	r0, r0
	...

00081008 <log2>:
   81008:	b508      	push	{r3, lr}
   8100a:	f000 f80d 	bl	81028 <log>
   8100e:	a304      	add	r3, pc, #16	; (adr r3, 81020 <log2+0x18>)
   81010:	e9d3 2300 	ldrd	r2, r3, [r3]
   81014:	f000 fd86 	bl	81b24 <__aeabi_ddiv>
   81018:	bd08      	pop	{r3, pc}
   8101a:	bf00      	nop
   8101c:	f3af 8000 	nop.w
   81020:	fefa39ef 	.word	0xfefa39ef
   81024:	3fe62e42 	.word	0x3fe62e42

00081028 <log>:
   81028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8102c:	b08a      	sub	sp, #40	; 0x28
   8102e:	4604      	mov	r4, r0
   81030:	460d      	mov	r5, r1
   81032:	f000 f86d 	bl	81110 <__ieee754_log>
   81036:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81108 <log+0xe0>
   8103a:	4606      	mov	r6, r0
   8103c:	f998 3000 	ldrsb.w	r3, [r8]
   81040:	460f      	mov	r7, r1
   81042:	3301      	adds	r3, #1
   81044:	d00b      	beq.n	8105e <log+0x36>
   81046:	4620      	mov	r0, r4
   81048:	4629      	mov	r1, r5
   8104a:	f000 fa59 	bl	81500 <__fpclassifyd>
   8104e:	b130      	cbz	r0, 8105e <log+0x36>
   81050:	4620      	mov	r0, r4
   81052:	4629      	mov	r1, r5
   81054:	2200      	movs	r2, #0
   81056:	2300      	movs	r3, #0
   81058:	f000 feca 	bl	81df0 <__aeabi_dcmpgt>
   8105c:	b120      	cbz	r0, 81068 <log+0x40>
   8105e:	4630      	mov	r0, r6
   81060:	4639      	mov	r1, r7
   81062:	b00a      	add	sp, #40	; 0x28
   81064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81068:	4b23      	ldr	r3, [pc, #140]	; (810f8 <log+0xd0>)
   8106a:	f898 6000 	ldrb.w	r6, [r8]
   8106e:	9008      	str	r0, [sp, #32]
   81070:	e9cd 4502 	strd	r4, r5, [sp, #8]
   81074:	e9cd 4504 	strd	r4, r5, [sp, #16]
   81078:	9301      	str	r3, [sp, #4]
   8107a:	bb46      	cbnz	r6, 810ce <log+0xa6>
   8107c:	4b1f      	ldr	r3, [pc, #124]	; (810fc <log+0xd4>)
   8107e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   81082:	e9cd 2306 	strd	r2, r3, [sp, #24]
   81086:	4620      	mov	r0, r4
   81088:	4629      	mov	r1, r5
   8108a:	2200      	movs	r2, #0
   8108c:	2300      	movs	r3, #0
   8108e:	f000 fe87 	bl	81da0 <__aeabi_dcmpeq>
   81092:	b170      	cbz	r0, 810b2 <log+0x8a>
   81094:	2302      	movs	r3, #2
   81096:	429e      	cmp	r6, r3
   81098:	9300      	str	r3, [sp, #0]
   8109a:	d022      	beq.n	810e2 <log+0xba>
   8109c:	4668      	mov	r0, sp
   8109e:	f000 fa57 	bl	81550 <matherr>
   810a2:	b1f0      	cbz	r0, 810e2 <log+0xba>
   810a4:	9b08      	ldr	r3, [sp, #32]
   810a6:	bb0b      	cbnz	r3, 810ec <log+0xc4>
   810a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   810ac:	b00a      	add	sp, #40	; 0x28
   810ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810b2:	2301      	movs	r3, #1
   810b4:	2e02      	cmp	r6, #2
   810b6:	9300      	str	r3, [sp, #0]
   810b8:	d00e      	beq.n	810d8 <log+0xb0>
   810ba:	4668      	mov	r0, sp
   810bc:	f000 fa48 	bl	81550 <matherr>
   810c0:	b150      	cbz	r0, 810d8 <log+0xb0>
   810c2:	480f      	ldr	r0, [pc, #60]	; (81100 <log+0xd8>)
   810c4:	f000 fa46 	bl	81554 <nan>
   810c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   810cc:	e7ea      	b.n	810a4 <log+0x7c>
   810ce:	4b0d      	ldr	r3, [pc, #52]	; (81104 <log+0xdc>)
   810d0:	2200      	movs	r2, #0
   810d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   810d6:	e7d6      	b.n	81086 <log+0x5e>
   810d8:	f000 fec4 	bl	81e64 <__errno>
   810dc:	2321      	movs	r3, #33	; 0x21
   810de:	6003      	str	r3, [r0, #0]
   810e0:	e7ef      	b.n	810c2 <log+0x9a>
   810e2:	f000 febf 	bl	81e64 <__errno>
   810e6:	2322      	movs	r3, #34	; 0x22
   810e8:	6003      	str	r3, [r0, #0]
   810ea:	e7db      	b.n	810a4 <log+0x7c>
   810ec:	f000 feba 	bl	81e64 <__errno>
   810f0:	9b08      	ldr	r3, [sp, #32]
   810f2:	6003      	str	r3, [r0, #0]
   810f4:	e7d8      	b.n	810a8 <log+0x80>
   810f6:	bf00      	nop
   810f8:	00082320 	.word	0x00082320
   810fc:	c7efffff 	.word	0xc7efffff
   81100:	00082324 	.word	0x00082324
   81104:	fff00000 	.word	0xfff00000
   81108:	20000004 	.word	0x20000004
   8110c:	00000000 	.word	0x00000000

00081110 <__ieee754_log>:
   81110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81114:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81118:	b087      	sub	sp, #28
   8111a:	4602      	mov	r2, r0
   8111c:	460b      	mov	r3, r1
   8111e:	460f      	mov	r7, r1
   81120:	da5b      	bge.n	811da <__ieee754_log+0xca>
   81122:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   81126:	4306      	orrs	r6, r0
   81128:	f000 80f5 	beq.w	81316 <__ieee754_log+0x206>
   8112c:	2900      	cmp	r1, #0
   8112e:	f2c0 81a4 	blt.w	8147a <__ieee754_log+0x36a>
   81132:	2200      	movs	r2, #0
   81134:	4bb2      	ldr	r3, [pc, #712]	; (81400 <__ieee754_log+0x2f0>)
   81136:	f000 fbcb 	bl	818d0 <__aeabi_dmul>
   8113a:	460f      	mov	r7, r1
   8113c:	460b      	mov	r3, r1
   8113e:	49b1      	ldr	r1, [pc, #708]	; (81404 <__ieee754_log+0x2f4>)
   81140:	4602      	mov	r2, r0
   81142:	428f      	cmp	r7, r1
   81144:	f06f 0535 	mvn.w	r5, #53	; 0x35
   81148:	dc4b      	bgt.n	811e2 <__ieee754_log+0xd2>
   8114a:	f3c7 0613 	ubfx	r6, r7, #0, #20
   8114e:	f506 2115 	add.w	r1, r6, #610304	; 0x95000
   81152:	f601 7164 	addw	r1, r1, #3940	; 0xf64
   81156:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
   8115a:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
   8115e:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
   81162:	ea41 0306 	orr.w	r3, r1, r6
   81166:	4610      	mov	r0, r2
   81168:	4619      	mov	r1, r3
   8116a:	2200      	movs	r2, #0
   8116c:	4ba6      	ldr	r3, [pc, #664]	; (81408 <__ieee754_log+0x2f8>)
   8116e:	f000 f9fb 	bl	81568 <__aeabi_dsub>
   81172:	ea4f 5827 	mov.w	r8, r7, asr #20
   81176:	1cb3      	adds	r3, r6, #2
   81178:	f2a8 38ff 	subw	r8, r8, #1023	; 0x3ff
   8117c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   81180:	44a8      	add	r8, r5
   81182:	2b02      	cmp	r3, #2
   81184:	eb08 5814 	add.w	r8, r8, r4, lsr #20
   81188:	4682      	mov	sl, r0
   8118a:	468b      	mov	fp, r1
   8118c:	f04f 0200 	mov.w	r2, #0
   81190:	dc2e      	bgt.n	811f0 <__ieee754_log+0xe0>
   81192:	2300      	movs	r3, #0
   81194:	f000 fe04 	bl	81da0 <__aeabi_dcmpeq>
   81198:	2800      	cmp	r0, #0
   8119a:	f000 80c5 	beq.w	81328 <__ieee754_log+0x218>
   8119e:	f1b8 0f00 	cmp.w	r8, #0
   811a2:	f000 8171 	beq.w	81488 <__ieee754_log+0x378>
   811a6:	4640      	mov	r0, r8
   811a8:	f000 fb2c 	bl	81804 <__aeabi_i2d>
   811ac:	a380      	add	r3, pc, #512	; (adr r3, 813b0 <__ieee754_log+0x2a0>)
   811ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   811b2:	4606      	mov	r6, r0
   811b4:	460f      	mov	r7, r1
   811b6:	f000 fb8b 	bl	818d0 <__aeabi_dmul>
   811ba:	a37f      	add	r3, pc, #508	; (adr r3, 813b8 <__ieee754_log+0x2a8>)
   811bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   811c0:	4604      	mov	r4, r0
   811c2:	460d      	mov	r5, r1
   811c4:	4630      	mov	r0, r6
   811c6:	4639      	mov	r1, r7
   811c8:	f000 fb82 	bl	818d0 <__aeabi_dmul>
   811cc:	4602      	mov	r2, r0
   811ce:	460b      	mov	r3, r1
   811d0:	4620      	mov	r0, r4
   811d2:	4629      	mov	r1, r5
   811d4:	f000 f9ca 	bl	8156c <__adddf3>
   811d8:	e007      	b.n	811ea <__ieee754_log+0xda>
   811da:	498a      	ldr	r1, [pc, #552]	; (81404 <__ieee754_log+0x2f4>)
   811dc:	2500      	movs	r5, #0
   811de:	428f      	cmp	r7, r1
   811e0:	ddb3      	ble.n	8114a <__ieee754_log+0x3a>
   811e2:	4610      	mov	r0, r2
   811e4:	4619      	mov	r1, r3
   811e6:	f000 f9c1 	bl	8156c <__adddf3>
   811ea:	b007      	add	sp, #28
   811ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   811f4:	f000 f9ba 	bl	8156c <__adddf3>
   811f8:	4602      	mov	r2, r0
   811fa:	460b      	mov	r3, r1
   811fc:	4650      	mov	r0, sl
   811fe:	4659      	mov	r1, fp
   81200:	f000 fc90 	bl	81b24 <__aeabi_ddiv>
   81204:	e9cd 0102 	strd	r0, r1, [sp, #8]
   81208:	4640      	mov	r0, r8
   8120a:	f000 fafb 	bl	81804 <__aeabi_i2d>
   8120e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   81212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   81216:	4602      	mov	r2, r0
   81218:	460b      	mov	r3, r1
   8121a:	f000 fb59 	bl	818d0 <__aeabi_dmul>
   8121e:	4602      	mov	r2, r0
   81220:	460b      	mov	r3, r1
   81222:	e9cd 0100 	strd	r0, r1, [sp]
   81226:	f000 fb53 	bl	818d0 <__aeabi_dmul>
   8122a:	a365      	add	r3, pc, #404	; (adr r3, 813c0 <__ieee754_log+0x2b0>)
   8122c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81230:	4604      	mov	r4, r0
   81232:	460d      	mov	r5, r1
   81234:	f000 fb4c 	bl	818d0 <__aeabi_dmul>
   81238:	a363      	add	r3, pc, #396	; (adr r3, 813c8 <__ieee754_log+0x2b8>)
   8123a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8123e:	f000 f995 	bl	8156c <__adddf3>
   81242:	4622      	mov	r2, r4
   81244:	462b      	mov	r3, r5
   81246:	f000 fb43 	bl	818d0 <__aeabi_dmul>
   8124a:	a361      	add	r3, pc, #388	; (adr r3, 813d0 <__ieee754_log+0x2c0>)
   8124c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81250:	f000 f98c 	bl	8156c <__adddf3>
   81254:	4622      	mov	r2, r4
   81256:	462b      	mov	r3, r5
   81258:	f000 fb3a 	bl	818d0 <__aeabi_dmul>
   8125c:	a35e      	add	r3, pc, #376	; (adr r3, 813d8 <__ieee754_log+0x2c8>)
   8125e:	e9d3 2300 	ldrd	r2, r3, [r3]
   81262:	f000 f983 	bl	8156c <__adddf3>
   81266:	e9dd 2300 	ldrd	r2, r3, [sp]
   8126a:	f000 fb31 	bl	818d0 <__aeabi_dmul>
   8126e:	a35c      	add	r3, pc, #368	; (adr r3, 813e0 <__ieee754_log+0x2d0>)
   81270:	e9d3 2300 	ldrd	r2, r3, [r3]
   81274:	e9cd 0100 	strd	r0, r1, [sp]
   81278:	4620      	mov	r0, r4
   8127a:	4629      	mov	r1, r5
   8127c:	f000 fb28 	bl	818d0 <__aeabi_dmul>
   81280:	a359      	add	r3, pc, #356	; (adr r3, 813e8 <__ieee754_log+0x2d8>)
   81282:	e9d3 2300 	ldrd	r2, r3, [r3]
   81286:	f000 f971 	bl	8156c <__adddf3>
   8128a:	4622      	mov	r2, r4
   8128c:	462b      	mov	r3, r5
   8128e:	f000 fb1f 	bl	818d0 <__aeabi_dmul>
   81292:	a357      	add	r3, pc, #348	; (adr r3, 813f0 <__ieee754_log+0x2e0>)
   81294:	e9d3 2300 	ldrd	r2, r3, [r3]
   81298:	f000 f968 	bl	8156c <__adddf3>
   8129c:	4622      	mov	r2, r4
   8129e:	462b      	mov	r3, r5
   812a0:	f000 fb16 	bl	818d0 <__aeabi_dmul>
   812a4:	460b      	mov	r3, r1
   812a6:	4602      	mov	r2, r0
   812a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   812ac:	f000 f95e 	bl	8156c <__adddf3>
   812b0:	f5a6 23c2 	sub.w	r3, r6, #397312	; 0x61000
   812b4:	f5c6 26d7 	rsb	r6, r6, #440320	; 0x6b800
   812b8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   812bc:	3651      	adds	r6, #81	; 0x51
   812be:	431e      	orrs	r6, r3
   812c0:	2e00      	cmp	r6, #0
   812c2:	4604      	mov	r4, r0
   812c4:	460d      	mov	r5, r1
   812c6:	dd57      	ble.n	81378 <__ieee754_log+0x268>
   812c8:	2200      	movs	r2, #0
   812ca:	4b50      	ldr	r3, [pc, #320]	; (8140c <__ieee754_log+0x2fc>)
   812cc:	4650      	mov	r0, sl
   812ce:	4659      	mov	r1, fp
   812d0:	f000 fafe 	bl	818d0 <__aeabi_dmul>
   812d4:	4652      	mov	r2, sl
   812d6:	465b      	mov	r3, fp
   812d8:	f000 fafa 	bl	818d0 <__aeabi_dmul>
   812dc:	4606      	mov	r6, r0
   812de:	460f      	mov	r7, r1
   812e0:	f1b8 0f00 	cmp.w	r8, #0
   812e4:	f040 8096 	bne.w	81414 <__ieee754_log+0x304>
   812e8:	4622      	mov	r2, r4
   812ea:	462b      	mov	r3, r5
   812ec:	f000 f93e 	bl	8156c <__adddf3>
   812f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   812f4:	f000 faec 	bl	818d0 <__aeabi_dmul>
   812f8:	4602      	mov	r2, r0
   812fa:	460b      	mov	r3, r1
   812fc:	4630      	mov	r0, r6
   812fe:	4639      	mov	r1, r7
   81300:	f000 f932 	bl	81568 <__aeabi_dsub>
   81304:	4602      	mov	r2, r0
   81306:	460b      	mov	r3, r1
   81308:	4650      	mov	r0, sl
   8130a:	4659      	mov	r1, fp
   8130c:	f000 f92c 	bl	81568 <__aeabi_dsub>
   81310:	b007      	add	sp, #28
   81312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81316:	2200      	movs	r2, #0
   81318:	2300      	movs	r3, #0
   8131a:	2000      	movs	r0, #0
   8131c:	493c      	ldr	r1, [pc, #240]	; (81410 <__ieee754_log+0x300>)
   8131e:	f000 fc01 	bl	81b24 <__aeabi_ddiv>
   81322:	b007      	add	sp, #28
   81324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81328:	4652      	mov	r2, sl
   8132a:	465b      	mov	r3, fp
   8132c:	4650      	mov	r0, sl
   8132e:	4659      	mov	r1, fp
   81330:	f000 face 	bl	818d0 <__aeabi_dmul>
   81334:	a330      	add	r3, pc, #192	; (adr r3, 813f8 <__ieee754_log+0x2e8>)
   81336:	e9d3 2300 	ldrd	r2, r3, [r3]
   8133a:	4604      	mov	r4, r0
   8133c:	460d      	mov	r5, r1
   8133e:	4650      	mov	r0, sl
   81340:	4659      	mov	r1, fp
   81342:	f000 fac5 	bl	818d0 <__aeabi_dmul>
   81346:	4602      	mov	r2, r0
   81348:	460b      	mov	r3, r1
   8134a:	2000      	movs	r0, #0
   8134c:	492f      	ldr	r1, [pc, #188]	; (8140c <__ieee754_log+0x2fc>)
   8134e:	f000 f90b 	bl	81568 <__aeabi_dsub>
   81352:	4602      	mov	r2, r0
   81354:	460b      	mov	r3, r1
   81356:	4620      	mov	r0, r4
   81358:	4629      	mov	r1, r5
   8135a:	f000 fab9 	bl	818d0 <__aeabi_dmul>
   8135e:	4604      	mov	r4, r0
   81360:	460d      	mov	r5, r1
   81362:	f1b8 0f00 	cmp.w	r8, #0
   81366:	f040 8092 	bne.w	8148e <__ieee754_log+0x37e>
   8136a:	4650      	mov	r0, sl
   8136c:	4659      	mov	r1, fp
   8136e:	4622      	mov	r2, r4
   81370:	462b      	mov	r3, r5
   81372:	f000 f8f9 	bl	81568 <__aeabi_dsub>
   81376:	e738      	b.n	811ea <__ieee754_log+0xda>
   81378:	f1b8 0f00 	cmp.w	r8, #0
   8137c:	f000 80ab 	beq.w	814d6 <__ieee754_log+0x3c6>
   81380:	a30b      	add	r3, pc, #44	; (adr r3, 813b0 <__ieee754_log+0x2a0>)
   81382:	e9d3 2300 	ldrd	r2, r3, [r3]
   81386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8138a:	f000 faa1 	bl	818d0 <__aeabi_dmul>
   8138e:	4622      	mov	r2, r4
   81390:	462b      	mov	r3, r5
   81392:	4606      	mov	r6, r0
   81394:	460f      	mov	r7, r1
   81396:	4650      	mov	r0, sl
   81398:	4659      	mov	r1, fp
   8139a:	f000 f8e5 	bl	81568 <__aeabi_dsub>
   8139e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   813a2:	f000 fa95 	bl	818d0 <__aeabi_dmul>
   813a6:	4604      	mov	r4, r0
   813a8:	460d      	mov	r5, r1
   813aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   813ae:	e07c      	b.n	814aa <__ieee754_log+0x39a>
   813b0:	fee00000 	.word	0xfee00000
   813b4:	3fe62e42 	.word	0x3fe62e42
   813b8:	35793c76 	.word	0x35793c76
   813bc:	3dea39ef 	.word	0x3dea39ef
   813c0:	df3e5244 	.word	0xdf3e5244
   813c4:	3fc2f112 	.word	0x3fc2f112
   813c8:	96cb03de 	.word	0x96cb03de
   813cc:	3fc74664 	.word	0x3fc74664
   813d0:	94229359 	.word	0x94229359
   813d4:	3fd24924 	.word	0x3fd24924
   813d8:	55555593 	.word	0x55555593
   813dc:	3fe55555 	.word	0x3fe55555
   813e0:	d078c69f 	.word	0xd078c69f
   813e4:	3fc39a09 	.word	0x3fc39a09
   813e8:	1d8e78af 	.word	0x1d8e78af
   813ec:	3fcc71c5 	.word	0x3fcc71c5
   813f0:	9997fa04 	.word	0x9997fa04
   813f4:	3fd99999 	.word	0x3fd99999
   813f8:	55555555 	.word	0x55555555
   813fc:	3fd55555 	.word	0x3fd55555
   81400:	43500000 	.word	0x43500000
   81404:	7fefffff 	.word	0x7fefffff
   81408:	3ff00000 	.word	0x3ff00000
   8140c:	3fe00000 	.word	0x3fe00000
   81410:	c3500000 	.word	0xc3500000
   81414:	a336      	add	r3, pc, #216	; (adr r3, 814f0 <__ieee754_log+0x3e0>)
   81416:	e9d3 2300 	ldrd	r2, r3, [r3]
   8141a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8141e:	f000 fa57 	bl	818d0 <__aeabi_dmul>
   81422:	4622      	mov	r2, r4
   81424:	4680      	mov	r8, r0
   81426:	4689      	mov	r9, r1
   81428:	462b      	mov	r3, r5
   8142a:	4630      	mov	r0, r6
   8142c:	4639      	mov	r1, r7
   8142e:	f000 f89d 	bl	8156c <__adddf3>
   81432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   81436:	f000 fa4b 	bl	818d0 <__aeabi_dmul>
   8143a:	a32f      	add	r3, pc, #188	; (adr r3, 814f8 <__ieee754_log+0x3e8>)
   8143c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81440:	4604      	mov	r4, r0
   81442:	460d      	mov	r5, r1
   81444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   81448:	f000 fa42 	bl	818d0 <__aeabi_dmul>
   8144c:	4602      	mov	r2, r0
   8144e:	460b      	mov	r3, r1
   81450:	4620      	mov	r0, r4
   81452:	4629      	mov	r1, r5
   81454:	f000 f88a 	bl	8156c <__adddf3>
   81458:	4602      	mov	r2, r0
   8145a:	460b      	mov	r3, r1
   8145c:	4630      	mov	r0, r6
   8145e:	4639      	mov	r1, r7
   81460:	f000 f882 	bl	81568 <__aeabi_dsub>
   81464:	4652      	mov	r2, sl
   81466:	465b      	mov	r3, fp
   81468:	f000 f87e 	bl	81568 <__aeabi_dsub>
   8146c:	4602      	mov	r2, r0
   8146e:	460b      	mov	r3, r1
   81470:	4640      	mov	r0, r8
   81472:	4649      	mov	r1, r9
   81474:	f000 f878 	bl	81568 <__aeabi_dsub>
   81478:	e6b7      	b.n	811ea <__ieee754_log+0xda>
   8147a:	f000 f875 	bl	81568 <__aeabi_dsub>
   8147e:	2200      	movs	r2, #0
   81480:	2300      	movs	r3, #0
   81482:	f000 fb4f 	bl	81b24 <__aeabi_ddiv>
   81486:	e6b0      	b.n	811ea <__ieee754_log+0xda>
   81488:	2000      	movs	r0, #0
   8148a:	2100      	movs	r1, #0
   8148c:	e6ad      	b.n	811ea <__ieee754_log+0xda>
   8148e:	4640      	mov	r0, r8
   81490:	f000 f9b8 	bl	81804 <__aeabi_i2d>
   81494:	a316      	add	r3, pc, #88	; (adr r3, 814f0 <__ieee754_log+0x3e0>)
   81496:	e9d3 2300 	ldrd	r2, r3, [r3]
   8149a:	4680      	mov	r8, r0
   8149c:	4689      	mov	r9, r1
   8149e:	f000 fa17 	bl	818d0 <__aeabi_dmul>
   814a2:	4606      	mov	r6, r0
   814a4:	460f      	mov	r7, r1
   814a6:	4640      	mov	r0, r8
   814a8:	4649      	mov	r1, r9
   814aa:	a313      	add	r3, pc, #76	; (adr r3, 814f8 <__ieee754_log+0x3e8>)
   814ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   814b0:	f000 fa0e 	bl	818d0 <__aeabi_dmul>
   814b4:	4602      	mov	r2, r0
   814b6:	460b      	mov	r3, r1
   814b8:	4620      	mov	r0, r4
   814ba:	4629      	mov	r1, r5
   814bc:	f000 f854 	bl	81568 <__aeabi_dsub>
   814c0:	4652      	mov	r2, sl
   814c2:	465b      	mov	r3, fp
   814c4:	f000 f850 	bl	81568 <__aeabi_dsub>
   814c8:	4602      	mov	r2, r0
   814ca:	460b      	mov	r3, r1
   814cc:	4630      	mov	r0, r6
   814ce:	4639      	mov	r1, r7
   814d0:	f000 f84a 	bl	81568 <__aeabi_dsub>
   814d4:	e689      	b.n	811ea <__ieee754_log+0xda>
   814d6:	4602      	mov	r2, r0
   814d8:	460b      	mov	r3, r1
   814da:	4650      	mov	r0, sl
   814dc:	4659      	mov	r1, fp
   814de:	f000 f843 	bl	81568 <__aeabi_dsub>
   814e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   814e6:	f000 f9f3 	bl	818d0 <__aeabi_dmul>
   814ea:	e70b      	b.n	81304 <__ieee754_log+0x1f4>
   814ec:	f3af 8000 	nop.w
   814f0:	fee00000 	.word	0xfee00000
   814f4:	3fe62e42 	.word	0x3fe62e42
   814f8:	35793c76 	.word	0x35793c76
   814fc:	3dea39ef 	.word	0x3dea39ef

00081500 <__fpclassifyd>:
   81500:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81504:	b410      	push	{r4}
   81506:	d008      	beq.n	8151a <__fpclassifyd+0x1a>
   81508:	4a0f      	ldr	r2, [pc, #60]	; (81548 <__fpclassifyd+0x48>)
   8150a:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   8150e:	4294      	cmp	r4, r2
   81510:	d80a      	bhi.n	81528 <__fpclassifyd+0x28>
   81512:	2004      	movs	r0, #4
   81514:	f85d 4b04 	ldr.w	r4, [sp], #4
   81518:	4770      	bx	lr
   8151a:	2800      	cmp	r0, #0
   8151c:	bf0c      	ite	eq
   8151e:	2002      	moveq	r0, #2
   81520:	2003      	movne	r0, #3
   81522:	f85d 4b04 	ldr.w	r4, [sp], #4
   81526:	4770      	bx	lr
   81528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8152c:	d201      	bcs.n	81532 <__fpclassifyd+0x32>
   8152e:	2003      	movs	r0, #3
   81530:	e7f7      	b.n	81522 <__fpclassifyd+0x22>
   81532:	4a06      	ldr	r2, [pc, #24]	; (8154c <__fpclassifyd+0x4c>)
   81534:	4293      	cmp	r3, r2
   81536:	d001      	beq.n	8153c <__fpclassifyd+0x3c>
   81538:	2000      	movs	r0, #0
   8153a:	e7f2      	b.n	81522 <__fpclassifyd+0x22>
   8153c:	f1d0 0001 	rsbs	r0, r0, #1
   81540:	bf38      	it	cc
   81542:	2000      	movcc	r0, #0
   81544:	e7ed      	b.n	81522 <__fpclassifyd+0x22>
   81546:	bf00      	nop
   81548:	7fdfffff 	.word	0x7fdfffff
   8154c:	7ff00000 	.word	0x7ff00000

00081550 <matherr>:
   81550:	2000      	movs	r0, #0
   81552:	4770      	bx	lr

00081554 <nan>:
   81554:	2000      	movs	r0, #0
   81556:	4901      	ldr	r1, [pc, #4]	; (8155c <nan+0x8>)
   81558:	4770      	bx	lr
   8155a:	bf00      	nop
   8155c:	7ff80000 	.word	0x7ff80000

00081560 <__aeabi_drsub>:
   81560:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81564:	e002      	b.n	8156c <__adddf3>
   81566:	bf00      	nop

00081568 <__aeabi_dsub>:
   81568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008156c <__adddf3>:
   8156c:	b530      	push	{r4, r5, lr}
   8156e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81572:	ea4f 0543 	mov.w	r5, r3, lsl #1
   81576:	ea94 0f05 	teq	r4, r5
   8157a:	bf08      	it	eq
   8157c:	ea90 0f02 	teqeq	r0, r2
   81580:	bf1f      	itttt	ne
   81582:	ea54 0c00 	orrsne.w	ip, r4, r0
   81586:	ea55 0c02 	orrsne.w	ip, r5, r2
   8158a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8158e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81592:	f000 80e2 	beq.w	8175a <__adddf3+0x1ee>
   81596:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8159a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8159e:	bfb8      	it	lt
   815a0:	426d      	neglt	r5, r5
   815a2:	dd0c      	ble.n	815be <__adddf3+0x52>
   815a4:	442c      	add	r4, r5
   815a6:	ea80 0202 	eor.w	r2, r0, r2
   815aa:	ea81 0303 	eor.w	r3, r1, r3
   815ae:	ea82 0000 	eor.w	r0, r2, r0
   815b2:	ea83 0101 	eor.w	r1, r3, r1
   815b6:	ea80 0202 	eor.w	r2, r0, r2
   815ba:	ea81 0303 	eor.w	r3, r1, r3
   815be:	2d36      	cmp	r5, #54	; 0x36
   815c0:	bf88      	it	hi
   815c2:	bd30      	pophi	{r4, r5, pc}
   815c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   815c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   815cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   815d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   815d4:	d002      	beq.n	815dc <__adddf3+0x70>
   815d6:	4240      	negs	r0, r0
   815d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   815dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   815e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   815e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   815e8:	d002      	beq.n	815f0 <__adddf3+0x84>
   815ea:	4252      	negs	r2, r2
   815ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   815f0:	ea94 0f05 	teq	r4, r5
   815f4:	f000 80a7 	beq.w	81746 <__adddf3+0x1da>
   815f8:	f1a4 0401 	sub.w	r4, r4, #1
   815fc:	f1d5 0e20 	rsbs	lr, r5, #32
   81600:	db0d      	blt.n	8161e <__adddf3+0xb2>
   81602:	fa02 fc0e 	lsl.w	ip, r2, lr
   81606:	fa22 f205 	lsr.w	r2, r2, r5
   8160a:	1880      	adds	r0, r0, r2
   8160c:	f141 0100 	adc.w	r1, r1, #0
   81610:	fa03 f20e 	lsl.w	r2, r3, lr
   81614:	1880      	adds	r0, r0, r2
   81616:	fa43 f305 	asr.w	r3, r3, r5
   8161a:	4159      	adcs	r1, r3
   8161c:	e00e      	b.n	8163c <__adddf3+0xd0>
   8161e:	f1a5 0520 	sub.w	r5, r5, #32
   81622:	f10e 0e20 	add.w	lr, lr, #32
   81626:	2a01      	cmp	r2, #1
   81628:	fa03 fc0e 	lsl.w	ip, r3, lr
   8162c:	bf28      	it	cs
   8162e:	f04c 0c02 	orrcs.w	ip, ip, #2
   81632:	fa43 f305 	asr.w	r3, r3, r5
   81636:	18c0      	adds	r0, r0, r3
   81638:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8163c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81640:	d507      	bpl.n	81652 <__adddf3+0xe6>
   81642:	f04f 0e00 	mov.w	lr, #0
   81646:	f1dc 0c00 	rsbs	ip, ip, #0
   8164a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8164e:	eb6e 0101 	sbc.w	r1, lr, r1
   81652:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   81656:	d31b      	bcc.n	81690 <__adddf3+0x124>
   81658:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8165c:	d30c      	bcc.n	81678 <__adddf3+0x10c>
   8165e:	0849      	lsrs	r1, r1, #1
   81660:	ea5f 0030 	movs.w	r0, r0, rrx
   81664:	ea4f 0c3c 	mov.w	ip, ip, rrx
   81668:	f104 0401 	add.w	r4, r4, #1
   8166c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81670:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81674:	f080 809a 	bcs.w	817ac <__adddf3+0x240>
   81678:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8167c:	bf08      	it	eq
   8167e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81682:	f150 0000 	adcs.w	r0, r0, #0
   81686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8168a:	ea41 0105 	orr.w	r1, r1, r5
   8168e:	bd30      	pop	{r4, r5, pc}
   81690:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81694:	4140      	adcs	r0, r0
   81696:	eb41 0101 	adc.w	r1, r1, r1
   8169a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8169e:	f1a4 0401 	sub.w	r4, r4, #1
   816a2:	d1e9      	bne.n	81678 <__adddf3+0x10c>
   816a4:	f091 0f00 	teq	r1, #0
   816a8:	bf04      	itt	eq
   816aa:	4601      	moveq	r1, r0
   816ac:	2000      	moveq	r0, #0
   816ae:	fab1 f381 	clz	r3, r1
   816b2:	bf08      	it	eq
   816b4:	3320      	addeq	r3, #32
   816b6:	f1a3 030b 	sub.w	r3, r3, #11
   816ba:	f1b3 0220 	subs.w	r2, r3, #32
   816be:	da0c      	bge.n	816da <__adddf3+0x16e>
   816c0:	320c      	adds	r2, #12
   816c2:	dd08      	ble.n	816d6 <__adddf3+0x16a>
   816c4:	f102 0c14 	add.w	ip, r2, #20
   816c8:	f1c2 020c 	rsb	r2, r2, #12
   816cc:	fa01 f00c 	lsl.w	r0, r1, ip
   816d0:	fa21 f102 	lsr.w	r1, r1, r2
   816d4:	e00c      	b.n	816f0 <__adddf3+0x184>
   816d6:	f102 0214 	add.w	r2, r2, #20
   816da:	bfd8      	it	le
   816dc:	f1c2 0c20 	rsble	ip, r2, #32
   816e0:	fa01 f102 	lsl.w	r1, r1, r2
   816e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   816e8:	bfdc      	itt	le
   816ea:	ea41 010c 	orrle.w	r1, r1, ip
   816ee:	4090      	lslle	r0, r2
   816f0:	1ae4      	subs	r4, r4, r3
   816f2:	bfa2      	ittt	ge
   816f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   816f8:	4329      	orrge	r1, r5
   816fa:	bd30      	popge	{r4, r5, pc}
   816fc:	ea6f 0404 	mvn.w	r4, r4
   81700:	3c1f      	subs	r4, #31
   81702:	da1c      	bge.n	8173e <__adddf3+0x1d2>
   81704:	340c      	adds	r4, #12
   81706:	dc0e      	bgt.n	81726 <__adddf3+0x1ba>
   81708:	f104 0414 	add.w	r4, r4, #20
   8170c:	f1c4 0220 	rsb	r2, r4, #32
   81710:	fa20 f004 	lsr.w	r0, r0, r4
   81714:	fa01 f302 	lsl.w	r3, r1, r2
   81718:	ea40 0003 	orr.w	r0, r0, r3
   8171c:	fa21 f304 	lsr.w	r3, r1, r4
   81720:	ea45 0103 	orr.w	r1, r5, r3
   81724:	bd30      	pop	{r4, r5, pc}
   81726:	f1c4 040c 	rsb	r4, r4, #12
   8172a:	f1c4 0220 	rsb	r2, r4, #32
   8172e:	fa20 f002 	lsr.w	r0, r0, r2
   81732:	fa01 f304 	lsl.w	r3, r1, r4
   81736:	ea40 0003 	orr.w	r0, r0, r3
   8173a:	4629      	mov	r1, r5
   8173c:	bd30      	pop	{r4, r5, pc}
   8173e:	fa21 f004 	lsr.w	r0, r1, r4
   81742:	4629      	mov	r1, r5
   81744:	bd30      	pop	{r4, r5, pc}
   81746:	f094 0f00 	teq	r4, #0
   8174a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8174e:	bf06      	itte	eq
   81750:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81754:	3401      	addeq	r4, #1
   81756:	3d01      	subne	r5, #1
   81758:	e74e      	b.n	815f8 <__adddf3+0x8c>
   8175a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8175e:	bf18      	it	ne
   81760:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81764:	d029      	beq.n	817ba <__adddf3+0x24e>
   81766:	ea94 0f05 	teq	r4, r5
   8176a:	bf08      	it	eq
   8176c:	ea90 0f02 	teqeq	r0, r2
   81770:	d005      	beq.n	8177e <__adddf3+0x212>
   81772:	ea54 0c00 	orrs.w	ip, r4, r0
   81776:	bf04      	itt	eq
   81778:	4619      	moveq	r1, r3
   8177a:	4610      	moveq	r0, r2
   8177c:	bd30      	pop	{r4, r5, pc}
   8177e:	ea91 0f03 	teq	r1, r3
   81782:	bf1e      	ittt	ne
   81784:	2100      	movne	r1, #0
   81786:	2000      	movne	r0, #0
   81788:	bd30      	popne	{r4, r5, pc}
   8178a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8178e:	d105      	bne.n	8179c <__adddf3+0x230>
   81790:	0040      	lsls	r0, r0, #1
   81792:	4149      	adcs	r1, r1
   81794:	bf28      	it	cs
   81796:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8179a:	bd30      	pop	{r4, r5, pc}
   8179c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   817a0:	bf3c      	itt	cc
   817a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   817a6:	bd30      	popcc	{r4, r5, pc}
   817a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   817ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   817b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   817b4:	f04f 0000 	mov.w	r0, #0
   817b8:	bd30      	pop	{r4, r5, pc}
   817ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   817be:	bf1a      	itte	ne
   817c0:	4619      	movne	r1, r3
   817c2:	4610      	movne	r0, r2
   817c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   817c8:	bf1c      	itt	ne
   817ca:	460b      	movne	r3, r1
   817cc:	4602      	movne	r2, r0
   817ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   817d2:	bf06      	itte	eq
   817d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   817d8:	ea91 0f03 	teqeq	r1, r3
   817dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   817e0:	bd30      	pop	{r4, r5, pc}
   817e2:	bf00      	nop

000817e4 <__aeabi_ui2d>:
   817e4:	f090 0f00 	teq	r0, #0
   817e8:	bf04      	itt	eq
   817ea:	2100      	moveq	r1, #0
   817ec:	4770      	bxeq	lr
   817ee:	b530      	push	{r4, r5, lr}
   817f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   817f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   817f8:	f04f 0500 	mov.w	r5, #0
   817fc:	f04f 0100 	mov.w	r1, #0
   81800:	e750      	b.n	816a4 <__adddf3+0x138>
   81802:	bf00      	nop

00081804 <__aeabi_i2d>:
   81804:	f090 0f00 	teq	r0, #0
   81808:	bf04      	itt	eq
   8180a:	2100      	moveq	r1, #0
   8180c:	4770      	bxeq	lr
   8180e:	b530      	push	{r4, r5, lr}
   81810:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81814:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81818:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8181c:	bf48      	it	mi
   8181e:	4240      	negmi	r0, r0
   81820:	f04f 0100 	mov.w	r1, #0
   81824:	e73e      	b.n	816a4 <__adddf3+0x138>
   81826:	bf00      	nop

00081828 <__aeabi_f2d>:
   81828:	0042      	lsls	r2, r0, #1
   8182a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8182e:	ea4f 0131 	mov.w	r1, r1, rrx
   81832:	ea4f 7002 	mov.w	r0, r2, lsl #28
   81836:	bf1f      	itttt	ne
   81838:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8183c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81840:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81844:	4770      	bxne	lr
   81846:	f092 0f00 	teq	r2, #0
   8184a:	bf14      	ite	ne
   8184c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81850:	4770      	bxeq	lr
   81852:	b530      	push	{r4, r5, lr}
   81854:	f44f 7460 	mov.w	r4, #896	; 0x380
   81858:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8185c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81860:	e720      	b.n	816a4 <__adddf3+0x138>
   81862:	bf00      	nop

00081864 <__aeabi_ul2d>:
   81864:	ea50 0201 	orrs.w	r2, r0, r1
   81868:	bf08      	it	eq
   8186a:	4770      	bxeq	lr
   8186c:	b530      	push	{r4, r5, lr}
   8186e:	f04f 0500 	mov.w	r5, #0
   81872:	e00a      	b.n	8188a <__aeabi_l2d+0x16>

00081874 <__aeabi_l2d>:
   81874:	ea50 0201 	orrs.w	r2, r0, r1
   81878:	bf08      	it	eq
   8187a:	4770      	bxeq	lr
   8187c:	b530      	push	{r4, r5, lr}
   8187e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81882:	d502      	bpl.n	8188a <__aeabi_l2d+0x16>
   81884:	4240      	negs	r0, r0
   81886:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8188a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8188e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81892:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81896:	f43f aedc 	beq.w	81652 <__adddf3+0xe6>
   8189a:	f04f 0203 	mov.w	r2, #3
   8189e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   818a2:	bf18      	it	ne
   818a4:	3203      	addne	r2, #3
   818a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   818aa:	bf18      	it	ne
   818ac:	3203      	addne	r2, #3
   818ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   818b2:	f1c2 0320 	rsb	r3, r2, #32
   818b6:	fa00 fc03 	lsl.w	ip, r0, r3
   818ba:	fa20 f002 	lsr.w	r0, r0, r2
   818be:	fa01 fe03 	lsl.w	lr, r1, r3
   818c2:	ea40 000e 	orr.w	r0, r0, lr
   818c6:	fa21 f102 	lsr.w	r1, r1, r2
   818ca:	4414      	add	r4, r2
   818cc:	e6c1      	b.n	81652 <__adddf3+0xe6>
   818ce:	bf00      	nop

000818d0 <__aeabi_dmul>:
   818d0:	b570      	push	{r4, r5, r6, lr}
   818d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   818d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   818da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   818de:	bf1d      	ittte	ne
   818e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   818e4:	ea94 0f0c 	teqne	r4, ip
   818e8:	ea95 0f0c 	teqne	r5, ip
   818ec:	f000 f8de 	bleq	81aac <__aeabi_dmul+0x1dc>
   818f0:	442c      	add	r4, r5
   818f2:	ea81 0603 	eor.w	r6, r1, r3
   818f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   818fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   818fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81902:	bf18      	it	ne
   81904:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8190c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81910:	d038      	beq.n	81984 <__aeabi_dmul+0xb4>
   81912:	fba0 ce02 	umull	ip, lr, r0, r2
   81916:	f04f 0500 	mov.w	r5, #0
   8191a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8191e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81922:	fbe0 e503 	umlal	lr, r5, r0, r3
   81926:	f04f 0600 	mov.w	r6, #0
   8192a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8192e:	f09c 0f00 	teq	ip, #0
   81932:	bf18      	it	ne
   81934:	f04e 0e01 	orrne.w	lr, lr, #1
   81938:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8193c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81940:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81944:	d204      	bcs.n	81950 <__aeabi_dmul+0x80>
   81946:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8194a:	416d      	adcs	r5, r5
   8194c:	eb46 0606 	adc.w	r6, r6, r6
   81950:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81954:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81958:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8195c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81960:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81964:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81968:	bf88      	it	hi
   8196a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8196e:	d81e      	bhi.n	819ae <__aeabi_dmul+0xde>
   81970:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81974:	bf08      	it	eq
   81976:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8197a:	f150 0000 	adcs.w	r0, r0, #0
   8197e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81982:	bd70      	pop	{r4, r5, r6, pc}
   81984:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81988:	ea46 0101 	orr.w	r1, r6, r1
   8198c:	ea40 0002 	orr.w	r0, r0, r2
   81990:	ea81 0103 	eor.w	r1, r1, r3
   81994:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81998:	bfc2      	ittt	gt
   8199a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8199e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   819a2:	bd70      	popgt	{r4, r5, r6, pc}
   819a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   819a8:	f04f 0e00 	mov.w	lr, #0
   819ac:	3c01      	subs	r4, #1
   819ae:	f300 80ab 	bgt.w	81b08 <__aeabi_dmul+0x238>
   819b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   819b6:	bfde      	ittt	le
   819b8:	2000      	movle	r0, #0
   819ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   819be:	bd70      	pople	{r4, r5, r6, pc}
   819c0:	f1c4 0400 	rsb	r4, r4, #0
   819c4:	3c20      	subs	r4, #32
   819c6:	da35      	bge.n	81a34 <__aeabi_dmul+0x164>
   819c8:	340c      	adds	r4, #12
   819ca:	dc1b      	bgt.n	81a04 <__aeabi_dmul+0x134>
   819cc:	f104 0414 	add.w	r4, r4, #20
   819d0:	f1c4 0520 	rsb	r5, r4, #32
   819d4:	fa00 f305 	lsl.w	r3, r0, r5
   819d8:	fa20 f004 	lsr.w	r0, r0, r4
   819dc:	fa01 f205 	lsl.w	r2, r1, r5
   819e0:	ea40 0002 	orr.w	r0, r0, r2
   819e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   819e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   819ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   819f0:	fa21 f604 	lsr.w	r6, r1, r4
   819f4:	eb42 0106 	adc.w	r1, r2, r6
   819f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   819fc:	bf08      	it	eq
   819fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81a02:	bd70      	pop	{r4, r5, r6, pc}
   81a04:	f1c4 040c 	rsb	r4, r4, #12
   81a08:	f1c4 0520 	rsb	r5, r4, #32
   81a0c:	fa00 f304 	lsl.w	r3, r0, r4
   81a10:	fa20 f005 	lsr.w	r0, r0, r5
   81a14:	fa01 f204 	lsl.w	r2, r1, r4
   81a18:	ea40 0002 	orr.w	r0, r0, r2
   81a1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81a20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81a24:	f141 0100 	adc.w	r1, r1, #0
   81a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81a2c:	bf08      	it	eq
   81a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81a32:	bd70      	pop	{r4, r5, r6, pc}
   81a34:	f1c4 0520 	rsb	r5, r4, #32
   81a38:	fa00 f205 	lsl.w	r2, r0, r5
   81a3c:	ea4e 0e02 	orr.w	lr, lr, r2
   81a40:	fa20 f304 	lsr.w	r3, r0, r4
   81a44:	fa01 f205 	lsl.w	r2, r1, r5
   81a48:	ea43 0302 	orr.w	r3, r3, r2
   81a4c:	fa21 f004 	lsr.w	r0, r1, r4
   81a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81a54:	fa21 f204 	lsr.w	r2, r1, r4
   81a58:	ea20 0002 	bic.w	r0, r0, r2
   81a5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81a60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81a64:	bf08      	it	eq
   81a66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81a6a:	bd70      	pop	{r4, r5, r6, pc}
   81a6c:	f094 0f00 	teq	r4, #0
   81a70:	d10f      	bne.n	81a92 <__aeabi_dmul+0x1c2>
   81a72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81a76:	0040      	lsls	r0, r0, #1
   81a78:	eb41 0101 	adc.w	r1, r1, r1
   81a7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81a80:	bf08      	it	eq
   81a82:	3c01      	subeq	r4, #1
   81a84:	d0f7      	beq.n	81a76 <__aeabi_dmul+0x1a6>
   81a86:	ea41 0106 	orr.w	r1, r1, r6
   81a8a:	f095 0f00 	teq	r5, #0
   81a8e:	bf18      	it	ne
   81a90:	4770      	bxne	lr
   81a92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81a96:	0052      	lsls	r2, r2, #1
   81a98:	eb43 0303 	adc.w	r3, r3, r3
   81a9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81aa0:	bf08      	it	eq
   81aa2:	3d01      	subeq	r5, #1
   81aa4:	d0f7      	beq.n	81a96 <__aeabi_dmul+0x1c6>
   81aa6:	ea43 0306 	orr.w	r3, r3, r6
   81aaa:	4770      	bx	lr
   81aac:	ea94 0f0c 	teq	r4, ip
   81ab0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81ab4:	bf18      	it	ne
   81ab6:	ea95 0f0c 	teqne	r5, ip
   81aba:	d00c      	beq.n	81ad6 <__aeabi_dmul+0x206>
   81abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81ac0:	bf18      	it	ne
   81ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81ac6:	d1d1      	bne.n	81a6c <__aeabi_dmul+0x19c>
   81ac8:	ea81 0103 	eor.w	r1, r1, r3
   81acc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81ad0:	f04f 0000 	mov.w	r0, #0
   81ad4:	bd70      	pop	{r4, r5, r6, pc}
   81ad6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81ada:	bf06      	itte	eq
   81adc:	4610      	moveq	r0, r2
   81ade:	4619      	moveq	r1, r3
   81ae0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81ae4:	d019      	beq.n	81b1a <__aeabi_dmul+0x24a>
   81ae6:	ea94 0f0c 	teq	r4, ip
   81aea:	d102      	bne.n	81af2 <__aeabi_dmul+0x222>
   81aec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81af0:	d113      	bne.n	81b1a <__aeabi_dmul+0x24a>
   81af2:	ea95 0f0c 	teq	r5, ip
   81af6:	d105      	bne.n	81b04 <__aeabi_dmul+0x234>
   81af8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81afc:	bf1c      	itt	ne
   81afe:	4610      	movne	r0, r2
   81b00:	4619      	movne	r1, r3
   81b02:	d10a      	bne.n	81b1a <__aeabi_dmul+0x24a>
   81b04:	ea81 0103 	eor.w	r1, r1, r3
   81b08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81b0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81b10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81b14:	f04f 0000 	mov.w	r0, #0
   81b18:	bd70      	pop	{r4, r5, r6, pc}
   81b1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81b1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81b22:	bd70      	pop	{r4, r5, r6, pc}

00081b24 <__aeabi_ddiv>:
   81b24:	b570      	push	{r4, r5, r6, lr}
   81b26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81b2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81b2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81b32:	bf1d      	ittte	ne
   81b34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81b38:	ea94 0f0c 	teqne	r4, ip
   81b3c:	ea95 0f0c 	teqne	r5, ip
   81b40:	f000 f8a7 	bleq	81c92 <__aeabi_ddiv+0x16e>
   81b44:	eba4 0405 	sub.w	r4, r4, r5
   81b48:	ea81 0e03 	eor.w	lr, r1, r3
   81b4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81b50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81b54:	f000 8088 	beq.w	81c68 <__aeabi_ddiv+0x144>
   81b58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81b5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81b60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81b64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81b68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81b6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81b70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81b74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81b78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81b7c:	429d      	cmp	r5, r3
   81b7e:	bf08      	it	eq
   81b80:	4296      	cmpeq	r6, r2
   81b82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81b86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81b8a:	d202      	bcs.n	81b92 <__aeabi_ddiv+0x6e>
   81b8c:	085b      	lsrs	r3, r3, #1
   81b8e:	ea4f 0232 	mov.w	r2, r2, rrx
   81b92:	1ab6      	subs	r6, r6, r2
   81b94:	eb65 0503 	sbc.w	r5, r5, r3
   81b98:	085b      	lsrs	r3, r3, #1
   81b9a:	ea4f 0232 	mov.w	r2, r2, rrx
   81b9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81ba2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81ba6:	ebb6 0e02 	subs.w	lr, r6, r2
   81baa:	eb75 0e03 	sbcs.w	lr, r5, r3
   81bae:	bf22      	ittt	cs
   81bb0:	1ab6      	subcs	r6, r6, r2
   81bb2:	4675      	movcs	r5, lr
   81bb4:	ea40 000c 	orrcs.w	r0, r0, ip
   81bb8:	085b      	lsrs	r3, r3, #1
   81bba:	ea4f 0232 	mov.w	r2, r2, rrx
   81bbe:	ebb6 0e02 	subs.w	lr, r6, r2
   81bc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   81bc6:	bf22      	ittt	cs
   81bc8:	1ab6      	subcs	r6, r6, r2
   81bca:	4675      	movcs	r5, lr
   81bcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81bd0:	085b      	lsrs	r3, r3, #1
   81bd2:	ea4f 0232 	mov.w	r2, r2, rrx
   81bd6:	ebb6 0e02 	subs.w	lr, r6, r2
   81bda:	eb75 0e03 	sbcs.w	lr, r5, r3
   81bde:	bf22      	ittt	cs
   81be0:	1ab6      	subcs	r6, r6, r2
   81be2:	4675      	movcs	r5, lr
   81be4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81be8:	085b      	lsrs	r3, r3, #1
   81bea:	ea4f 0232 	mov.w	r2, r2, rrx
   81bee:	ebb6 0e02 	subs.w	lr, r6, r2
   81bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   81bf6:	bf22      	ittt	cs
   81bf8:	1ab6      	subcs	r6, r6, r2
   81bfa:	4675      	movcs	r5, lr
   81bfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81c00:	ea55 0e06 	orrs.w	lr, r5, r6
   81c04:	d018      	beq.n	81c38 <__aeabi_ddiv+0x114>
   81c06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81c0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81c0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81c12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81c16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81c1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81c1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81c22:	d1c0      	bne.n	81ba6 <__aeabi_ddiv+0x82>
   81c24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81c28:	d10b      	bne.n	81c42 <__aeabi_ddiv+0x11e>
   81c2a:	ea41 0100 	orr.w	r1, r1, r0
   81c2e:	f04f 0000 	mov.w	r0, #0
   81c32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81c36:	e7b6      	b.n	81ba6 <__aeabi_ddiv+0x82>
   81c38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81c3c:	bf04      	itt	eq
   81c3e:	4301      	orreq	r1, r0
   81c40:	2000      	moveq	r0, #0
   81c42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81c46:	bf88      	it	hi
   81c48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81c4c:	f63f aeaf 	bhi.w	819ae <__aeabi_dmul+0xde>
   81c50:	ebb5 0c03 	subs.w	ip, r5, r3
   81c54:	bf04      	itt	eq
   81c56:	ebb6 0c02 	subseq.w	ip, r6, r2
   81c5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81c5e:	f150 0000 	adcs.w	r0, r0, #0
   81c62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81c66:	bd70      	pop	{r4, r5, r6, pc}
   81c68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81c6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81c70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81c74:	bfc2      	ittt	gt
   81c76:	ebd4 050c 	rsbsgt	r5, r4, ip
   81c7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81c7e:	bd70      	popgt	{r4, r5, r6, pc}
   81c80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81c84:	f04f 0e00 	mov.w	lr, #0
   81c88:	3c01      	subs	r4, #1
   81c8a:	e690      	b.n	819ae <__aeabi_dmul+0xde>
   81c8c:	ea45 0e06 	orr.w	lr, r5, r6
   81c90:	e68d      	b.n	819ae <__aeabi_dmul+0xde>
   81c92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81c96:	ea94 0f0c 	teq	r4, ip
   81c9a:	bf08      	it	eq
   81c9c:	ea95 0f0c 	teqeq	r5, ip
   81ca0:	f43f af3b 	beq.w	81b1a <__aeabi_dmul+0x24a>
   81ca4:	ea94 0f0c 	teq	r4, ip
   81ca8:	d10a      	bne.n	81cc0 <__aeabi_ddiv+0x19c>
   81caa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81cae:	f47f af34 	bne.w	81b1a <__aeabi_dmul+0x24a>
   81cb2:	ea95 0f0c 	teq	r5, ip
   81cb6:	f47f af25 	bne.w	81b04 <__aeabi_dmul+0x234>
   81cba:	4610      	mov	r0, r2
   81cbc:	4619      	mov	r1, r3
   81cbe:	e72c      	b.n	81b1a <__aeabi_dmul+0x24a>
   81cc0:	ea95 0f0c 	teq	r5, ip
   81cc4:	d106      	bne.n	81cd4 <__aeabi_ddiv+0x1b0>
   81cc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81cca:	f43f aefd 	beq.w	81ac8 <__aeabi_dmul+0x1f8>
   81cce:	4610      	mov	r0, r2
   81cd0:	4619      	mov	r1, r3
   81cd2:	e722      	b.n	81b1a <__aeabi_dmul+0x24a>
   81cd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81cd8:	bf18      	it	ne
   81cda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81cde:	f47f aec5 	bne.w	81a6c <__aeabi_dmul+0x19c>
   81ce2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81ce6:	f47f af0d 	bne.w	81b04 <__aeabi_dmul+0x234>
   81cea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81cee:	f47f aeeb 	bne.w	81ac8 <__aeabi_dmul+0x1f8>
   81cf2:	e712      	b.n	81b1a <__aeabi_dmul+0x24a>

00081cf4 <__gedf2>:
   81cf4:	f04f 3cff 	mov.w	ip, #4294967295
   81cf8:	e006      	b.n	81d08 <__cmpdf2+0x4>
   81cfa:	bf00      	nop

00081cfc <__ledf2>:
   81cfc:	f04f 0c01 	mov.w	ip, #1
   81d00:	e002      	b.n	81d08 <__cmpdf2+0x4>
   81d02:	bf00      	nop

00081d04 <__cmpdf2>:
   81d04:	f04f 0c01 	mov.w	ip, #1
   81d08:	f84d cd04 	str.w	ip, [sp, #-4]!
   81d0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81d14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81d18:	bf18      	it	ne
   81d1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   81d1e:	d01b      	beq.n	81d58 <__cmpdf2+0x54>
   81d20:	b001      	add	sp, #4
   81d22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   81d26:	bf0c      	ite	eq
   81d28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81d2c:	ea91 0f03 	teqne	r1, r3
   81d30:	bf02      	ittt	eq
   81d32:	ea90 0f02 	teqeq	r0, r2
   81d36:	2000      	moveq	r0, #0
   81d38:	4770      	bxeq	lr
   81d3a:	f110 0f00 	cmn.w	r0, #0
   81d3e:	ea91 0f03 	teq	r1, r3
   81d42:	bf58      	it	pl
   81d44:	4299      	cmppl	r1, r3
   81d46:	bf08      	it	eq
   81d48:	4290      	cmpeq	r0, r2
   81d4a:	bf2c      	ite	cs
   81d4c:	17d8      	asrcs	r0, r3, #31
   81d4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   81d52:	f040 0001 	orr.w	r0, r0, #1
   81d56:	4770      	bx	lr
   81d58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81d5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81d60:	d102      	bne.n	81d68 <__cmpdf2+0x64>
   81d62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   81d66:	d107      	bne.n	81d78 <__cmpdf2+0x74>
   81d68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81d6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81d70:	d1d6      	bne.n	81d20 <__cmpdf2+0x1c>
   81d72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   81d76:	d0d3      	beq.n	81d20 <__cmpdf2+0x1c>
   81d78:	f85d 0b04 	ldr.w	r0, [sp], #4
   81d7c:	4770      	bx	lr
   81d7e:	bf00      	nop

00081d80 <__aeabi_cdrcmple>:
   81d80:	4684      	mov	ip, r0
   81d82:	4610      	mov	r0, r2
   81d84:	4662      	mov	r2, ip
   81d86:	468c      	mov	ip, r1
   81d88:	4619      	mov	r1, r3
   81d8a:	4663      	mov	r3, ip
   81d8c:	e000      	b.n	81d90 <__aeabi_cdcmpeq>
   81d8e:	bf00      	nop

00081d90 <__aeabi_cdcmpeq>:
   81d90:	b501      	push	{r0, lr}
   81d92:	f7ff ffb7 	bl	81d04 <__cmpdf2>
   81d96:	2800      	cmp	r0, #0
   81d98:	bf48      	it	mi
   81d9a:	f110 0f00 	cmnmi.w	r0, #0
   81d9e:	bd01      	pop	{r0, pc}

00081da0 <__aeabi_dcmpeq>:
   81da0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81da4:	f7ff fff4 	bl	81d90 <__aeabi_cdcmpeq>
   81da8:	bf0c      	ite	eq
   81daa:	2001      	moveq	r0, #1
   81dac:	2000      	movne	r0, #0
   81dae:	f85d fb08 	ldr.w	pc, [sp], #8
   81db2:	bf00      	nop

00081db4 <__aeabi_dcmplt>:
   81db4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81db8:	f7ff ffea 	bl	81d90 <__aeabi_cdcmpeq>
   81dbc:	bf34      	ite	cc
   81dbe:	2001      	movcc	r0, #1
   81dc0:	2000      	movcs	r0, #0
   81dc2:	f85d fb08 	ldr.w	pc, [sp], #8
   81dc6:	bf00      	nop

00081dc8 <__aeabi_dcmple>:
   81dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   81dcc:	f7ff ffe0 	bl	81d90 <__aeabi_cdcmpeq>
   81dd0:	bf94      	ite	ls
   81dd2:	2001      	movls	r0, #1
   81dd4:	2000      	movhi	r0, #0
   81dd6:	f85d fb08 	ldr.w	pc, [sp], #8
   81dda:	bf00      	nop

00081ddc <__aeabi_dcmpge>:
   81ddc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81de0:	f7ff ffce 	bl	81d80 <__aeabi_cdrcmple>
   81de4:	bf94      	ite	ls
   81de6:	2001      	movls	r0, #1
   81de8:	2000      	movhi	r0, #0
   81dea:	f85d fb08 	ldr.w	pc, [sp], #8
   81dee:	bf00      	nop

00081df0 <__aeabi_dcmpgt>:
   81df0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81df4:	f7ff ffc4 	bl	81d80 <__aeabi_cdrcmple>
   81df8:	bf34      	ite	cc
   81dfa:	2001      	movcc	r0, #1
   81dfc:	2000      	movcs	r0, #0
   81dfe:	f85d fb08 	ldr.w	pc, [sp], #8
   81e02:	bf00      	nop

00081e04 <__aeabi_d2iz>:
   81e04:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81e08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81e0c:	d215      	bcs.n	81e3a <__aeabi_d2iz+0x36>
   81e0e:	d511      	bpl.n	81e34 <__aeabi_d2iz+0x30>
   81e10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81e14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81e18:	d912      	bls.n	81e40 <__aeabi_d2iz+0x3c>
   81e1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81e22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81e26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81e2a:	fa23 f002 	lsr.w	r0, r3, r2
   81e2e:	bf18      	it	ne
   81e30:	4240      	negne	r0, r0
   81e32:	4770      	bx	lr
   81e34:	f04f 0000 	mov.w	r0, #0
   81e38:	4770      	bx	lr
   81e3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81e3e:	d105      	bne.n	81e4c <__aeabi_d2iz+0x48>
   81e40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81e44:	bf08      	it	eq
   81e46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81e4a:	4770      	bx	lr
   81e4c:	f04f 0000 	mov.w	r0, #0
   81e50:	4770      	bx	lr
   81e52:	bf00      	nop

00081e54 <abort>:
   81e54:	b508      	push	{r3, lr}
   81e56:	2006      	movs	r0, #6
   81e58:	f000 f862 	bl	81f20 <raise>
   81e5c:	2001      	movs	r0, #1
   81e5e:	f000 f88b 	bl	81f78 <_exit>
	...

00081e64 <__errno>:
   81e64:	4b01      	ldr	r3, [pc, #4]	; (81e6c <__errno+0x8>)
   81e66:	6818      	ldr	r0, [r3, #0]
   81e68:	4770      	bx	lr
   81e6a:	bf00      	nop
   81e6c:	20000068 	.word	0x20000068

00081e70 <__libc_init_array>:
   81e70:	b570      	push	{r4, r5, r6, lr}
   81e72:	4b0e      	ldr	r3, [pc, #56]	; (81eac <__libc_init_array+0x3c>)
   81e74:	4d0e      	ldr	r5, [pc, #56]	; (81eb0 <__libc_init_array+0x40>)
   81e76:	2400      	movs	r4, #0
   81e78:	1aed      	subs	r5, r5, r3
   81e7a:	10ad      	asrs	r5, r5, #2
   81e7c:	461e      	mov	r6, r3
   81e7e:	42ac      	cmp	r4, r5
   81e80:	d004      	beq.n	81e8c <__libc_init_array+0x1c>
   81e82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81e86:	4790      	blx	r2
   81e88:	3401      	adds	r4, #1
   81e8a:	e7f8      	b.n	81e7e <__libc_init_array+0xe>
   81e8c:	f000 fa4e 	bl	8232c <_init>
   81e90:	4d08      	ldr	r5, [pc, #32]	; (81eb4 <__libc_init_array+0x44>)
   81e92:	4b09      	ldr	r3, [pc, #36]	; (81eb8 <__libc_init_array+0x48>)
   81e94:	2400      	movs	r4, #0
   81e96:	1aed      	subs	r5, r5, r3
   81e98:	10ad      	asrs	r5, r5, #2
   81e9a:	461e      	mov	r6, r3
   81e9c:	42ac      	cmp	r4, r5
   81e9e:	d004      	beq.n	81eaa <__libc_init_array+0x3a>
   81ea0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81ea4:	4790      	blx	r2
   81ea6:	3401      	adds	r4, #1
   81ea8:	e7f8      	b.n	81e9c <__libc_init_array+0x2c>
   81eaa:	bd70      	pop	{r4, r5, r6, pc}
   81eac:	00082338 	.word	0x00082338
   81eb0:	00082338 	.word	0x00082338
   81eb4:	0008233c 	.word	0x0008233c
   81eb8:	00082338 	.word	0x00082338

00081ebc <memcpy>:
   81ebc:	b510      	push	{r4, lr}
   81ebe:	2300      	movs	r3, #0
   81ec0:	4293      	cmp	r3, r2
   81ec2:	d003      	beq.n	81ecc <memcpy+0x10>
   81ec4:	5ccc      	ldrb	r4, [r1, r3]
   81ec6:	54c4      	strb	r4, [r0, r3]
   81ec8:	3301      	adds	r3, #1
   81eca:	e7f9      	b.n	81ec0 <memcpy+0x4>
   81ecc:	bd10      	pop	{r4, pc}

00081ece <_raise_r>:
   81ece:	291f      	cmp	r1, #31
   81ed0:	b538      	push	{r3, r4, r5, lr}
   81ed2:	4605      	mov	r5, r0
   81ed4:	460c      	mov	r4, r1
   81ed6:	d904      	bls.n	81ee2 <_raise_r+0x14>
   81ed8:	2316      	movs	r3, #22
   81eda:	6003      	str	r3, [r0, #0]
   81edc:	f04f 30ff 	mov.w	r0, #4294967295
   81ee0:	bd38      	pop	{r3, r4, r5, pc}
   81ee2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   81ee4:	b112      	cbz	r2, 81eec <_raise_r+0x1e>
   81ee6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   81eea:	b94b      	cbnz	r3, 81f00 <_raise_r+0x32>
   81eec:	4628      	mov	r0, r5
   81eee:	f000 f831 	bl	81f54 <_getpid_r>
   81ef2:	4622      	mov	r2, r4
   81ef4:	4601      	mov	r1, r0
   81ef6:	4628      	mov	r0, r5
   81ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81efc:	f000 b818 	b.w	81f30 <_kill_r>
   81f00:	2b01      	cmp	r3, #1
   81f02:	d00a      	beq.n	81f1a <_raise_r+0x4c>
   81f04:	1c59      	adds	r1, r3, #1
   81f06:	d103      	bne.n	81f10 <_raise_r+0x42>
   81f08:	2316      	movs	r3, #22
   81f0a:	6003      	str	r3, [r0, #0]
   81f0c:	2001      	movs	r0, #1
   81f0e:	bd38      	pop	{r3, r4, r5, pc}
   81f10:	2500      	movs	r5, #0
   81f12:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   81f16:	4620      	mov	r0, r4
   81f18:	4798      	blx	r3
   81f1a:	2000      	movs	r0, #0
   81f1c:	bd38      	pop	{r3, r4, r5, pc}
	...

00081f20 <raise>:
   81f20:	4b02      	ldr	r3, [pc, #8]	; (81f2c <raise+0xc>)
   81f22:	4601      	mov	r1, r0
   81f24:	6818      	ldr	r0, [r3, #0]
   81f26:	f7ff bfd2 	b.w	81ece <_raise_r>
   81f2a:	bf00      	nop
   81f2c:	20000068 	.word	0x20000068

00081f30 <_kill_r>:
   81f30:	b538      	push	{r3, r4, r5, lr}
   81f32:	4c07      	ldr	r4, [pc, #28]	; (81f50 <_kill_r+0x20>)
   81f34:	2300      	movs	r3, #0
   81f36:	4605      	mov	r5, r0
   81f38:	4608      	mov	r0, r1
   81f3a:	4611      	mov	r1, r2
   81f3c:	6023      	str	r3, [r4, #0]
   81f3e:	f000 f813 	bl	81f68 <_kill>
   81f42:	1c43      	adds	r3, r0, #1
   81f44:	d102      	bne.n	81f4c <_kill_r+0x1c>
   81f46:	6823      	ldr	r3, [r4, #0]
   81f48:	b103      	cbz	r3, 81f4c <_kill_r+0x1c>
   81f4a:	602b      	str	r3, [r5, #0]
   81f4c:	bd38      	pop	{r3, r4, r5, pc}
   81f4e:	bf00      	nop
   81f50:	200002c8 	.word	0x200002c8

00081f54 <_getpid_r>:
   81f54:	f000 b800 	b.w	81f58 <_getpid>

00081f58 <_getpid>:
   81f58:	4b02      	ldr	r3, [pc, #8]	; (81f64 <_getpid+0xc>)
   81f5a:	2258      	movs	r2, #88	; 0x58
   81f5c:	601a      	str	r2, [r3, #0]
   81f5e:	f04f 30ff 	mov.w	r0, #4294967295
   81f62:	4770      	bx	lr
   81f64:	200002c8 	.word	0x200002c8

00081f68 <_kill>:
   81f68:	4b02      	ldr	r3, [pc, #8]	; (81f74 <_kill+0xc>)
   81f6a:	2258      	movs	r2, #88	; 0x58
   81f6c:	601a      	str	r2, [r3, #0]
   81f6e:	f04f 30ff 	mov.w	r0, #4294967295
   81f72:	4770      	bx	lr
   81f74:	200002c8 	.word	0x200002c8

00081f78 <_exit>:
   81f78:	e7fe      	b.n	81f78 <_exit>
   81f7a:	bf00      	nop

00081f7c <_ZL10font_small>:
   81f7c:	2840 0000 0000 0000 8000 0000 820e 81c3     @(..............
   81f8c:	a0f0 0000 4209 4326 9010 0000 0109 2182     .....B&C.......!
   81f9c:	9838 9f00 0104 9101 a440 8000 8084 f910     8.......@.......
   81fac:	a641 0000 e083 40e3 9c3c 0000 0780 2000     A......@<...... 
   81fbc:	c000 3c3e 0cc7 2000 c000 9210 0c0c 10c0     ..><... ........
   81fcc:	a060 8c08 0704 7120 bc10 1208 0183 9110     `..... q........
   81fdc:	9208 1104 0001 8890 9208 8e04 20c0 7960     ............. `y
   81fec:	9c70 3000 0200 2303 8020 0800 0206 2000     p..0...# ...... 
   81ffc:	8020 3f18 0109 9100 ac10 0424 8109 5100      ..?......$....Q
   8200c:	d410 043e 870e 3080 d410 8202 4484 4890     ..>....0.....D.H
   8201c:	aa08 821c 4483 8860 aa08 0000 0000 0000     .....D`.........
   8202c:	8000 0000 0306 4000 8000 0c14 8489 f0c2     .......@........
   8203c:	a248 122c 8449 2121 9248 1124 8387 2040     H.,.I.!!H.$...@ 
   8204c:	8a24 8912 4200 1090 8624 8612 4100 1060     $....B..$....A`.
   8205c:	8258 0000 0000 0000 8000 0000 0011 0000     X...............
   8206c:	8000 1254 078a 0000 8000 0c54 0206 0000     ..T.......T.....
   8207c:	8000 042a 0102 0000 8000 0a2a 0081 0000     ..*.......*.....
   8208c:	8000 8914 03c0 0000 8000 ffff ffff ffff     ................
   8209c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   820ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   820bc:	ffff                                        ..

000820be <_ZL10font_large>:
   820be:	4038 0000 0000 0000 0000 0000 0000 0000     8@..............
	...
   820de:	1800 7e3c 0030 0000 3c1c 3022 0000 1e00     ..<~0....<"0....
   820ee:	1066 0030 0000 661a 3808 0000 1800 1e60     f.0....f.8....`.
   820fe:	0038 0000 6018 3830 0000 1800 2060 0038     8....`08....` 8.
   8210e:	0000 3018 3820 0000 1800 6030 0038 0000     ...0 8....0`8...
   8211e:	3018 3460 0000 1800 6018 0034 007c 1818     .0`4.....`4.|...
   8212e:	3460 3e00 1800 6018 0034 0000 0c18 3460     `4.>...`4.....`4
   8213e:	0000 1800 600c 0032 0000 0c18 3260 0000     .....`2.....`2..
   8214e:	1800 6006 0032 0000 0618 3260 0000 1800     ...`2.....`2....
   8215e:	6006 0032 0000 0618 7e60 0000 1800 6206     .`2.....`~.....b
   8216e:	007e 0000 0618 3022 0000 7e00 227e 0030     ~....."0...~~"0.
   8217e:	0000 7e7e 301c 0000 0000 0000 0000 0000     ..~~.0..........
	...
   821b2:	0000 7e00 7e00 1818 0000 4046 2c62 3c24     ...~.~....F@b,$<
   821c2:	0600 6020 4246 003c 2006 4660 6642 1e00     .. `FB<.. `FBf..
   821d2:	3010 4246 0066 1030 4630 6642 2000 1818     .0FBf.0.0FBf. ..
   821e2:	4246 0066 1820 4618 6642 6000 1808 4246     FBf. ..FBf.`..FB
   821f2:	0060 0c60 4618 6064 6000 0c0c 5846 0060     `.`..Fd`.`..FX`.
   82202:	0460 460c 6040 6000 0c04 4046 0030 0660     `..F@`.`..F@0.`.
   82212:	2c0c 3040 6000 0c1e 4018 0018 2660 340c     .,@0.`...@..`&.4
   82222:	1840 6000 0c42 4062 0018 4260 620c 1840     @..`B.b@..`B.b@.
   82232:	6000 0c42 4062 0018 4260 620c 1840 6000     .`B.b@..`B.b@..`
   82242:	1c42 4062 0018 4262 620e 0044 2200 0c42     B.b@..bB.bD.."B.
   82252:	2462 0000 2422 340c 1824 1c00 0c18 1818     b$.."$.4$.......
   82262:	0018 0000 0000 0000 0000 0000 0000 0000     ................
	...

00082280 <_ZN8Encoders5bPinsE>:
   82280:	000e 0000 0000 0000 0002 0000 0006 0000     ................

00082290 <_ZN8Encoders6aPortsE>:
   82290:	0001 0303 0000 0000                         ........

00082298 <_ZTV8Encoders>:
	...
   822a0:	08ed 0008 08c5 0008 08c9 0008 08cd 0008     ................
   822b0:	08e7 0008 0000 0000                         ........

000822b8 <_ZN8Encoders6bPortsE>:
   822b8:	0300 0303                                   ....

000822bc <_ZN8Encoders5aPinsE>:
   822bc:	001a 0000 000f 0000 0001 0000 0003 0000     ................
   822cc:	0000 0000                                   ....

000822d0 <_ZTV3SPI>:
	...
   822d8:	0ad9 0008 0ab9 0008 0b69 0008 0ad5 0008     ........i.......
   822e8:	0b55 0008 0000 0000                         U.......

000822f0 <_ZTV7SSD1305>:
	...
   822f8:	0bf9 0008 0bb1 0008 0eb1 0008 0bb5 0008     ................
   82308:	0bb9 0008 0000 0000 6568 6c6c 0a6f 6f77     ........hello.wo
   82318:	6c72 2164 0000 0000 6f6c 0067 0000 0000     rld!....log.....
   82328:	0043 0000                                   C...

0008232c <_init>:
   8232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8232e:	bf00      	nop
   82330:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82332:	bc08      	pop	{r3}
   82334:	469e      	mov	lr, r3
   82336:	4770      	bx	lr

00082338 <__init_array_start>:
   82338:	00080119 	.word	0x00080119

0008233c <_fini>:
   8233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8233e:	bf00      	nop
   82340:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82342:	bc08      	pop	{r3}
   82344:	469e      	mov	lr, r3
   82346:	4770      	bx	lr

00082348 <__fini_array_start>:
   82348:	000800f5 	.word	0x000800f5
