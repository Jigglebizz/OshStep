
OshStep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eb8  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00081eb8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  20000068  00081f20  00010068  2**2
                  ALLOC
  3 .stack        00009004  200000e4  00081f9c  00010068  2**0
                  ALLOC
  4 .heap         00002000  200090e8  0008afa0  00010068  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010091  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008194  00000000  00000000  000100ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021c0  00000000  00000000  00018280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000021c4  00000000  00000000  0001a440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000348  00000000  00000000  0001c604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d0  00000000  00000000  0001c94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001382c  00000000  00000000  0001ce1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000050f1  00000000  00000000  00030648  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056cd7  00000000  00000000  00035739  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000c4c  00000000  00000000  0008c410  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  0008d05c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000076  00000000  00000000  0008d098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200090e8 	.word	0x200090e8
   80004:	0008014d 	.word	0x0008014d
   80008:	00080149 	.word	0x00080149
   8000c:	00080149 	.word	0x00080149
   80010:	00080149 	.word	0x00080149
   80014:	00080149 	.word	0x00080149
   80018:	00080149 	.word	0x00080149
	...
   8002c:	00080149 	.word	0x00080149
   80030:	00080149 	.word	0x00080149
   80034:	00000000 	.word	0x00000000
   80038:	00080149 	.word	0x00080149
   8003c:	00080149 	.word	0x00080149
   80040:	00080149 	.word	0x00080149
   80044:	00080149 	.word	0x00080149
   80048:	00080149 	.word	0x00080149
   8004c:	00080149 	.word	0x00080149
   80050:	00080149 	.word	0x00080149
   80054:	00080149 	.word	0x00080149
   80058:	00080149 	.word	0x00080149
   8005c:	00080149 	.word	0x00080149
   80060:	00080149 	.word	0x00080149
   80064:	00080149 	.word	0x00080149
   80068:	00000000 	.word	0x00000000
   8006c:	00080149 	.word	0x00080149
   80070:	00080149 	.word	0x00080149
   80074:	00080149 	.word	0x00080149
   80078:	00080149 	.word	0x00080149
	...
   80084:	00080149 	.word	0x00080149
   80088:	00080149 	.word	0x00080149
   8008c:	00080149 	.word	0x00080149
   80090:	00080149 	.word	0x00080149
   80094:	00080149 	.word	0x00080149
   80098:	00080149 	.word	0x00080149
   8009c:	00080149 	.word	0x00080149
   800a0:	00080149 	.word	0x00080149
   800a4:	00000000 	.word	0x00000000
   800a8:	00080149 	.word	0x00080149
   800ac:	00080245 	.word	0x00080245
   800b0:	00080149 	.word	0x00080149
   800b4:	00080149 	.word	0x00080149
   800b8:	00080149 	.word	0x00080149
   800bc:	00080149 	.word	0x00080149
   800c0:	00080149 	.word	0x00080149
   800c4:	00080149 	.word	0x00080149
   800c8:	00080149 	.word	0x00080149
   800cc:	00080149 	.word	0x00080149
   800d0:	00080149 	.word	0x00080149
   800d4:	00080149 	.word	0x00080149
   800d8:	00080149 	.word	0x00080149
   800dc:	00080149 	.word	0x00080149
   800e0:	00080149 	.word	0x00080149
   800e4:	00080149 	.word	0x00080149
   800e8:	00080149 	.word	0x00080149
   800ec:	00080149 	.word	0x00080149
   800f0:	00080149 	.word	0x00080149

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000068 	.word	0x20000068
   80110:	00000000 	.word	0x00000000
   80114:	00081eb8 	.word	0x00081eb8

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00081eb8 	.word	0x00081eb8
   8013c:	2000006c 	.word	0x2000006c
   80140:	00081eb8 	.word	0x00081eb8
   80144:	00000000 	.word	0x00000000

00080148 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80148:	e7fe      	b.n	80148 <Dummy_Handler>
	...

0008014c <Reset_Handler>:

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
   8014c:	4b12      	ldr	r3, [pc, #72]	; (80198 <Reset_Handler+0x4c>)
   8014e:	4a13      	ldr	r2, [pc, #76]	; (8019c <Reset_Handler+0x50>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80150:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
   80152:	4293      	cmp	r3, r2
   80154:	461c      	mov	r4, r3
   80156:	d001      	beq.n	8015c <Reset_Handler+0x10>
   80158:	2300      	movs	r3, #0
   8015a:	e001      	b.n	80160 <Reset_Handler+0x14>
   8015c:	4b10      	ldr	r3, [pc, #64]	; (801a0 <Reset_Handler+0x54>)
   8015e:	e007      	b.n	80170 <Reset_Handler+0x24>
                for (; pDest < &_erelocate;) {
   80160:	4910      	ldr	r1, [pc, #64]	; (801a4 <Reset_Handler+0x58>)
   80162:	18d0      	adds	r0, r2, r3
   80164:	4288      	cmp	r0, r1
   80166:	d2f9      	bcs.n	8015c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80168:	58e1      	ldr	r1, [r4, r3]
   8016a:	50d1      	str	r1, [r2, r3]
   8016c:	3304      	adds	r3, #4
   8016e:	e7f7      	b.n	80160 <Reset_Handler+0x14>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80170:	4a0d      	ldr	r2, [pc, #52]	; (801a8 <Reset_Handler+0x5c>)
   80172:	4293      	cmp	r3, r2
   80174:	d203      	bcs.n	8017e <Reset_Handler+0x32>
                *pDest++ = 0;
   80176:	2200      	movs	r2, #0
   80178:	f843 2b04 	str.w	r2, [r3], #4
   8017c:	e7f8      	b.n	80170 <Reset_Handler+0x24>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8017e:	4b0b      	ldr	r3, [pc, #44]	; (801ac <Reset_Handler+0x60>)
   80180:	4a0b      	ldr	r2, [pc, #44]	; (801b0 <Reset_Handler+0x64>)
   80182:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80186:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8018a:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   8018c:	4b09      	ldr	r3, [pc, #36]	; (801b4 <Reset_Handler+0x68>)
   8018e:	4798      	blx	r3

        /* Branch to main function */
        main();
   80190:	4b09      	ldr	r3, [pc, #36]	; (801b8 <Reset_Handler+0x6c>)
   80192:	4798      	blx	r3
   80194:	e7fe      	b.n	80194 <Reset_Handler+0x48>
   80196:	bf00      	nop
   80198:	00081eb8 	.word	0x00081eb8
   8019c:	20000000 	.word	0x20000000
   801a0:	20000068 	.word	0x20000068
   801a4:	20000068 	.word	0x20000068
   801a8:	200000e4 	.word	0x200000e4
   801ac:	00080000 	.word	0x00080000
   801b0:	e000ed00 	.word	0xe000ed00
   801b4:	0008112d 	.word	0x0008112d
   801b8:	00081021 	.word	0x00081021

000801bc <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801bc:	4a1a      	ldr	r2, [pc, #104]	; (80228 <SystemInit+0x6c>)
   801be:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801c2:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801c8:	4b18      	ldr	r3, [pc, #96]	; (8022c <SystemInit+0x70>)
   801ca:	6a1a      	ldr	r2, [r3, #32]
   801cc:	01d2      	lsls	r2, r2, #7
   801ce:	d502      	bpl.n	801d6 <SystemInit+0x1a>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801d0:	4a17      	ldr	r2, [pc, #92]	; (80230 <SystemInit+0x74>)
   801d2:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801d4:	e005      	b.n	801e2 <SystemInit+0x26>
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801d6:	4a17      	ldr	r2, [pc, #92]	; (80234 <SystemInit+0x78>)
   801d8:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   801dc:	07d0      	lsls	r0, r2, #31
   801de:	d5fc      	bpl.n	801da <SystemInit+0x1e>
   801e0:	e7f6      	b.n	801d0 <SystemInit+0x14>
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801e2:	6e99      	ldr	r1, [r3, #104]	; 0x68
   801e4:	4a11      	ldr	r2, [pc, #68]	; (8022c <SystemInit+0x70>)
   801e6:	03c9      	lsls	r1, r1, #15
   801e8:	d5fb      	bpl.n	801e2 <SystemInit+0x26>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   801ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
   801ec:	f021 0103 	bic.w	r1, r1, #3
   801f0:	f041 0101 	orr.w	r1, r1, #1
   801f4:	6311      	str	r1, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   801f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   801f8:	0712      	lsls	r2, r2, #28
   801fa:	d5fc      	bpl.n	801f6 <SystemInit+0x3a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   801fc:	490e      	ldr	r1, [pc, #56]	; (80238 <SystemInit+0x7c>)
   801fe:	4a0b      	ldr	r2, [pc, #44]	; (8022c <SystemInit+0x70>)
   80200:	6291      	str	r1, [r2, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80202:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   80204:	0790      	lsls	r0, r2, #30
   80206:	d5fc      	bpl.n	80202 <SystemInit+0x46>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a08      	ldr	r2, [pc, #32]	; (8022c <SystemInit+0x70>)
   8020a:	2111      	movs	r1, #17
   8020c:	6311      	str	r1, [r2, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8020e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   80210:	0711      	lsls	r1, r2, #28
   80212:	d5fc      	bpl.n	8020e <SystemInit+0x52>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80214:	4a05      	ldr	r2, [pc, #20]	; (8022c <SystemInit+0x70>)
   80216:	2112      	movs	r1, #18
   80218:	6311      	str	r1, [r2, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8021a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8021c:	0712      	lsls	r2, r2, #28
   8021e:	d5fc      	bpl.n	8021a <SystemInit+0x5e>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80220:	4a06      	ldr	r2, [pc, #24]	; (8023c <SystemInit+0x80>)
   80222:	4b07      	ldr	r3, [pc, #28]	; (80240 <SystemInit+0x84>)
   80224:	601a      	str	r2, [r3, #0]
   80226:	4770      	bx	lr
   80228:	400e0a00 	.word	0x400e0a00
   8022c:	400e0600 	.word	0x400e0600
   80230:	01370809 	.word	0x01370809
   80234:	00370809 	.word	0x00370809
   80238:	200d3f01 	.word	0x200d3f01
   8023c:	0501bd00 	.word	0x0501bd00
   80240:	20000000 	.word	0x20000000

00080244 <TC0_Handler>:
     // Reset counter (SWTRG) and enable counter clock(CLKEN)
     TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;

 }

 void TC0_Handler(void) {
   80244:	b508      	push	{r3, lr}
     __due_tc0_callback();
   80246:	4b02      	ldr	r3, [pc, #8]	; (80250 <TC0_Handler+0xc>)
   80248:	681b      	ldr	r3, [r3, #0]
   8024a:	4798      	blx	r3
   8024c:	bd08      	pop	{r3, pc}
   8024e:	bf00      	nop
   80250:	20000084 	.word	0x20000084

00080254 <_Z10pinSetMode4Porti4Mode>:
 }

 void pinSetMode(Port p, int pin, Mode m) {
    switch (m) {
   80254:	2a03      	cmp	r2, #3
   80256:	f200 8094 	bhi.w	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   8025a:	e8df f002 	tbb	[pc, r2]
   8025e:	3b02      	.short	0x3b02
   80260:	7557      	.short	0x7557
      case INPUT:
        switch (p) {
   80262:	2803      	cmp	r0, #3
   80264:	f200 808d 	bhi.w	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   80268:	e8df f000 	tbb	[pc, r0]
   8026c:	281c0e02 	.word	0x281c0e02
          case A:
            // Enable clock if it isn't enabled
            if (~(PMC->PMC_PCSR0 >> ID_PIOA) & 0x1)
   80270:	4b44      	ldr	r3, [pc, #272]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   80272:	699a      	ldr	r2, [r3, #24]
   80274:	0510      	lsls	r0, r2, #20
                PMC->PMC_PCER0 = 1<<ID_PIOA;
   80276:	bf5c      	itt	pl
   80278:	f44f 6200 	movpl.w	r2, #2048	; 0x800
   8027c:	611a      	strpl	r2, [r3, #16]
            PIOA->PIO_PER=1<<pin;
   8027e:	2301      	movs	r3, #1
   80280:	fa03 f101 	lsl.w	r1, r3, r1
   80284:	4b40      	ldr	r3, [pc, #256]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   80286:	e00a      	b.n	8029e <_Z10pinSetMode4Porti4Mode+0x4a>
            PIOA->PIO_ODR=1<<pin;
            break;
          case B:
            if (~(PMC->PMC_PCSR0 >> ID_PIOB) & 0x1)
   80288:	4b3e      	ldr	r3, [pc, #248]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   8028a:	699a      	ldr	r2, [r3, #24]
   8028c:	04d2      	lsls	r2, r2, #19
                PMC->PMC_PCER0 = 1<<ID_PIOB;
   8028e:	bf5c      	itt	pl
   80290:	f44f 5280 	movpl.w	r2, #4096	; 0x1000
   80294:	611a      	strpl	r2, [r3, #16]
            PIOB->PIO_PER=1<<pin;
   80296:	2301      	movs	r3, #1
   80298:	fa03 f101 	lsl.w	r1, r3, r1
   8029c:	4b3b      	ldr	r3, [pc, #236]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   8029e:	6019      	str	r1, [r3, #0]
            PIOB->PIO_ODR=1<<pin;
   802a0:	6159      	str	r1, [r3, #20]
            break;
   802a2:	4770      	bx	lr
          case C:
            if (~(PMC->PMC_PCSR0 >> ID_PIOC) & 0x1)
   802a4:	4b37      	ldr	r3, [pc, #220]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   802a6:	699a      	ldr	r2, [r3, #24]
   802a8:	0490      	lsls	r0, r2, #18
                PMC->PMC_PCER0 = 1<<ID_PIOC;
   802aa:	bf5c      	itt	pl
   802ac:	f44f 5200 	movpl.w	r2, #8192	; 0x2000
   802b0:	611a      	strpl	r2, [r3, #16]
            PIOC->PIO_PER=1<<pin;
   802b2:	2301      	movs	r3, #1
   802b4:	fa03 f101 	lsl.w	r1, r3, r1
   802b8:	4b35      	ldr	r3, [pc, #212]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   802ba:	e7f0      	b.n	8029e <_Z10pinSetMode4Porti4Mode+0x4a>
            PIOC->PIO_ODR=1<<pin;
            break;
          case D:
            if (~(PMC->PMC_PCSR0 >> ID_PIOD) & 0x1)
   802bc:	4b31      	ldr	r3, [pc, #196]	; (80384 <_Z10pinSetMode4Porti4Mode+0x130>)
   802be:	699a      	ldr	r2, [r3, #24]
   802c0:	0452      	lsls	r2, r2, #17
                PMC->PMC_PCER0 = 1<<ID_PIOD;
   802c2:	bf5c      	itt	pl
   802c4:	f44f 4280 	movpl.w	r2, #16384	; 0x4000
   802c8:	611a      	strpl	r2, [r3, #16]
            PIOD->PIO_PER=1<<pin;
   802ca:	2301      	movs	r3, #1
   802cc:	fa03 f101 	lsl.w	r1, r3, r1
   802d0:	4b30      	ldr	r3, [pc, #192]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   802d2:	e7e4      	b.n	8029e <_Z10pinSetMode4Porti4Mode+0x4a>
            PIOD->PIO_ODR=1<<pin;
            break;
        }
        break;
      case OUTPUT:
        switch (p) {
   802d4:	2803      	cmp	r0, #3
   802d6:	d854      	bhi.n	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   802d8:	e8df f000 	tbb	[pc, r0]
   802dc:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PER=1<<pin;
   802e0:	2301      	movs	r3, #1
   802e2:	fa03 f101 	lsl.w	r1, r3, r1
   802e6:	4b28      	ldr	r3, [pc, #160]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   802e8:	e00d      	b.n	80306 <_Z10pinSetMode4Porti4Mode+0xb2>
            PIOA->PIO_OER=1<<pin;
            break;
          case B:
            PIOB->PIO_PER=1<<pin;
   802ea:	2301      	movs	r3, #1
   802ec:	fa03 f101 	lsl.w	r1, r3, r1
   802f0:	4b26      	ldr	r3, [pc, #152]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   802f2:	e008      	b.n	80306 <_Z10pinSetMode4Porti4Mode+0xb2>
            PIOB->PIO_OER=1<<pin;
            break;
          case C:
            PIOC->PIO_PER=1<<pin;
   802f4:	2301      	movs	r3, #1
   802f6:	fa03 f101 	lsl.w	r1, r3, r1
   802fa:	4b25      	ldr	r3, [pc, #148]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   802fc:	e003      	b.n	80306 <_Z10pinSetMode4Porti4Mode+0xb2>
            PIOC->PIO_OER=1<<pin;
            break;
          case D:
            PIOD->PIO_PER=1<<pin;
   802fe:	2301      	movs	r3, #1
   80300:	fa03 f101 	lsl.w	r1, r3, r1
   80304:	4b23      	ldr	r3, [pc, #140]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   80306:	6019      	str	r1, [r3, #0]
            PIOD->PIO_OER=1<<pin;
   80308:	6119      	str	r1, [r3, #16]
            break;
   8030a:	4770      	bx	lr
        }
        break;
      case PERIPHERAL_A:
        switch (p) {
   8030c:	2803      	cmp	r0, #3
   8030e:	d838      	bhi.n	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   80310:	e8df f000 	tbb	[pc, r0]
   80314:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PDR=1<<pin;
   80318:	2301      	movs	r3, #1
   8031a:	fa03 f101 	lsl.w	r1, r3, r1
   8031e:	4b1a      	ldr	r3, [pc, #104]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   80320:	e00d      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOA->PIO_ABSR &= ~(1<<pin);
            break;
          case B:
            PIOB->PIO_PDR=1<<pin;
   80322:	2301      	movs	r3, #1
   80324:	fa03 f101 	lsl.w	r1, r3, r1
   80328:	4b18      	ldr	r3, [pc, #96]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   8032a:	e008      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOB->PIO_ABSR &= ~(1<<pin);
            break;
          case C:
            PIOC->PIO_PDR=1<<pin;
   8032c:	2301      	movs	r3, #1
   8032e:	fa03 f101 	lsl.w	r1, r3, r1
   80332:	4b17      	ldr	r3, [pc, #92]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   80334:	e003      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOC->PIO_ABSR &= ~(1<<pin);
            break;
          case D:
            PIOD->PIO_PDR=1<<pin;
   80336:	2301      	movs	r3, #1
   80338:	fa03 f101 	lsl.w	r1, r3, r1
   8033c:	4b15      	ldr	r3, [pc, #84]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   8033e:	6059      	str	r1, [r3, #4]
            PIOD->PIO_ABSR &= ~(1<<pin);
   80340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80342:	ea22 0101 	bic.w	r1, r2, r1
   80346:	e01b      	b.n	80380 <_Z10pinSetMode4Porti4Mode+0x12c>
            break;
        }
        break;
      case PERIPHERAL_B:
        switch (p) {
   80348:	2803      	cmp	r0, #3
   8034a:	d81a      	bhi.n	80382 <_Z10pinSetMode4Porti4Mode+0x12e>
   8034c:	e8df f000 	tbb	[pc, r0]
   80350:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PDR=1<<pin;
   80354:	2301      	movs	r3, #1
   80356:	fa03 f101 	lsl.w	r1, r3, r1
   8035a:	4b0b      	ldr	r3, [pc, #44]	; (80388 <_Z10pinSetMode4Porti4Mode+0x134>)
   8035c:	e00d      	b.n	8037a <_Z10pinSetMode4Porti4Mode+0x126>
            PIOA->PIO_ABSR |=1 <<pin;
            break;
          case B:
            PIOB->PIO_PDR=1<<pin;
   8035e:	2301      	movs	r3, #1
   80360:	fa03 f101 	lsl.w	r1, r3, r1
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <_Z10pinSetMode4Porti4Mode+0x138>)
   80366:	e008      	b.n	8037a <_Z10pinSetMode4Porti4Mode+0x126>
            PIOB->PIO_ABSR |= 1<<pin;
            break;
          case C:
            PIOC->PIO_PDR=1<<pin;
   80368:	2301      	movs	r3, #1
   8036a:	fa03 f101 	lsl.w	r1, r3, r1
   8036e:	4b08      	ldr	r3, [pc, #32]	; (80390 <_Z10pinSetMode4Porti4Mode+0x13c>)
   80370:	e003      	b.n	8037a <_Z10pinSetMode4Porti4Mode+0x126>
            PIOC->PIO_ABSR |= 1<<pin;
            break;
          case D:
            PIOD->PIO_PDR=1<<pin;
   80372:	2301      	movs	r3, #1
   80374:	fa03 f101 	lsl.w	r1, r3, r1
   80378:	4b06      	ldr	r3, [pc, #24]	; (80394 <_Z10pinSetMode4Porti4Mode+0x140>)
   8037a:	6059      	str	r1, [r3, #4]
            PIOD->PIO_ABSR |= 1<<pin;
   8037c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8037e:	4311      	orrs	r1, r2
   80380:	6719      	str	r1, [r3, #112]	; 0x70
   80382:	4770      	bx	lr
   80384:	400e0600 	.word	0x400e0600
   80388:	400e0e00 	.word	0x400e0e00
   8038c:	400e1000 	.word	0x400e1000
   80390:	400e1200 	.word	0x400e1200
   80394:	400e1400 	.word	0x400e1400

00080398 <_Z15pinEnablePullup4Porti>:
          break;
    }
 }

 void pinEnablePullup(Port p, int pin) {
    switch (p) {
   80398:	2803      	cmp	r0, #3
   8039a:	d817      	bhi.n	803cc <_Z15pinEnablePullup4Porti+0x34>
   8039c:	e8df f000 	tbb	[pc, r0]
   803a0:	110c0702 	.word	0x110c0702
      case A:
        PIOA->PIO_PUER=1<<pin;
   803a4:	2301      	movs	r3, #1
   803a6:	fa03 f101 	lsl.w	r1, r3, r1
   803aa:	4b09      	ldr	r3, [pc, #36]	; (803d0 <_Z15pinEnablePullup4Porti+0x38>)
   803ac:	e00d      	b.n	803ca <_Z15pinEnablePullup4Porti+0x32>
        break;
      case B:
        PIOB->PIO_PUER=1<<pin;
   803ae:	2301      	movs	r3, #1
   803b0:	fa03 f101 	lsl.w	r1, r3, r1
   803b4:	4b07      	ldr	r3, [pc, #28]	; (803d4 <_Z15pinEnablePullup4Porti+0x3c>)
   803b6:	e008      	b.n	803ca <_Z15pinEnablePullup4Porti+0x32>
        break;
      case C:
        PIOC->PIO_PUER=1<<pin;
   803b8:	2301      	movs	r3, #1
   803ba:	fa03 f101 	lsl.w	r1, r3, r1
   803be:	4b06      	ldr	r3, [pc, #24]	; (803d8 <_Z15pinEnablePullup4Porti+0x40>)
   803c0:	e003      	b.n	803ca <_Z15pinEnablePullup4Porti+0x32>
        break;
      case D:
        PIOD->PIO_PUER=1<<pin;
   803c2:	2301      	movs	r3, #1
   803c4:	fa03 f101 	lsl.w	r1, r3, r1
   803c8:	4b04      	ldr	r3, [pc, #16]	; (803dc <_Z15pinEnablePullup4Porti+0x44>)
   803ca:	6659      	str	r1, [r3, #100]	; 0x64
   803cc:	4770      	bx	lr
   803ce:	bf00      	nop
   803d0:	400e0e00 	.word	0x400e0e00
   803d4:	400e1000 	.word	0x400e1000
   803d8:	400e1200 	.word	0x400e1200
   803dc:	400e1400 	.word	0x400e1400

000803e0 <_Z16pinDisablePullup4Porti>:
        break;
    }
 }

 void pinDisablePullup(Port p, int pin) {
    switch (p) {
   803e0:	2803      	cmp	r0, #3
   803e2:	d817      	bhi.n	80414 <_Z16pinDisablePullup4Porti+0x34>
   803e4:	e8df f000 	tbb	[pc, r0]
   803e8:	110c0702 	.word	0x110c0702
      case A:
        PIOA->PIO_PUDR=1<<pin;
   803ec:	2301      	movs	r3, #1
   803ee:	fa03 f101 	lsl.w	r1, r3, r1
   803f2:	4b09      	ldr	r3, [pc, #36]	; (80418 <_Z16pinDisablePullup4Porti+0x38>)
   803f4:	e00d      	b.n	80412 <_Z16pinDisablePullup4Porti+0x32>
        break;
      case B:
        PIOB->PIO_PUDR=1<<pin;
   803f6:	2301      	movs	r3, #1
   803f8:	fa03 f101 	lsl.w	r1, r3, r1
   803fc:	4b07      	ldr	r3, [pc, #28]	; (8041c <_Z16pinDisablePullup4Porti+0x3c>)
   803fe:	e008      	b.n	80412 <_Z16pinDisablePullup4Porti+0x32>
        break;
      case C:
        PIOC->PIO_PUDR=1<<pin;
   80400:	2301      	movs	r3, #1
   80402:	fa03 f101 	lsl.w	r1, r3, r1
   80406:	4b06      	ldr	r3, [pc, #24]	; (80420 <_Z16pinDisablePullup4Porti+0x40>)
   80408:	e003      	b.n	80412 <_Z16pinDisablePullup4Porti+0x32>
        break;
      case D:
        PIOD->PIO_PUDR=1<<pin;
   8040a:	2301      	movs	r3, #1
   8040c:	fa03 f101 	lsl.w	r1, r3, r1
   80410:	4b04      	ldr	r3, [pc, #16]	; (80424 <_Z16pinDisablePullup4Porti+0x44>)
   80412:	6619      	str	r1, [r3, #96]	; 0x60
   80414:	4770      	bx	lr
   80416:	bf00      	nop
   80418:	400e0e00 	.word	0x400e0e00
   8041c:	400e1000 	.word	0x400e1000
   80420:	400e1200 	.word	0x400e1200
   80424:	400e1400 	.word	0x400e1400

00080428 <_Z12pinSetOutput4Portii>:
        break;
    }
 }

 void pinSetOutput(Port p, int pin, int level) {
    switch (level) {
   80428:	b1e2      	cbz	r2, 80464 <_Z12pinSetOutput4Portii+0x3c>
   8042a:	2a01      	cmp	r2, #1
   8042c:	d134      	bne.n	80498 <_Z12pinSetOutput4Portii+0x70>
      case HIGH:
        switch (p) {
   8042e:	2803      	cmp	r0, #3
   80430:	d832      	bhi.n	80498 <_Z12pinSetOutput4Portii+0x70>
   80432:	e8df f000 	tbb	[pc, r0]
   80436:	0702      	.short	0x0702
   80438:	110c      	.short	0x110c
          case A:
            PIOA->PIO_SODR=1<<pin;
   8043a:	2301      	movs	r3, #1
   8043c:	fa03 f101 	lsl.w	r1, r3, r1
   80440:	4b16      	ldr	r3, [pc, #88]	; (8049c <_Z12pinSetOutput4Portii+0x74>)
   80442:	e00d      	b.n	80460 <_Z12pinSetOutput4Portii+0x38>
            break;
          case B:
            PIOB->PIO_SODR=1<<pin;
   80444:	2301      	movs	r3, #1
   80446:	fa03 f101 	lsl.w	r1, r3, r1
   8044a:	4b15      	ldr	r3, [pc, #84]	; (804a0 <_Z12pinSetOutput4Portii+0x78>)
   8044c:	e008      	b.n	80460 <_Z12pinSetOutput4Portii+0x38>
            break;
          case C:
            PIOC->PIO_SODR=1<<pin;
   8044e:	2301      	movs	r3, #1
   80450:	fa03 f101 	lsl.w	r1, r3, r1
   80454:	4b13      	ldr	r3, [pc, #76]	; (804a4 <_Z12pinSetOutput4Portii+0x7c>)
   80456:	e003      	b.n	80460 <_Z12pinSetOutput4Portii+0x38>
            break;
          case D:
            PIOD->PIO_SODR=1<<pin;
   80458:	2301      	movs	r3, #1
   8045a:	fa03 f101 	lsl.w	r1, r3, r1
   8045e:	4b12      	ldr	r3, [pc, #72]	; (804a8 <_Z12pinSetOutput4Portii+0x80>)
   80460:	6319      	str	r1, [r3, #48]	; 0x30
            break;
   80462:	4770      	bx	lr
        }
        break;
      case LOW:
        switch (p) {
   80464:	2803      	cmp	r0, #3
   80466:	d817      	bhi.n	80498 <_Z12pinSetOutput4Portii+0x70>
   80468:	e8df f000 	tbb	[pc, r0]
   8046c:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_CODR=1<<pin;
   80470:	2301      	movs	r3, #1
   80472:	fa03 f101 	lsl.w	r1, r3, r1
   80476:	4b09      	ldr	r3, [pc, #36]	; (8049c <_Z12pinSetOutput4Portii+0x74>)
   80478:	e00d      	b.n	80496 <_Z12pinSetOutput4Portii+0x6e>
            break;
          case B:
            PIOB->PIO_CODR=1<<pin;
   8047a:	2301      	movs	r3, #1
   8047c:	fa03 f101 	lsl.w	r1, r3, r1
   80480:	4b07      	ldr	r3, [pc, #28]	; (804a0 <_Z12pinSetOutput4Portii+0x78>)
   80482:	e008      	b.n	80496 <_Z12pinSetOutput4Portii+0x6e>
            break;
          case C:
            PIOC->PIO_CODR=1<<pin;
   80484:	2301      	movs	r3, #1
   80486:	fa03 f101 	lsl.w	r1, r3, r1
   8048a:	4b06      	ldr	r3, [pc, #24]	; (804a4 <_Z12pinSetOutput4Portii+0x7c>)
   8048c:	e003      	b.n	80496 <_Z12pinSetOutput4Portii+0x6e>
            break;
          case D:
            PIOD->PIO_CODR=1<<pin;
   8048e:	2301      	movs	r3, #1
   80490:	fa03 f101 	lsl.w	r1, r3, r1
   80494:	4b04      	ldr	r3, [pc, #16]	; (804a8 <_Z12pinSetOutput4Portii+0x80>)
   80496:	6359      	str	r1, [r3, #52]	; 0x34
   80498:	4770      	bx	lr
   8049a:	bf00      	nop
   8049c:	400e0e00 	.word	0x400e0e00
   804a0:	400e1000 	.word	0x400e1000
   804a4:	400e1200 	.word	0x400e1200
   804a8:	400e1400 	.word	0x400e1400

000804ac <_Z12pinReadInput4Porti>:
    }
    return -1;
 }

 int pinReadInput(Port p, int pin) {
    switch (p) {
   804ac:	2803      	cmp	r0, #3
   804ae:	d80f      	bhi.n	804d0 <_Z12pinReadInput4Porti+0x24>
   804b0:	e8df f000 	tbb	[pc, r0]
   804b4:	08060402 	.word	0x08060402
      case A:
        return (PIOA->PIO_PDSR >> pin) & 0x1;
   804b8:	4b07      	ldr	r3, [pc, #28]	; (804d8 <_Z12pinReadInput4Porti+0x2c>)
   804ba:	e004      	b.n	804c6 <_Z12pinReadInput4Porti+0x1a>
      case B:
        return (PIOB->PIO_PDSR >> pin) & 0x1;
   804bc:	4b07      	ldr	r3, [pc, #28]	; (804dc <_Z12pinReadInput4Porti+0x30>)
   804be:	e002      	b.n	804c6 <_Z12pinReadInput4Porti+0x1a>
      case C:
        return (PIOC->PIO_PDSR >> pin) & 0x1;
   804c0:	4b07      	ldr	r3, [pc, #28]	; (804e0 <_Z12pinReadInput4Porti+0x34>)
   804c2:	e000      	b.n	804c6 <_Z12pinReadInput4Porti+0x1a>
      case D:
        return (PIOD->PIO_PDSR >> pin) & 0x1;
   804c4:	4b07      	ldr	r3, [pc, #28]	; (804e4 <_Z12pinReadInput4Porti+0x38>)
   804c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   804c8:	40c8      	lsrs	r0, r1
   804ca:	f000 0001 	and.w	r0, r0, #1
   804ce:	4770      	bx	lr
    }
    return -1;
   804d0:	f04f 30ff 	mov.w	r0, #4294967295
   804d4:	4770      	bx	lr
   804d6:	bf00      	nop
   804d8:	400e0e00 	.word	0x400e0e00
   804dc:	400e1000 	.word	0x400e1000
   804e0:	400e1200 	.word	0x400e1200
   804e4:	400e1400 	.word	0x400e1400

000804e8 <_ZN7SSD13058InstanceEv>:

    SSD1305() {};
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
   804e8:	b510      	push	{r4, lr}
        static SSD1305 instance;
   804ea:	4c08      	ldr	r4, [pc, #32]	; (8050c <_ZN7SSD13058InstanceEv+0x24>)
   804ec:	6823      	ldr	r3, [r4, #0]
   804ee:	07db      	lsls	r3, r3, #31
   804f0:	d409      	bmi.n	80506 <_ZN7SSD13058InstanceEv+0x1e>
   804f2:	4620      	mov	r0, r4
   804f4:	4b06      	ldr	r3, [pc, #24]	; (80510 <_ZN7SSD13058InstanceEv+0x28>)
   804f6:	4798      	blx	r3
   804f8:	b128      	cbz	r0, 80506 <_ZN7SSD13058InstanceEv+0x1e>
    static const Port resPort   =  B;
    static const int  resPin    = 25;
    static const Port dcPort    =  C;
    static const int  dcPin     = 28;

    SSD1305() {};
   804fa:	4b06      	ldr	r3, [pc, #24]	; (80514 <_ZN7SSD13058InstanceEv+0x2c>)
   804fc:	4a06      	ldr	r2, [pc, #24]	; (80518 <_ZN7SSD13058InstanceEv+0x30>)
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
        static SSD1305 instance;
   804fe:	4620      	mov	r0, r4
    static const Port resPort   =  B;
    static const int  resPin    = 25;
    static const Port dcPort    =  C;
    static const int  dcPin     = 28;

    SSD1305() {};
   80500:	601a      	str	r2, [r3, #0]
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
        static SSD1305 instance;
   80502:	4b06      	ldr	r3, [pc, #24]	; (8051c <_ZN7SSD13058InstanceEv+0x34>)
   80504:	4798      	blx	r3
        return instance;
    };
   80506:	4803      	ldr	r0, [pc, #12]	; (80514 <_ZN7SSD13058InstanceEv+0x2c>)
   80508:	bd10      	pop	{r4, pc}
   8050a:	bf00      	nop
   8050c:	2000008c 	.word	0x2000008c
   80510:	000810fd 	.word	0x000810fd
   80514:	20000088 	.word	0x20000088
   80518:	00081e38 	.word	0x00081e38
   8051c:	00081119 	.word	0x00081119

00080520 <_ZN7DisplayC1Ev>:
#include "driver/SSD1305.h"
#include "../assets/images.h"

#include <math.h>

Display::Display() {
   80520:	b530      	push	{r4, r5, lr}
   80522:	4d0f      	ldr	r5, [pc, #60]	; (80560 <_ZN7DisplayC1Ev+0x40>)
   80524:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
   80528:	4604      	mov	r4, r0
   8052a:	47a8      	blx	r5
    ssdp = SSD1305Params();
   8052c:	4668      	mov	r0, sp
   8052e:	47a8      	blx	r5
   80530:	f44f 7200 	mov.w	r2, #512	; 0x200
   80534:	4669      	mov	r1, sp
   80536:	4620      	mov	r0, r4
   80538:	4b0a      	ldr	r3, [pc, #40]	; (80564 <_ZN7DisplayC1Ev+0x44>)
   8053a:	4798      	blx	r3
   8053c:	4668      	mov	r0, sp
   8053e:	4b0a      	ldr	r3, [pc, #40]	; (80568 <_ZN7DisplayC1Ev+0x48>)
   80540:	4798      	blx	r3
    ssdp.clear(PIXEL_OFF);
   80542:	4620      	mov	r0, r4
   80544:	2100      	movs	r1, #0
   80546:	4b09      	ldr	r3, [pc, #36]	; (8056c <_ZN7DisplayC1Ev+0x4c>)
   80548:	4798      	blx	r3
    SSD1305::Instance().open(NULL);
   8054a:	4b09      	ldr	r3, [pc, #36]	; (80570 <_ZN7DisplayC1Ev+0x50>)
   8054c:	4798      	blx	r3
   8054e:	6803      	ldr	r3, [r0, #0]
   80550:	2100      	movs	r1, #0
   80552:	681b      	ldr	r3, [r3, #0]
   80554:	4798      	blx	r3
}
   80556:	4620      	mov	r0, r4
   80558:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   8055c:	bd30      	pop	{r4, r5, pc}
   8055e:	bf00      	nop
   80560:	000808a9 	.word	0x000808a9
   80564:	00081199 	.word	0x00081199
   80568:	000808ab 	.word	0x000808ab
   8056c:	000808eb 	.word	0x000808eb
   80570:	000804e9 	.word	0x000804e9

00080574 <_ZN7DisplayD1Ev>:

Display::~Display() {
   80574:	b538      	push	{r3, r4, r5, lr}
    delete &ssdp;
   80576:	4604      	mov	r4, r0
   80578:	4d04      	ldr	r5, [pc, #16]	; (8058c <_ZN7DisplayD1Ev+0x18>)
   8057a:	b118      	cbz	r0, 80584 <_ZN7DisplayD1Ev+0x10>
   8057c:	47a8      	blx	r5
   8057e:	4620      	mov	r0, r4
   80580:	4b03      	ldr	r3, [pc, #12]	; (80590 <_ZN7DisplayD1Ev+0x1c>)
   80582:	4798      	blx	r3
}
   80584:	4620      	mov	r0, r4
   80586:	47a8      	blx	r5
   80588:	4620      	mov	r0, r4
   8058a:	bd38      	pop	{r3, r4, r5, pc}
   8058c:	000808ab 	.word	0x000808ab
   80590:	000810f5 	.word	0x000810f5

00080594 <_ZN7Display8drawTextEhh4FontPKc>:

void Display::drawBitmap( Bitmap &bmp) {
    bmp.draw(ssdp);
}

void Display::drawText( uint8_t x, uint8_t y, Font f, const char* str) {
   80594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int glyph_w, glyph_h;
    uint8_t x_origin = x;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
   80598:	2b01      	cmp	r3, #1

void Display::drawBitmap( Bitmap &bmp) {
    bmp.draw(ssdp);
}

void Display::drawText( uint8_t x, uint8_t y, Font f, const char* str) {
   8059a:	b08b      	sub	sp, #44	; 0x2c
   8059c:	9003      	str	r0, [sp, #12]
   8059e:	4688      	mov	r8, r1
   805a0:	4617      	mov	r7, r2
    int glyph_w, glyph_h;
    uint8_t x_origin = x;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
   805a2:	d103      	bne.n	805ac <_ZN7Display8drawTextEhh4FontPKc+0x18>
        bitmap_raw = font_large;
   805a4:	492f      	ldr	r1, [pc, #188]	; (80664 <_ZN7Display8drawTextEhh4FontPKc+0xd0>)
        glyph_w = 8;
        glyph_h = 32;
   805a6:	2520      	movs	r5, #32
    uint8_t x_origin = x;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
        bitmap_raw = font_large;
        glyph_w = 8;
   805a8:	2408      	movs	r4, #8
   805aa:	e002      	b.n	805b2 <_ZN7Display8drawTextEhh4FontPKc+0x1e>
        glyph_h = 32;
    } else {    // default is SMALL_FONT
        bitmap_raw = font_small;
        glyph_w = 7;
        glyph_h = 7;
   805ac:	2507      	movs	r5, #7
    if (f == LARGE_FONT) {
        bitmap_raw = font_large;
        glyph_w = 8;
        glyph_h = 32;
    } else {    // default is SMALL_FONT
        bitmap_raw = font_small;
   805ae:	492e      	ldr	r1, [pc, #184]	; (80668 <_ZN7Display8drawTextEhh4FontPKc+0xd4>)
        glyph_w = 7;
   805b0:	462c      	mov	r4, r5
        glyph_h = 7;
    }

    Bitmap bmp(bitmap_raw);
   805b2:	4b2e      	ldr	r3, [pc, #184]	; (8066c <_ZN7Display8drawTextEhh4FontPKc+0xd8>)
   805b4:	a805      	add	r0, sp, #20
   805b6:	4798      	blx	r3

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
   805b8:	9b08      	ldr	r3, [sp, #32]
   805ba:	fb93 f3f4 	sdiv	r3, r3, r4
   805be:	fb04 f903 	mul.w	r9, r4, r3
   805c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   805c4:	f103 3aff 	add.w	sl, r3, #4294967295
        else if (str[i] >= 97 && str[i] <= 122) glyphPos = str[i] - 83; // a-z
        else                                    glyphPos = 12;          // ?
        
        // If this is a newline
        if (str[i] == 10) { 
            x = x_origin;
   805c8:	4646      	mov	r6, r8

    Bitmap bmp(bitmap_raw);

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
    
    for (int i = 0; str[i] != 0; i++) {
   805ca:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   805ce:	2b00      	cmp	r3, #0
   805d0:	d044      	beq.n	8065c <_ZN7Display8drawTextEhh4FontPKc+0xc8>
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
   805d2:	2b20      	cmp	r3, #32
   805d4:	d01f      	beq.n	80616 <_ZN7Display8drawTextEhh4FontPKc+0x82>
        else if (str[i] == 45)                  glyphPos = 1;           // -
   805d6:	2b2d      	cmp	r3, #45	; 0x2d
   805d8:	d03a      	beq.n	80650 <_ZN7Display8drawTextEhh4FontPKc+0xbc>
        else if (str[i] >= 48 && str[i] <= 57)  glyphPos = str[i] - 46; // 0-9
   805da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   805de:	2a09      	cmp	r2, #9
   805e0:	d802      	bhi.n	805e8 <_ZN7Display8drawTextEhh4FontPKc+0x54>
   805e2:	f1a3 022e 	sub.w	r2, r3, #46	; 0x2e
   805e6:	e017      	b.n	80618 <_ZN7Display8drawTextEhh4FontPKc+0x84>
        else if (str[i] == 63)                  glyphPos = 12;          // ?
   805e8:	2b3f      	cmp	r3, #63	; 0x3f
   805ea:	d033      	beq.n	80654 <_ZN7Display8drawTextEhh4FontPKc+0xc0>
        else if (str[i] == 46)                  glyphPos = 13;          // .
   805ec:	2b2e      	cmp	r3, #46	; 0x2e
   805ee:	d033      	beq.n	80658 <_ZN7Display8drawTextEhh4FontPKc+0xc4>
        else if (str[i] >= 65 && str[i] <= 90)  glyphPos = str[i] - 51; // A-Z
   805f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   805f4:	2a19      	cmp	r2, #25
   805f6:	d802      	bhi.n	805fe <_ZN7Display8drawTextEhh4FontPKc+0x6a>
   805f8:	f1a3 0233 	sub.w	r2, r3, #51	; 0x33
   805fc:	e006      	b.n	8060c <_ZN7Display8drawTextEhh4FontPKc+0x78>
        else if (str[i] >= 97 && str[i] <= 122) glyphPos = str[i] - 83; // a-z
   805fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   80602:	2a19      	cmp	r2, #25
   80604:	bf94      	ite	ls
   80606:	f1a3 0253 	subls.w	r2, r3, #83	; 0x53
        else                                    glyphPos = 12;          // ?
   8060a:	220c      	movhi	r2, #12
        
        // If this is a newline
        if (str[i] == 10) { 
   8060c:	2b0a      	cmp	r3, #10
   8060e:	d103      	bne.n	80618 <_ZN7Display8drawTextEhh4FontPKc+0x84>
            x = x_origin;
            y += glyph_h;
   80610:	442f      	add	r7, r5
   80612:	b2ff      	uxtb	r7, r7
   80614:	e7d8      	b.n	805c8 <_ZN7Display8drawTextEhh4FontPKc+0x34>

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
    
    for (int i = 0; str[i] != 0; i++) {
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
   80616:	2200      	movs	r2, #0
        // If this is a newline
        if (str[i] == 10) { 
            x = x_origin;
            y += glyph_h;
        } else {
            bmp.setRectangle(   (glyphPos * glyph_w) % glyph_map_w,
   80618:	4362      	muls	r2, r4
   8061a:	fb92 f3f9 	sdiv	r3, r2, r9
   8061e:	fb09 2113 	mls	r1, r9, r3, r2
            (((glyphPos * glyph_w) / glyph_map_w) * glyph_h),
            glyph_w, glyph_h);
   80622:	436b      	muls	r3, r5
   80624:	fa5f fb84 	uxtb.w	fp, r4
   80628:	b2da      	uxtb	r2, r3
   8062a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80678 <_ZN7Display8drawTextEhh4FontPKc+0xe4>
   8062e:	a805      	add	r0, sp, #20
   80630:	b2c9      	uxtb	r1, r1
   80632:	465b      	mov	r3, fp
   80634:	9500      	str	r5, [sp, #0]
   80636:	47e0      	blx	ip
            bmp.moveTo(x, y);
   80638:	4631      	mov	r1, r6
   8063a:	a805      	add	r0, sp, #20
   8063c:	463a      	mov	r2, r7
   8063e:	4b0c      	ldr	r3, [pc, #48]	; (80670 <_ZN7Display8drawTextEhh4FontPKc+0xdc>)
   80640:	4798      	blx	r3
            bmp.draw(ssdp);
            x += glyph_w;
   80642:	445e      	add	r6, fp
        } else {
            bmp.setRectangle(   (glyphPos * glyph_w) % glyph_map_w,
            (((glyphPos * glyph_w) / glyph_map_w) * glyph_h),
            glyph_w, glyph_h);
            bmp.moveTo(x, y);
            bmp.draw(ssdp);
   80644:	a805      	add	r0, sp, #20
   80646:	9903      	ldr	r1, [sp, #12]
   80648:	4b0a      	ldr	r3, [pc, #40]	; (80674 <_ZN7Display8drawTextEhh4FontPKc+0xe0>)
   8064a:	4798      	blx	r3
            x += glyph_w;
   8064c:	b2f6      	uxtb	r6, r6
   8064e:	e7bc      	b.n	805ca <_ZN7Display8drawTextEhh4FontPKc+0x36>
    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
    
    for (int i = 0; str[i] != 0; i++) {
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
        else if (str[i] == 45)                  glyphPos = 1;           // -
   80650:	2201      	movs	r2, #1
   80652:	e7e1      	b.n	80618 <_ZN7Display8drawTextEhh4FontPKc+0x84>
        else if (str[i] >= 48 && str[i] <= 57)  glyphPos = str[i] - 46; // 0-9
        else if (str[i] == 63)                  glyphPos = 12;          // ?
   80654:	220c      	movs	r2, #12
   80656:	e7df      	b.n	80618 <_ZN7Display8drawTextEhh4FontPKc+0x84>
        else if (str[i] == 46)                  glyphPos = 13;          // .
   80658:	220d      	movs	r2, #13
   8065a:	e7dd      	b.n	80618 <_ZN7Display8drawTextEhh4FontPKc+0x84>
            bmp.moveTo(x, y);
            bmp.draw(ssdp);
            x += glyph_w;
        }
    }
}
   8065c:	b00b      	add	sp, #44	; 0x2c
   8065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80662:	bf00      	nop
   80664:	00081bc2 	.word	0x00081bc2
   80668:	00081a80 	.word	0x00081a80
   8066c:	00080695 	.word	0x00080695
   80670:	000806b9 	.word	0x000806b9
   80674:	000806cd 	.word	0x000806cd
   80678:	000806bf 	.word	0x000806bf

0008067c <_ZN7Display5paintEv>:

void Display::drawPixel(int x, int y) {
    ssdp.setPixel(x, y, PIXEL_ON);
}

void Display::paint() {
   8067c:	b510      	push	{r4, lr}
    SSD1305::Instance().write(&ssdp);
   8067e:	4b04      	ldr	r3, [pc, #16]	; (80690 <_ZN7Display5paintEv+0x14>)

void Display::drawPixel(int x, int y) {
    ssdp.setPixel(x, y, PIXEL_ON);
}

void Display::paint() {
   80680:	4604      	mov	r4, r0
    SSD1305::Instance().write(&ssdp);
   80682:	4798      	blx	r3
   80684:	6803      	ldr	r3, [r0, #0]
   80686:	4621      	mov	r1, r4
   80688:	689b      	ldr	r3, [r3, #8]
   8068a:	4798      	blx	r3
   8068c:	bd10      	pop	{r4, pc}
   8068e:	bf00      	nop
   80690:	000804e9 	.word	0x000804e9

00080694 <_ZN6BitmapC1EPKh>:

Bitmap::Bitmap(uint8_t x, uint8_t y, const unsigned char* bmp) {
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], x, y, bmp);
}

Bitmap::Bitmap(const unsigned char* bmp) {
   80694:	b530      	push	{r4, r5, lr}
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], 0, 0, bmp);
   80696:	780d      	ldrb	r5, [r1, #0]
   80698:	784c      	ldrb	r4, [r1, #1]
}

void Bitmap::init(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h, 
                  uint8_t x, uint8_t y, const unsigned char* bmp) {
    this->r_x = r_x;
   8069a:	2200      	movs	r2, #0
   8069c:	7082      	strb	r2, [r0, #2]
    this->r_y = r_y;
   8069e:	70c2      	strb	r2, [r0, #3]
    this->r_w = r_w;
   806a0:	7105      	strb	r5, [r0, #4]
    this->r_h = r_h;
   806a2:	7144      	strb	r4, [r0, #5]

    this->x = x;
   806a4:	7002      	strb	r2, [r0, #0]
    this->y = y;
   806a6:	7042      	strb	r2, [r0, #1]

    width = bmp[0];
   806a8:	780a      	ldrb	r2, [r1, #0]
    height = bmp[1];

    bitmap = &bmp[2];
   806aa:	3102      	adds	r1, #2
    this->r_h = r_h;

    this->x = x;
    this->y = y;

    width = bmp[0];
   806ac:	60c2      	str	r2, [r0, #12]
    height = bmp[1];
   806ae:	f811 2c01 	ldrb.w	r2, [r1, #-1]

    bitmap = &bmp[2];
   806b2:	6081      	str	r1, [r0, #8]

    this->x = x;
    this->y = y;

    width = bmp[0];
    height = bmp[1];
   806b4:	6102      	str	r2, [r0, #16]
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], x, y, bmp);
}

Bitmap::Bitmap(const unsigned char* bmp) {
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], 0, 0, bmp);
}
   806b6:	bd30      	pop	{r4, r5, pc}

000806b8 <_ZN6Bitmap6moveToEhh>:

    bitmap = &bmp[2];
}

void Bitmap::moveTo(uint8_t x, uint8_t y) {
    this->x = x;
   806b8:	7001      	strb	r1, [r0, #0]
    this->y = y;
   806ba:	7042      	strb	r2, [r0, #1]
   806bc:	4770      	bx	lr

000806be <_ZN6Bitmap12setRectangleEhhhh>:
}

void Bitmap::setRectangle(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h) {
    this->r_x = r_x;
    this->r_y = r_y;
    this->r_w = r_w;
   806be:	7103      	strb	r3, [r0, #4]
    this->r_h = r_h;
   806c0:	f89d 3000 	ldrb.w	r3, [sp]
uint8_t Bitmap::getY() {
    return y;
}

void Bitmap::setRectangle(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h) {
    this->r_x = r_x;
   806c4:	7081      	strb	r1, [r0, #2]
    this->r_y = r_y;
   806c6:	70c2      	strb	r2, [r0, #3]
    this->r_w = r_w;
    this->r_h = r_h;
   806c8:	7143      	strb	r3, [r0, #5]
   806ca:	4770      	bx	lr

000806cc <_ZN6Bitmap4drawER13SSD1305Params>:

uint8_t Bitmap::getRectH() {
    return r_h;
}

void Bitmap::draw(SSD1305Params &ssdp) {
   806cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   806d0:	4604      	mov	r4, r0
   806d2:	4688      	mov	r8, r1
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
   806d4:	2600      	movs	r6, #0
   806d6:	7963      	ldrb	r3, [r4, #5]
   806d8:	b2f5      	uxtb	r5, r6
   806da:	42ab      	cmp	r3, r5
   806dc:	d926      	bls.n	8072c <_ZN6Bitmap4drawER13SSD1305Params+0x60>
   806de:	2300      	movs	r3, #0
   806e0:	b2da      	uxtb	r2, r3
   806e2:	f103 0901 	add.w	r9, r3, #1
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
   806e6:	7923      	ldrb	r3, [r4, #4]
   806e8:	4293      	cmp	r3, r2
   806ea:	d91d      	bls.n	80728 <_ZN6Bitmap4drawER13SSD1305Params+0x5c>
            uint8_t disp_x = x + d_x;
   806ec:	7823      	ldrb	r3, [r4, #0]
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   806ee:	78a7      	ldrb	r7, [r4, #2]
   806f0:	68e1      	ldr	r1, [r4, #12]
   806f2:	4417      	add	r7, r2
}

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
   806f4:	441a      	add	r2, r3
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   806f6:	78e3      	ldrb	r3, [r4, #3]

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
            uint8_t disp_y = y + d_y;
   806f8:	f894 e001 	ldrb.w	lr, [r4, #1]

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   806fc:	442b      	add	r3, r5
   806fe:	fb01 7303 	mla	r3, r1, r3, r7
   80702:	2108      	movs	r1, #8
   80704:	fb93 f3f1 	sdiv	r3, r3, r1

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
                PIXEL_ON : PIXEL_OFF;
   80708:	68a1      	ldr	r1, [r4, #8]
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
   8070a:	f007 0707 	and.w	r7, r7, #7
                PIXEL_ON : PIXEL_OFF;
   8070e:	5ccb      	ldrb	r3, [r1, r3]

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
            uint8_t disp_y = y + d_y;
   80710:	44ae      	add	lr, r5

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
                PIXEL_ON : PIXEL_OFF;
   80712:	413b      	asrs	r3, r7

            ssdp.setPixel(disp_x, disp_y, pix_status);
   80714:	b2d1      	uxtb	r1, r2
   80716:	f003 0301 	and.w	r3, r3, #1
   8071a:	4640      	mov	r0, r8
   8071c:	fa5f f28e 	uxtb.w	r2, lr
   80720:	4f03      	ldr	r7, [pc, #12]	; (80730 <_ZN6Bitmap4drawER13SSD1305Params+0x64>)
   80722:	47b8      	blx	r7
   80724:	464b      	mov	r3, r9
   80726:	e7db      	b.n	806e0 <_ZN6Bitmap4drawER13SSD1305Params+0x14>
   80728:	3601      	adds	r6, #1
   8072a:	e7d4      	b.n	806d6 <_ZN6Bitmap4drawER13SSD1305Params+0xa>
   8072c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80730:	000808ad 	.word	0x000808ad

00080734 <_ZN8Encoders5closeEv>:
    return 0;
}

int Encoders::close() {
    return 0;
}
   80734:	2000      	movs	r0, #0
   80736:	4770      	bx	lr

00080738 <_ZN8Encoders5writeEPv>:

int Encoders::write(void* p) {
    return 0;
}
   80738:	2000      	movs	r0, #0
   8073a:	4770      	bx	lr

0008073c <_ZN8Encoders4readEv>:

void *Encoders::read() {
    return (void*)0;
}
   8073c:	2000      	movs	r0, #0
   8073e:	4770      	bx	lr

00080740 <_ZN8Encoders5ioctlEiPv>:

 void *Encoders::ioctl(int ioctl_t, void *params) {
    return (void*)0;
   80740:	2000      	movs	r0, #0
   80742:	4770      	bx	lr

00080744 <_ZN8Encoders4openEPv>:
Port const Encoders::aPorts[] = {B,  A,  D, D};
int  const Encoders::aPins[]  = {26, 15, 1, 3};
Port const Encoders::bPorts[] = {A,  D,  D, D};
int  const Encoders::bPins[]  = {14, 0,  2, 6};

int Encoders::open(void* p) {
   80744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80748:	b08b      	sub	sp, #44	; 0x2c
   8074a:	9001      	str	r0, [sp, #4]
    /* Set up our IO */
    for (int i = 0; i < 4; i++) {
   8074c:	2400      	movs	r4, #0
        // Enable, set to input
        pinSetMode(aPorts[i], aPins[i], INPUT);
   8074e:	4f47      	ldr	r7, [pc, #284]	; (8086c <_ZN8Encoders4openEPv+0x128>)
   80750:	4e47      	ldr	r6, [pc, #284]	; (80870 <_ZN8Encoders4openEPv+0x12c>)
   80752:	f814 b007 	ldrb.w	fp, [r4, r7]
   80756:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
   8075a:	4b46      	ldr	r3, [pc, #280]	; (80874 <_ZN8Encoders4openEPv+0x130>)
   8075c:	4658      	mov	r0, fp
   8075e:	4651      	mov	r1, sl
   80760:	2200      	movs	r2, #0
   80762:	9300      	str	r3, [sp, #0]
   80764:	4798      	blx	r3
        pinSetMode(bPorts[i], bPins[i], INPUT);
   80766:	4d44      	ldr	r5, [pc, #272]	; (80878 <_ZN8Encoders4openEPv+0x134>)
   80768:	f8df c134 	ldr.w	ip, [pc, #308]	; 808a0 <_ZN8Encoders4openEPv+0x15c>
   8076c:	f814 9005 	ldrb.w	r9, [r4, r5]
   80770:	f85c 8024 	ldr.w	r8, [ip, r4, lsl #2]
   80774:	9b00      	ldr	r3, [sp, #0]
   80776:	4648      	mov	r0, r9
   80778:	f8cd c000 	str.w	ip, [sp]
   8077c:	4641      	mov	r1, r8
   8077e:	2200      	movs	r2, #0
   80780:	4798      	blx	r3

        // Enable pull-ups
        pinEnablePullup(aPorts[i], aPins[i]);
   80782:	4658      	mov	r0, fp
   80784:	4651      	mov	r1, sl
   80786:	f8df a11c 	ldr.w	sl, [pc, #284]	; 808a4 <_ZN8Encoders4openEPv+0x160>
   8078a:	47d0      	blx	sl
        pinEnablePullup(bPorts[i], bPins[i]);
   8078c:	4648      	mov	r0, r9
   8078e:	4641      	mov	r1, r8
   80790:	47d0      	blx	sl
Port const Encoders::bPorts[] = {A,  D,  D, D};
int  const Encoders::bPins[]  = {14, 0,  2, 6};

int Encoders::open(void* p) {
    /* Set up our IO */
    for (int i = 0; i < 4; i++) {
   80792:	3401      	adds	r4, #1
   80794:	f8dd c000 	ldr.w	ip, [sp]
   80798:	2c04      	cmp	r4, #4
   8079a:	46b8      	mov	r8, r7
   8079c:	46b1      	mov	r9, r6
   8079e:	46aa      	mov	sl, r5
   807a0:	46e3      	mov	fp, ip
   807a2:	d1d4      	bne.n	8074e <_ZN8Encoders4openEPv+0xa>
        pinEnablePullup(aPorts[i], aPins[i]);
        pinEnablePullup(bPorts[i], bPins[i]);
    }

    /* Construct the state wheel */
    EncoderState *a = (EncoderState*)malloc(sizeof(EncoderState));
   807a4:	4f35      	ldr	r7, [pc, #212]	; (8087c <_ZN8Encoders4openEPv+0x138>)
   807a6:	200c      	movs	r0, #12
   807a8:	47b8      	blx	r7
   807aa:	4605      	mov	r5, r0
    EncoderState *b = (EncoderState*)malloc(sizeof(EncoderState));
   807ac:	200c      	movs	r0, #12
   807ae:	47b8      	blx	r7
   807b0:	4604      	mov	r4, r0
    EncoderState *c = (EncoderState*)malloc(sizeof(EncoderState));
   807b2:	200c      	movs	r0, #12
   807b4:	47b8      	blx	r7
   807b6:	4606      	mov	r6, r0
    EncoderState *d = (EncoderState*)malloc(sizeof(EncoderState));
   807b8:	200c      	movs	r0, #12
   807ba:	47b8      	blx	r7

    a->mask = 0x0;
    b->mask = 0x1;
   807bc:	2201      	movs	r2, #1
   807be:	7022      	strb	r2, [r4, #0]
    c->mask = 0x3;
   807c0:	2203      	movs	r2, #3
    EncoderState *a = (EncoderState*)malloc(sizeof(EncoderState));
    EncoderState *b = (EncoderState*)malloc(sizeof(EncoderState));
    EncoderState *c = (EncoderState*)malloc(sizeof(EncoderState));
    EncoderState *d = (EncoderState*)malloc(sizeof(EncoderState));

    a->mask = 0x0;
   807c2:	2300      	movs	r3, #0
    b->mask = 0x1;
    c->mask = 0x3;
   807c4:	7032      	strb	r2, [r6, #0]
    d->mask = 0x2;

    a->next = b;
    a->prev = d;
    b->next = c;
   807c6:	6066      	str	r6, [r4, #4]
    b->prev = a;
    c->next = d;
    c->prev = b;
   807c8:	60b4      	str	r4, [r6, #8]
    EncoderState *d = (EncoderState*)malloc(sizeof(EncoderState));

    a->mask = 0x0;
    b->mask = 0x1;
    c->mask = 0x3;
    d->mask = 0x2;
   807ca:	2202      	movs	r2, #2

    a->next = b;
    a->prev = d;
    b->next = c;
    b->prev = a;
    c->next = d;
   807cc:	6070      	str	r0, [r6, #4]
    c->prev = b;
    d->next = a;
    d->prev = c;
   807ce:	6086      	str	r6, [r0, #8]
   807d0:	9e01      	ldr	r6, [sp, #4]
    a->mask = 0x0;
    b->mask = 0x1;
    c->mask = 0x3;
    d->mask = 0x2;

    a->next = b;
   807d2:	606c      	str	r4, [r5, #4]
    a->prev = d;
    b->next = c;
    b->prev = a;
   807d4:	60a5      	str	r5, [r4, #8]
    EncoderState *a = (EncoderState*)malloc(sizeof(EncoderState));
    EncoderState *b = (EncoderState*)malloc(sizeof(EncoderState));
    EncoderState *c = (EncoderState*)malloc(sizeof(EncoderState));
    EncoderState *d = (EncoderState*)malloc(sizeof(EncoderState));

    a->mask = 0x0;
   807d6:	702b      	strb	r3, [r5, #0]
    b->mask = 0x1;
    c->mask = 0x3;
    d->mask = 0x2;
   807d8:	7002      	strb	r2, [r0, #0]

    a->next = b;
    a->prev = d;
   807da:	60a8      	str	r0, [r5, #8]
    b->next = c;
    b->prev = a;
    c->next = d;
    c->prev = b;
    d->next = a;
   807dc:	6045      	str	r5, [r0, #4]
    d->prev = c;

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
   807de:	461c      	mov	r4, r3
        // States are in the form of 0b000000ab
        uint8_t state = (pinReadInput(aPorts[i], aPins[i]) << 1) | pinReadInput(bPorts[i], bPins[i]);
   807e0:	4b27      	ldr	r3, [pc, #156]	; (80880 <_ZN8Encoders4openEPv+0x13c>)
   807e2:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
   807e6:	9300      	str	r3, [sp, #0]
   807e8:	f818 0004 	ldrb.w	r0, [r8, r4]
   807ec:	4798      	blx	r3
   807ee:	9b00      	ldr	r3, [sp, #0]
   807f0:	4607      	mov	r7, r0
   807f2:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
   807f6:	f81a 0004 	ldrb.w	r0, [sl, r4]
   807fa:	4798      	blx	r3
        
        // Cycle through the state wheel
        EncoderState *e = a;
        states[i] = NULL;
   807fc:	2300      	movs	r3, #0
    d->prev = c;

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
        // States are in the form of 0b000000ab
        uint8_t state = (pinReadInput(aPorts[i], aPins[i]) << 1) | pinReadInput(bPorts[i], bPins[i]);
   807fe:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
        
        // Cycle through the state wheel
        EncoderState *e = a;
        states[i] = NULL;
   80802:	60f3      	str	r3, [r6, #12]
    d->prev = c;

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
        // States are in the form of 0b000000ab
        uint8_t state = (pinReadInput(aPorts[i], aPins[i]) << 1) | pinReadInput(bPorts[i], bPins[i]);
   80804:	b2c2      	uxtb	r2, r0
        
        // Cycle through the state wheel
        EncoderState *e = a;
        states[i] = NULL;
   80806:	462b      	mov	r3, r5
        do {
            if (state == e->mask) {
   80808:	7819      	ldrb	r1, [r3, #0]
   8080a:	4291      	cmp	r1, r2
   8080c:	d101      	bne.n	80812 <_ZN8Encoders4openEPv+0xce>
                states[i] = e;
   8080e:	60f3      	str	r3, [r6, #12]
                break;
   80810:	e002      	b.n	80818 <_ZN8Encoders4openEPv+0xd4>
            }
            e = e->next;
   80812:	685b      	ldr	r3, [r3, #4]
        uint8_t state = (pinReadInput(aPorts[i], aPins[i]) << 1) | pinReadInput(bPorts[i], bPins[i]);
        
        // Cycle through the state wheel
        EncoderState *e = a;
        states[i] = NULL;
        do {
   80814:	42ab      	cmp	r3, r5
   80816:	d1f7      	bne.n	80808 <_ZN8Encoders4openEPv+0xc4>
            }
            e = e->next;
        } while (e != a);

        // Error checking
        if (states[i] == NULL) {
   80818:	68f3      	ldr	r3, [r6, #12]
   8081a:	b9cb      	cbnz	r3, 80850 <_ZN8Encoders4openEPv+0x10c>
    // Make this a singleton
    Reporting(Reporting const&);
    void operator=(Reporting const&);
  public:
    static Reporting &Instance() {
        static Reporting instance;
   8081c:	4f19      	ldr	r7, [pc, #100]	; (80884 <_ZN8Encoders4openEPv+0x140>)
            char panic_text[25];
            sprintf(panic_text, "Invalid state encoder %d", i);
   8081e:	4622      	mov	r2, r4
   80820:	4b19      	ldr	r3, [pc, #100]	; (80888 <_ZN8Encoders4openEPv+0x144>)
   80822:	a803      	add	r0, sp, #12
   80824:	4919      	ldr	r1, [pc, #100]	; (8088c <_ZN8Encoders4openEPv+0x148>)
   80826:	4798      	blx	r3
   80828:	683a      	ldr	r2, [r7, #0]
   8082a:	07d3      	lsls	r3, r2, #31
   8082c:	d40b      	bmi.n	80846 <_ZN8Encoders4openEPv+0x102>
   8082e:	4638      	mov	r0, r7
   80830:	4a17      	ldr	r2, [pc, #92]	; (80890 <_ZN8Encoders4openEPv+0x14c>)
   80832:	4790      	blx	r2
   80834:	b138      	cbz	r0, 80846 <_ZN8Encoders4openEPv+0x102>
enum Priority { PRIORITY_DEBUG, PRIORITY_PANIC};

class Reporting {
  private:
    Reporting() {
        srwp = (ShiftRegistersWriteParams*)malloc(sizeof(ShiftRegistersWriteParams));
   80836:	4a11      	ldr	r2, [pc, #68]	; (8087c <_ZN8Encoders4openEPv+0x138>)
   80838:	2008      	movs	r0, #8
   8083a:	4790      	blx	r2
   8083c:	4a15      	ldr	r2, [pc, #84]	; (80894 <_ZN8Encoders4openEPv+0x150>)
    // Make this a singleton
    Reporting(Reporting const&);
    void operator=(Reporting const&);
  public:
    static Reporting &Instance() {
        static Reporting instance;
   8083e:	4b16      	ldr	r3, [pc, #88]	; (80898 <_ZN8Encoders4openEPv+0x154>)
enum Priority { PRIORITY_DEBUG, PRIORITY_PANIC};

class Reporting {
  private:
    Reporting() {
        srwp = (ShiftRegistersWriteParams*)malloc(sizeof(ShiftRegistersWriteParams));
   80840:	6010      	str	r0, [r2, #0]
    // Make this a singleton
    Reporting(Reporting const&);
    void operator=(Reporting const&);
  public:
    static Reporting &Instance() {
        static Reporting instance;
   80842:	4638      	mov	r0, r7
   80844:	4798      	blx	r3
            Reporting::Instance().reportText(PRIORITY_PANIC, panic_text);
   80846:	4813      	ldr	r0, [pc, #76]	; (80894 <_ZN8Encoders4openEPv+0x150>)
   80848:	2101      	movs	r1, #1
   8084a:	aa03      	add	r2, sp, #12
   8084c:	4b13      	ldr	r3, [pc, #76]	; (8089c <_ZN8Encoders4openEPv+0x158>)
   8084e:	4798      	blx	r3
        }

        // And set encoder status
        status.relative_position[i] = 0;
   80850:	9a01      	ldr	r2, [sp, #4]
   80852:	2000      	movs	r0, #0
   80854:	eb02 0344 	add.w	r3, r2, r4, lsl #1
    c->prev = b;
    d->next = a;
    d->prev = c;

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
   80858:	3401      	adds	r4, #1
   8085a:	2c04      	cmp	r4, #4
            sprintf(panic_text, "Invalid state encoder %d", i);
            Reporting::Instance().reportText(PRIORITY_PANIC, panic_text);
        }

        // And set encoder status
        status.relative_position[i] = 0;
   8085c:	8098      	strh	r0, [r3, #4]
   8085e:	f106 0604 	add.w	r6, r6, #4
    c->prev = b;
    d->next = a;
    d->prev = c;

    /* Read values, assign states */
    for (int i = 0; i < 4; i++) {
   80862:	d1bd      	bne.n	807e0 <_ZN8Encoders4openEPv+0x9c>

        // And set encoder status
        status.relative_position[i] = 0;
    }
    return 0;
}
   80864:	b00b      	add	sp, #44	; 0x2c
   80866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8086a:	bf00      	nop
   8086c:	00081db0 	.word	0x00081db0
   80870:	00081ddc 	.word	0x00081ddc
   80874:	00080255 	.word	0x00080255
   80878:	00081dd8 	.word	0x00081dd8
   8087c:	00081179 	.word	0x00081179
   80880:	000804ad 	.word	0x000804ad
   80884:	20000094 	.word	0x20000094
   80888:	00081385 	.word	0x00081385
   8088c:	00081d84 	.word	0x00081d84
   80890:	000810fd 	.word	0x000810fd
   80894:	20000090 	.word	0x20000090
   80898:	00081119 	.word	0x00081119
   8089c:	00080f91 	.word	0x00080f91
   808a0:	00081da0 	.word	0x00081da0
   808a4:	00080399 	.word	0x00080399

000808a8 <_ZN13SSD1305ParamsC1Ev>:
#include "../SSD1305.h"

#include <stdlib.h>

SSD1305Params::SSD1305Params() {
}
   808a8:	4770      	bx	lr

000808aa <_ZN13SSD1305ParamsD1Ev>:

SSD1305Params::~SSD1305Params() {

}
   808aa:	4770      	bx	lr

000808ac <_ZN13SSD1305Params8setPixelEiii>:

void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
   808ac:	297f      	cmp	r1, #127	; 0x7f

SSD1305Params::~SSD1305Params() {

}

void SSD1305Params::setPixel(int x, int y, int val) {
   808ae:	b510      	push	{r4, lr}
    if (x >= 0 && x < width && y >= 0 && y < height) {
   808b0:	d81a      	bhi.n	808e8 <_ZN13SSD1305Params8setPixelEiii+0x3c>
   808b2:	2a1f      	cmp	r2, #31
   808b4:	d818      	bhi.n	808e8 <_ZN13SSD1305Params8setPixelEiii+0x3c>
   808b6:	f1c2 041f 	rsb	r4, r2, #31
   808ba:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   808be:	f002 0207 	and.w	r2, r2, #7
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
   808c2:	10e4      	asrs	r4, r4, #3
void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
   808c4:	2b01      	cmp	r3, #1
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
                    0x1 << ((pix_in_page - 1) - ( y % pix_in_page));
   808c6:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
   808ca:	f1c2 0207 	rsb	r2, r2, #7
void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
   808ce:	d104      	bne.n	808da <_ZN13SSD1305Params8setPixelEiii+0x2e>
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
                    0x1 << ((pix_in_page - 1) - ( y % pix_in_page));
   808d0:	4093      	lsls	r3, r2
   808d2:	5c42      	ldrb	r2, [r0, r1]
   808d4:	4313      	orrs	r3, r2
   808d6:	5443      	strb	r3, [r0, r1]
   808d8:	bd10      	pop	{r4, pc}
            else
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] &=
                   ~(0x1 << ((pix_in_page - 1) - (y % pix_in_page))); 
   808da:	2301      	movs	r3, #1
   808dc:	fa03 f202 	lsl.w	r2, r3, r2
   808e0:	5c43      	ldrb	r3, [r0, r1]
   808e2:	ea23 0202 	bic.w	r2, r3, r2
   808e6:	5442      	strb	r2, [r0, r1]
   808e8:	bd10      	pop	{r4, pc}

000808ea <_ZN13SSD1305Params5clearEi>:
        #endif
    }
}

void SSD1305Params::clear(int val) {
    for (int i = 0; i < visible_buffers; i++) {
   808ea:	2300      	movs	r3, #0
        if (val == PIXEL_ON)
   808ec:	2901      	cmp	r1, #1
            buffer[i] = 0xFF; // <<<< Problem is here
   808ee:	bf0c      	ite	eq
   808f0:	22ff      	moveq	r2, #255	; 0xff
        else
            buffer[i] = 0x00;
   808f2:	2200      	movne	r2, #0
   808f4:	54c2      	strb	r2, [r0, r3]
        #endif
    }
}

void SSD1305Params::clear(int val) {
    for (int i = 0; i < visible_buffers; i++) {
   808f6:	3301      	adds	r3, #1
   808f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   808fc:	d1f6      	bne.n	808ec <_ZN13SSD1305Params5clearEi+0x2>
        if (val == PIXEL_ON)
            buffer[i] = 0xFF; // <<<< Problem is here
        else
            buffer[i] = 0x00;
    }
   808fe:	4770      	bx	lr

00080900 <_ZN14ShiftRegisters5closeEv>:
    return 0;
}

int ShiftRegisters::close() {
    return 0;
}
   80900:	2000      	movs	r0, #0
   80902:	4770      	bx	lr

00080904 <_ZN14ShiftRegisters4readEv>:
    return 0;
}

void* ShiftRegisters::read() {
    return (void*)0;
}
   80904:	2000      	movs	r0, #0
   80906:	4770      	bx	lr

00080908 <_ZN14ShiftRegisters5ioctlEiPv>:

void* ShiftRegisters::ioctl(int ioctl_t, void* data) {
    return (void*)0;
   80908:	2000      	movs	r0, #0
   8090a:	4770      	bx	lr

0008090c <_ZN14ShiftRegisters4openEPv>:
#include "../../system.h"

#include <unistd.h>
#include <stdlib.h>

int ShiftRegisters::open( void* params) {
   8090c:	b510      	push	{r4, lr}

    // Open our shift register driver
    // Enable IO, set to output
    pinSetMode(seqSdPort,   seqSdPin,   OUTPUT);
   8090e:	2002      	movs	r0, #2
   80910:	4c22      	ldr	r4, [pc, #136]	; (8099c <_ZN14ShiftRegisters4openEPv+0x90>)
   80912:	2117      	movs	r1, #23
   80914:	2201      	movs	r2, #1
   80916:	47a0      	blx	r4
    pinSetMode(seqClkPort,  seqClkPin,  OUTPUT);
   80918:	2002      	movs	r0, #2
   8091a:	2118      	movs	r1, #24
   8091c:	2201      	movs	r2, #1
   8091e:	47a0      	blx	r4
    pinSetMode(seqOePort,   seqOePin,   OUTPUT);
   80920:	2002      	movs	r0, #2
   80922:	2119      	movs	r1, #25
   80924:	2201      	movs	r2, #1
   80926:	47a0      	blx	r4
    pinSetMode(funcSdPort,  funcSdPin,  OUTPUT);
   80928:	2002      	movs	r0, #2
   8092a:	211d      	movs	r1, #29
   8092c:	2201      	movs	r2, #1
   8092e:	47a0      	blx	r4
    pinSetMode(funcClkPort, funcClkPin, OUTPUT);
   80930:	2002      	movs	r0, #2
   80932:	2115      	movs	r1, #21
   80934:	2201      	movs	r2, #1
   80936:	47a0      	blx	r4
    pinSetMode(funcOePort,  funcOePin,  OUTPUT);
   80938:	2201      	movs	r2, #1
   8093a:	2002      	movs	r0, #2
   8093c:	2116      	movs	r1, #22
   8093e:	47a0      	blx	r4

    // Disable pull-ups
    pinDisablePullup(seqSdPort,   seqSdPin);
   80940:	4c17      	ldr	r4, [pc, #92]	; (809a0 <_ZN14ShiftRegisters4openEPv+0x94>)
   80942:	2002      	movs	r0, #2
   80944:	2117      	movs	r1, #23
   80946:	47a0      	blx	r4
    pinDisablePullup(seqClkPort,  seqClkPin);
   80948:	2002      	movs	r0, #2
   8094a:	2118      	movs	r1, #24
   8094c:	47a0      	blx	r4
    pinDisablePullup(seqOePort,   seqOePort);
   8094e:	2002      	movs	r0, #2
   80950:	4601      	mov	r1, r0
   80952:	47a0      	blx	r4
    pinDisablePullup(funcSdPort,  funcSdPin);
   80954:	2002      	movs	r0, #2
   80956:	211d      	movs	r1, #29
   80958:	47a0      	blx	r4
    pinDisablePullup(funcClkPort, funcClkPin);
   8095a:	2002      	movs	r0, #2
   8095c:	2115      	movs	r1, #21
   8095e:	47a0      	blx	r4
    pinDisablePullup(funcOePort,  funcOePin);
   80960:	2002      	movs	r0, #2
   80962:	2116      	movs	r1, #22
   80964:	47a0      	blx	r4

    // Set data and clock low, latch high
    pinSetOutput(seqSdPort,   seqSdPin,   LOW);
   80966:	4c0f      	ldr	r4, [pc, #60]	; (809a4 <_ZN14ShiftRegisters4openEPv+0x98>)
   80968:	2002      	movs	r0, #2
   8096a:	2117      	movs	r1, #23
   8096c:	2200      	movs	r2, #0
   8096e:	47a0      	blx	r4
    pinSetOutput(seqClkPort,  seqClkPin,  LOW);
   80970:	2002      	movs	r0, #2
   80972:	2118      	movs	r1, #24
   80974:	2200      	movs	r2, #0
   80976:	47a0      	blx	r4
    pinSetOutput(seqOePort,   seqOePin,   HIGH);
   80978:	2002      	movs	r0, #2
   8097a:	2119      	movs	r1, #25
   8097c:	2201      	movs	r2, #1
   8097e:	47a0      	blx	r4
    pinSetOutput(funcSdPort,  funcSdPin,  LOW);
   80980:	2002      	movs	r0, #2
   80982:	211d      	movs	r1, #29
   80984:	2200      	movs	r2, #0
   80986:	47a0      	blx	r4
    pinSetOutput(funcClkPort, funcClkPin, LOW);
   80988:	2002      	movs	r0, #2
   8098a:	2115      	movs	r1, #21
   8098c:	2200      	movs	r2, #0
   8098e:	47a0      	blx	r4
    pinSetOutput(funcOePort,  funcOePin,  HIGH);
   80990:	2002      	movs	r0, #2
   80992:	2116      	movs	r1, #22
   80994:	2201      	movs	r2, #1
   80996:	47a0      	blx	r4

    return 0;
}
   80998:	2000      	movs	r0, #0
   8099a:	bd10      	pop	{r4, pc}
   8099c:	00080255 	.word	0x00080255
   809a0:	000803e1 	.word	0x000803e1
   809a4:	00080429 	.word	0x00080429

000809a8 <_ZN14ShiftRegisters5writeEPv>:

int ShiftRegisters::close() {
    return 0;
}

int ShiftRegisters::write( void* data) {
   809a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ShiftRegistersWriteParams *params = (ShiftRegistersWriteParams *)data;
    
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
   809aa:	2002      	movs	r0, #2
   809ac:	2200      	movs	r2, #0
   809ae:	4c27      	ldr	r4, [pc, #156]	; (80a4c <_ZN14ShiftRegisters5writeEPv+0xa4>)

int ShiftRegisters::close() {
    return 0;
}

int ShiftRegisters::write( void* data) {
   809b0:	460f      	mov	r7, r1
    ShiftRegistersWriteParams *params = (ShiftRegistersWriteParams *)data;
    
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
   809b2:	2119      	movs	r1, #25
   809b4:	47a0      	blx	r4
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
   809b6:	2002      	movs	r0, #2
   809b8:	2118      	movs	r1, #24
   809ba:	2201      	movs	r2, #1
   809bc:	47a0      	blx	r4
    for (int i = 0; i < 32 ; i++) {
   809be:	2600      	movs	r6, #0
        pinSetOutput(seqClkPort, seqClkPin, LOW);
   809c0:	2002      	movs	r0, #2
   809c2:	2118      	movs	r1, #24
   809c4:	2200      	movs	r2, #0
   809c6:	47a0      	blx	r4
        int level = (~(params->stepLights >> i) & 1);
   809c8:	683b      	ldr	r3, [r7, #0]
        pinSetOutput(seqSdPort, seqSdPin, level);
   809ca:	2002      	movs	r0, #2
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
        pinSetOutput(seqClkPort, seqClkPin, LOW);
        int level = (~(params->stepLights >> i) & 1);
   809cc:	40f3      	lsrs	r3, r6
   809ce:	f003 0201 	and.w	r2, r3, #1
        pinSetOutput(seqSdPort, seqSdPin, level);
   809d2:	2117      	movs	r1, #23
   809d4:	f082 0201 	eor.w	r2, r2, #1
   809d8:	47a0      	blx	r4
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
   809da:	3601      	adds	r6, #1
        pinSetOutput(seqClkPort, seqClkPin, LOW);
        int level = (~(params->stepLights >> i) & 1);
        pinSetOutput(seqSdPort, seqSdPin, level);
        pinSetOutput(seqClkPort, seqClkPin, HIGH);
   809dc:	2002      	movs	r0, #2
   809de:	2118      	movs	r1, #24
   809e0:	2201      	movs	r2, #1
   809e2:	47a0      	blx	r4
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
   809e4:	2e20      	cmp	r6, #32
        pinSetOutput(seqClkPort, seqClkPin, LOW);
   809e6:	4d19      	ldr	r5, [pc, #100]	; (80a4c <_ZN14ShiftRegisters5writeEPv+0xa4>)
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
   809e8:	d1ea      	bne.n	809c0 <_ZN14ShiftRegisters5writeEPv+0x18>
        pinSetOutput(seqClkPort, seqClkPin, LOW);
        int level = (~(params->stepLights >> i) & 1);
        pinSetOutput(seqSdPort, seqSdPin, level);
        pinSetOutput(seqClkPort, seqClkPin, HIGH);
    }
    pinSetOutput(seqClkPort, seqClkPin, LOW);
   809ea:	2002      	movs	r0, #2
   809ec:	2118      	movs	r1, #24
   809ee:	2200      	movs	r2, #0
   809f0:	47a8      	blx	r5
    // Latch high
    pinSetOutput(seqOePort, seqOePin, HIGH);
   809f2:	2002      	movs	r0, #2
   809f4:	2119      	movs	r1, #25
   809f6:	2201      	movs	r2, #1
   809f8:	47a8      	blx	r5

    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
   809fa:	2002      	movs	r0, #2
   809fc:	2116      	movs	r1, #22
   809fe:	2200      	movs	r2, #0
   80a00:	47a8      	blx	r5
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
   80a02:	2002      	movs	r0, #2
   80a04:	2115      	movs	r1, #21
   80a06:	2201      	movs	r2, #1
   80a08:	47a8      	blx	r5
    for (int i = 0; i < 16; i++) {
   80a0a:	2500      	movs	r5, #0
        pinSetOutput(funcClkPort, funcClkPin, LOW);
   80a0c:	2002      	movs	r0, #2
   80a0e:	2115      	movs	r1, #21
   80a10:	2200      	movs	r2, #0
   80a12:	47a0      	blx	r4
        int level = ~(params->functionLights >> i) & 1;
   80a14:	88ba      	ldrh	r2, [r7, #4]
        pinSetOutput(funcSdPort, funcSdPin, level);
   80a16:	2002      	movs	r0, #2
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
        pinSetOutput(funcClkPort, funcClkPin, LOW);
        int level = ~(params->functionLights >> i) & 1;
   80a18:	412a      	asrs	r2, r5
   80a1a:	f002 0201 	and.w	r2, r2, #1
        pinSetOutput(funcSdPort, funcSdPin, level);
   80a1e:	211d      	movs	r1, #29
   80a20:	f082 0201 	eor.w	r2, r2, #1
   80a24:	47a0      	blx	r4
    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
   80a26:	3501      	adds	r5, #1
        pinSetOutput(funcClkPort, funcClkPin, LOW);
        int level = ~(params->functionLights >> i) & 1;
        pinSetOutput(funcSdPort, funcSdPin, level);
        pinSetOutput(funcClkPort, funcClkPin, HIGH);
   80a28:	2002      	movs	r0, #2
   80a2a:	2115      	movs	r1, #21
   80a2c:	2201      	movs	r2, #1
   80a2e:	47a0      	blx	r4
    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
   80a30:	2d10      	cmp	r5, #16
        pinSetOutput(funcClkPort, funcClkPin, LOW);
   80a32:	4e06      	ldr	r6, [pc, #24]	; (80a4c <_ZN14ShiftRegisters5writeEPv+0xa4>)
    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
   80a34:	d1ea      	bne.n	80a0c <_ZN14ShiftRegisters5writeEPv+0x64>
        pinSetOutput(funcClkPort, funcClkPin, LOW);
        int level = ~(params->functionLights >> i) & 1;
        pinSetOutput(funcSdPort, funcSdPin, level);
        pinSetOutput(funcClkPort, funcClkPin, HIGH);
    }
    pinSetOutput(funcClkPort, funcClkPin, LOW);
   80a36:	2002      	movs	r0, #2
   80a38:	2115      	movs	r1, #21
   80a3a:	2200      	movs	r2, #0
   80a3c:	47b0      	blx	r6
    // Latch high
    pinSetOutput(funcOePort, funcOePin, HIGH);
   80a3e:	2002      	movs	r0, #2
   80a40:	2116      	movs	r1, #22
   80a42:	2201      	movs	r2, #1
   80a44:	47b0      	blx	r6

    return 0;
}
   80a46:	2000      	movs	r0, #0
   80a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80a4a:	bf00      	nop
   80a4c:	00080429 	.word	0x00080429

00080a50 <_ZN3SPI5closeEv>:

    return 0;
 }

 int SPI::close() {
    SPI0->SPI_CR = SPI_CR_SPIDIS;
   80a50:	4b05      	ldr	r3, [pc, #20]	; (80a68 <_ZN3SPI5closeEv+0x18>)
   80a52:	2202      	movs	r2, #2
   80a54:	601a      	str	r2, [r3, #0]
    PMC->PMC_PCDR0 = 1<<ID_SPI0;
   80a56:	f503 2358 	add.w	r3, r3, #884736	; 0xd8000
   80a5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80a5e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   80a62:	615a      	str	r2, [r3, #20]
    return 0;
 }
   80a64:	2000      	movs	r0, #0
   80a66:	4770      	bx	lr
   80a68:	40008000 	.word	0x40008000

00080a6c <_ZN3SPI4readEv>:
 }

 void* SPI::read() {

    return (void*)NULL;
 }
   80a6c:	2000      	movs	r0, #0
   80a6e:	4770      	bx	lr

00080a70 <_ZN3SPI4openEPv>:
 #include "ShiftRegisters.h"
 #include "../Reporting.h"

 #include <stdlib.h> // Used for definition of NULL

 int SPI::open( void* data) {
   80a70:	b538      	push	{r3, r4, r5, lr}
   80a72:	4604      	mov	r4, r0
    SPIParams *params = (SPIParams*)data;
    csPort = params->csPort;
   80a74:	7808      	ldrb	r0, [r1, #0]
    csPin  = params->csPin;
   80a76:	6849      	ldr	r1, [r1, #4]

    // Configure cs pin
    pinSetMode(csPort,   csPin,   OUTPUT);
   80a78:	4d16      	ldr	r5, [pc, #88]	; (80ad4 <_ZN3SPI4openEPv+0x64>)

 #include <stdlib.h> // Used for definition of NULL

 int SPI::open( void* data) {
    SPIParams *params = (SPIParams*)data;
    csPort = params->csPort;
   80a7a:	7120      	strb	r0, [r4, #4]
    csPin  = params->csPin;
   80a7c:	60a1      	str	r1, [r4, #8]

    // Configure cs pin
    pinSetMode(csPort,   csPin,   OUTPUT);
   80a7e:	2201      	movs	r2, #1
   80a80:	47a8      	blx	r5
    pinDisablePullup(csPort, csPin);
   80a82:	7920      	ldrb	r0, [r4, #4]
   80a84:	68a1      	ldr	r1, [r4, #8]
   80a86:	4b14      	ldr	r3, [pc, #80]	; (80ad8 <_ZN3SPI4openEPv+0x68>)
   80a88:	4798      	blx	r3
    pinSetOutput(csPort, csPin, HIGH);
   80a8a:	4b14      	ldr	r3, [pc, #80]	; (80adc <_ZN3SPI4openEPv+0x6c>)
   80a8c:	7920      	ldrb	r0, [r4, #4]
   80a8e:	68a1      	ldr	r1, [r4, #8]
   80a90:	2201      	movs	r2, #1
   80a92:	4798      	blx	r3

    // Configure SPI peripheral pins
    pinSetMode(misoPort, misoPin, PERIPHERAL_A);
   80a94:	2000      	movs	r0, #0
   80a96:	2119      	movs	r1, #25
   80a98:	2202      	movs	r2, #2
   80a9a:	47a8      	blx	r5
    pinSetMode(mosiPort, mosiPin, PERIPHERAL_A);
   80a9c:	2000      	movs	r0, #0
   80a9e:	211a      	movs	r1, #26
   80aa0:	2202      	movs	r2, #2
   80aa2:	47a8      	blx	r5
    pinSetMode(clkPort,  clkPin,  PERIPHERAL_A);
   80aa4:	2000      	movs	r0, #0
   80aa6:	211b      	movs	r1, #27
   80aa8:	2202      	movs	r2, #2
   80aaa:	47a8      	blx	r5

    // Enable SPI controller
    PMC->PMC_PCER0 = 1<<ID_SPI0;    
   80aac:	4b0c      	ldr	r3, [pc, #48]	; (80ae0 <_ZN3SPI4openEPv+0x70>)
   80aae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80ab2:	611a      	str	r2, [r3, #16]
    
    // Disable SPI in SPI controller so we can configure it
    SPI0->SPI_CR = SPI_CR_SPIDIS;
   80ab4:	4b0b      	ldr	r3, [pc, #44]	; (80ae4 <_ZN3SPI4openEPv+0x74>)
   80ab6:	2202      	movs	r2, #2
   80ab8:	601a      	str	r2, [r3, #0]

    // Mode Register = Master, Disable fault detection, NPCS[3:0] = 
    SPI0->SPI_MR = SPI_MR_MSTR | SPI_MR_MODFDIS | 0x000E0000; 
   80aba:	4a0b      	ldr	r2, [pc, #44]	; (80ae8 <_ZN3SPI4openEPv+0x78>)

    // Enable SPI in SPI controller
    SPI0->SPI_CR = SPI_CR_SPIEN;    

    return 0;
 }
   80abc:	2000      	movs	r0, #0
    
    // Disable SPI in SPI controller so we can configure it
    SPI0->SPI_CR = SPI_CR_SPIDIS;

    // Mode Register = Master, Disable fault detection, NPCS[3:0] = 
    SPI0->SPI_MR = SPI_MR_MSTR | SPI_MR_MODFDIS | 0x000E0000; 
   80abe:	605a      	str	r2, [r3, #4]

    // SPCK baudrate = MCK / SCBR = 84 MHz / 40 (0x28) = 2.1Mhz
    SPI0->SPI_CSR[0] |= 0x00002800 | SPI_CSR_NCPHA;
   80ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80ac2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
   80ac6:	f042 0202 	orr.w	r2, r2, #2
   80aca:	631a      	str	r2, [r3, #48]	; 0x30

    // Enable SPI in SPI controller
    SPI0->SPI_CR = SPI_CR_SPIEN;    
   80acc:	2201      	movs	r2, #1
   80ace:	601a      	str	r2, [r3, #0]

    return 0;
 }
   80ad0:	bd38      	pop	{r3, r4, r5, pc}
   80ad2:	bf00      	nop
   80ad4:	00080255 	.word	0x00080255
   80ad8:	000803e1 	.word	0x000803e1
   80adc:	00080429 	.word	0x00080429
   80ae0:	400e0600 	.word	0x400e0600
   80ae4:	40008000 	.word	0x40008000
   80ae8:	000e0011 	.word	0x000e0011

00080aec <_ZN3SPI5ioctlEiPv>:

    return (void*)NULL;
 }

 void* SPI::ioctl(int ioctl_t, void *params) {
    if (ioctl_t == SPI_BLOCK_UNTIL_TRANSFERRED) {
   80aec:	b919      	cbnz	r1, 80af6 <_ZN3SPI5ioctlEiPv+0xa>
        while (!(SPI0->SPI_SR & SPI_SR_TXEMPTY)) {};
   80aee:	4b03      	ldr	r3, [pc, #12]	; (80afc <_ZN3SPI5ioctlEiPv+0x10>)
   80af0:	691b      	ldr	r3, [r3, #16]
   80af2:	059b      	lsls	r3, r3, #22
   80af4:	d5fb      	bpl.n	80aee <_ZN3SPI5ioctlEiPv+0x2>
    }

    return (void*)NULL;
   80af6:	2000      	movs	r0, #0
   80af8:	4770      	bx	lr
   80afa:	bf00      	nop
   80afc:	40008000 	.word	0x40008000

00080b00 <_ZN3SPI5writeEPv>:
    SPI0->SPI_CR = SPI_CR_SPIDIS;
    PMC->PMC_PCDR0 = 1<<ID_SPI0;
    return 0;
 }

 int SPI::write( void* data) {
   80b00:	b538      	push	{r3, r4, r5, lr}
   80b02:	4604      	mov	r4, r0
   80b04:	460d      	mov	r5, r1
    SPIWriteParams *swp = (SPIWriteParams*)data;

    // Wait for previous transfer to complete
    while ((SPI0->SPI_SR & SPI_SR_TXEMPTY) == 0);
   80b06:	4b0e      	ldr	r3, [pc, #56]	; (80b40 <_ZN3SPI5writeEPv+0x40>)
   80b08:	691b      	ldr	r3, [r3, #16]
   80b0a:	0599      	lsls	r1, r3, #22
   80b0c:	d5fb      	bpl.n	80b06 <_ZN3SPI5writeEPv+0x6>

    // Send data
    if (!csOpen) {
   80b0e:	68e2      	ldr	r2, [r4, #12]
   80b10:	b92a      	cbnz	r2, 80b1e <_ZN3SPI5writeEPv+0x1e>
        pinSetOutput(csPort, csPin, LOW);
   80b12:	4b0c      	ldr	r3, [pc, #48]	; (80b44 <_ZN3SPI5writeEPv+0x44>)
   80b14:	7920      	ldrb	r0, [r4, #4]
   80b16:	68a1      	ldr	r1, [r4, #8]
   80b18:	4798      	blx	r3
        csOpen = 1;
   80b1a:	2301      	movs	r3, #1
   80b1c:	60e3      	str	r3, [r4, #12]
    }
    SPI0->SPI_TDR = swp->data;
   80b1e:	882a      	ldrh	r2, [r5, #0]
   80b20:	4b07      	ldr	r3, [pc, #28]	; (80b40 <_ZN3SPI5writeEPv+0x40>)
   80b22:	60da      	str	r2, [r3, #12]

    // Wait til data has been sent
    // (SPI_BLOCK_UNTIL_TRANSFERRED ioctl does the same)
    while (!(SPI0->SPI_SR & SPI_SR_TXEMPTY)) {};
   80b24:	691a      	ldr	r2, [r3, #16]
   80b26:	0592      	lsls	r2, r2, #22
   80b28:	d5fc      	bpl.n	80b24 <_ZN3SPI5writeEPv+0x24>
    if (swp->mode == SPI_LAST) {
   80b2a:	686d      	ldr	r5, [r5, #4]
   80b2c:	b92d      	cbnz	r5, 80b3a <_ZN3SPI5writeEPv+0x3a>
        pinSetOutput(csPort, csPin, HIGH);
   80b2e:	7920      	ldrb	r0, [r4, #4]
   80b30:	68a1      	ldr	r1, [r4, #8]
   80b32:	2201      	movs	r2, #1
   80b34:	4b03      	ldr	r3, [pc, #12]	; (80b44 <_ZN3SPI5writeEPv+0x44>)
   80b36:	4798      	blx	r3
        csOpen = 0;
   80b38:	60e5      	str	r5, [r4, #12]
    }

    // We're out
    return 0;
 }
   80b3a:	2000      	movs	r0, #0
   80b3c:	bd38      	pop	{r3, r4, r5, pc}
   80b3e:	bf00      	nop
   80b40:	40008000 	.word	0x40008000
   80b44:	00080429 	.word	0x00080429

00080b48 <_ZN7SSD13055closeEv>:
    return 0;
 }

 int SSD1305::close() {
    return 0;
 }
   80b48:	2000      	movs	r0, #0
   80b4a:	4770      	bx	lr

00080b4c <_ZN7SSD13054readEv>:
    return 0;
 }

 void *SSD1305::read() {
    return (void*)0;
 }
   80b4c:	2000      	movs	r0, #0
   80b4e:	4770      	bx	lr

00080b50 <_ZN7SSD13055ioctlEiPv>:

 void *SSD1305::ioctl(int ioctl_t, void* params) {
    return (void*)0;
   80b50:	2000      	movs	r0, #0
   80b52:	4770      	bx	lr

00080b54 <_ZN3SPI8InstanceEv>:

    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
   80b54:	b538      	push	{r3, r4, r5, lr}
        static SPI instance;
   80b56:	4c09      	ldr	r4, [pc, #36]	; (80b7c <_ZN3SPI8InstanceEv+0x28>)
   80b58:	6823      	ldr	r3, [r4, #0]
   80b5a:	f013 0501 	ands.w	r5, r3, #1
   80b5e:	d10a      	bne.n	80b76 <_ZN3SPI8InstanceEv+0x22>
   80b60:	4620      	mov	r0, r4
   80b62:	4b07      	ldr	r3, [pc, #28]	; (80b80 <_ZN3SPI8InstanceEv+0x2c>)
   80b64:	4798      	blx	r3
   80b66:	b130      	cbz	r0, 80b76 <_ZN3SPI8InstanceEv+0x22>

    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
   80b68:	4a06      	ldr	r2, [pc, #24]	; (80b84 <_ZN3SPI8InstanceEv+0x30>)
   80b6a:	4b07      	ldr	r3, [pc, #28]	; (80b88 <_ZN3SPI8InstanceEv+0x34>)
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80b6c:	4620      	mov	r0, r4

    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
   80b6e:	6013      	str	r3, [r2, #0]
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80b70:	4b06      	ldr	r3, [pc, #24]	; (80b8c <_ZN3SPI8InstanceEv+0x38>)
    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
        csOpen = 0;
   80b72:	60d5      	str	r5, [r2, #12]
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80b74:	4798      	blx	r3
        return instance;
    };
   80b76:	4803      	ldr	r0, [pc, #12]	; (80b84 <_ZN3SPI8InstanceEv+0x30>)
   80b78:	bd38      	pop	{r3, r4, r5, pc}
   80b7a:	bf00      	nop
   80b7c:	200000a8 	.word	0x200000a8
   80b80:	000810fd 	.word	0x000810fd
   80b84:	20000098 	.word	0x20000098
   80b88:	00081e18 	.word	0x00081e18
   80b8c:	00081119 	.word	0x00081119

00080b90 <_ZN7SSD13054openEPv>:

 #include "../Reporting.h"

 #include <stdlib.h>

 int SSD1305::open( void* params) {
   80b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pinSetMode(dcPort,  dcPin,  OUTPUT);
   80b94:	2002      	movs	r0, #2
   80b96:	4c8f      	ldr	r4, [pc, #572]	; (80dd4 <_ZN7SSD13054openEPv+0x244>)
   80b98:	211c      	movs	r1, #28
   80b9a:	2201      	movs	r2, #1
   80b9c:	47a0      	blx	r4
    pinSetMode(resPort, resPin, OUTPUT);
   80b9e:	2001      	movs	r0, #1
   80ba0:	4602      	mov	r2, r0
   80ba2:	2119      	movs	r1, #25
   80ba4:	47a0      	blx	r4
    pinDisablePullup(dcPort, dcPin);
   80ba6:	4c8c      	ldr	r4, [pc, #560]	; (80dd8 <_ZN7SSD13054openEPv+0x248>)
   80ba8:	2002      	movs	r0, #2
   80baa:	211c      	movs	r1, #28
   80bac:	47a0      	blx	r4
    pinDisablePullup(resPort, resPin);
   80bae:	2001      	movs	r0, #1
   80bb0:	2119      	movs	r1, #25
   80bb2:	47a0      	blx	r4
    pinSetOutput(resPort, resPin, LOW);
   80bb4:	4f89      	ldr	r7, [pc, #548]	; (80ddc <_ZN7SSD13054openEPv+0x24c>)
   80bb6:	2200      	movs	r2, #0
   80bb8:	2119      	movs	r1, #25
   80bba:	2001      	movs	r0, #1
   80bbc:	47b8      	blx	r7


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
   80bbe:	4e88      	ldr	r6, [pc, #544]	; (80de0 <_ZN7SSD13054openEPv+0x250>)
   80bc0:	2008      	movs	r0, #8
   80bc2:	47b0      	blx	r6
    sp->csPort = csPort;
   80bc4:	f04f 0902 	mov.w	r9, #2
    sp->csPin  = csPin;
   80bc8:	231a      	movs	r3, #26

    SPI::Instance().open(sp);
   80bca:	4d86      	ldr	r5, [pc, #536]	; (80de4 <_ZN7SSD13054openEPv+0x254>)
    pinSetOutput(resPort, resPin, LOW);


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
    sp->csPort = csPort;
    sp->csPin  = csPin;
   80bcc:	6043      	str	r3, [r0, #4]
    pinDisablePullup(resPort, resPin);
    pinSetOutput(resPort, resPin, LOW);


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
    sp->csPort = csPort;
   80bce:	f880 9000 	strb.w	r9, [r0]
    pinDisablePullup(dcPort, dcPin);
    pinDisablePullup(resPort, resPin);
    pinSetOutput(resPort, resPin, LOW);


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
   80bd2:	4604      	mov	r4, r0
    sp->csPort = csPort;
    sp->csPin  = csPin;

    SPI::Instance().open(sp);
   80bd4:	47a8      	blx	r5
   80bd6:	6803      	ldr	r3, [r0, #0]
   80bd8:	4621      	mov	r1, r4
   80bda:	681b      	ldr	r3, [r3, #0]
   80bdc:	4798      	blx	r3
    free(sp);
   80bde:	f8df a208 	ldr.w	sl, [pc, #520]	; 80de8 <_ZN7SSD13054openEPv+0x258>
   80be2:	4620      	mov	r0, r4
   80be4:	47d0      	blx	sl

    pinSetOutput(resPort, resPin, HIGH);
   80be6:	2001      	movs	r0, #1
   80be8:	4602      	mov	r2, r0
   80bea:	2119      	movs	r1, #25
   80bec:	47b8      	blx	r7
    pinSetOutput(dcPort,  dcPin,  LOW);
   80bee:	2200      	movs	r2, #0
   80bf0:	211c      	movs	r1, #28
   80bf2:	4648      	mov	r0, r9
   80bf4:	47b8      	blx	r7

    // Do our initialization
    SPIWriteParams* swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   80bf6:	2008      	movs	r0, #8
   80bf8:	47b0      	blx	r6
    swp->mode = SPI_CONTINUE;
   80bfa:	f04f 0b01 	mov.w	fp, #1
    swp->data = 0xAE;
   80bfe:	23ae      	movs	r3, #174	; 0xae
   80c00:	8003      	strh	r3, [r0, #0]
    pinSetOutput(resPort, resPin, HIGH);
    pinSetOutput(dcPort,  dcPin,  LOW);

    // Do our initialization
    SPIWriteParams* swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
    swp->mode = SPI_CONTINUE;
   80c02:	f8c0 b004 	str.w	fp, [r0, #4]

    pinSetOutput(resPort, resPin, HIGH);
    pinSetOutput(dcPort,  dcPin,  LOW);

    // Do our initialization
    SPIWriteParams* swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   80c06:	4604      	mov	r4, r0
    swp->mode = SPI_CONTINUE;
    swp->data = 0xAE;
    SPI::Instance().write((void*)swp);
   80c08:	47a8      	blx	r5
   80c0a:	6803      	ldr	r3, [r0, #0]
   80c0c:	4621      	mov	r1, r4
   80c0e:	689b      	ldr	r3, [r3, #8]
   80c10:	4798      	blx	r3
    swp->data = 0xD5;
   80c12:	23d5      	movs	r3, #213	; 0xd5
   80c14:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set display clock divider ratio
   80c16:	47a8      	blx	r5
   80c18:	6803      	ldr	r3, [r0, #0]
   80c1a:	4621      	mov	r1, r4
   80c1c:	689b      	ldr	r3, [r3, #8]
   80c1e:	4798      	blx	r3
    swp->data = 0xA0;
   80c20:	23a0      	movs	r3, #160	; 0xa0
   80c22:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80c24:	47a8      	blx	r5
   80c26:	6803      	ldr	r3, [r0, #0]
   80c28:	4621      	mov	r1, r4
   80c2a:	689b      	ldr	r3, [r3, #8]
   80c2c:	4798      	blx	r3
    swp->data = 0xA8;
   80c2e:	23a8      	movs	r3, #168	; 0xa8
   80c30:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set multiplex ratio
   80c32:	47a8      	blx	r5
   80c34:	6803      	ldr	r3, [r0, #0]
    swp->data = 0x3F;
   80c36:	263f      	movs	r6, #63	; 0x3f
    swp->data = 0xD5;
    SPI::Instance().write((void*)swp);  // set display clock divider ratio
    swp->data = 0xA0;
    SPI::Instance().write((void*)swp);
    swp->data = 0xA8;
    SPI::Instance().write((void*)swp);  // set multiplex ratio
   80c38:	689b      	ldr	r3, [r3, #8]
   80c3a:	4621      	mov	r1, r4
   80c3c:	4798      	blx	r3
    swp->data = 0x3F;
   80c3e:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80c40:	47a8      	blx	r5
   80c42:	6803      	ldr	r3, [r0, #0]
   80c44:	4621      	mov	r1, r4
   80c46:	689b      	ldr	r3, [r3, #8]
   80c48:	4798      	blx	r3
    swp->data = 0xD3;
   80c4a:	23d3      	movs	r3, #211	; 0xd3
   80c4c:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set display offset
   80c4e:	47a8      	blx	r5
   80c50:	6803      	ldr	r3, [r0, #0]
    swp->data = 0x00;
   80c52:	f04f 0800 	mov.w	r8, #0
    swp->data = 0xA8;
    SPI::Instance().write((void*)swp);  // set multiplex ratio
    swp->data = 0x3F;
    SPI::Instance().write((void*)swp);
    swp->data = 0xD3;
    SPI::Instance().write((void*)swp);  // set display offset
   80c56:	689b      	ldr	r3, [r3, #8]
   80c58:	4621      	mov	r1, r4
   80c5a:	4798      	blx	r3
    swp->data = 0x00;
   80c5c:	f8a4 8000 	strh.w	r8, [r4]
    SPI::Instance().write((void*)swp);
   80c60:	47a8      	blx	r5
   80c62:	6803      	ldr	r3, [r0, #0]
   80c64:	4621      	mov	r1, r4
   80c66:	689b      	ldr	r3, [r3, #8]
   80c68:	4798      	blx	r3
    swp->data = 0x40;
   80c6a:	2340      	movs	r3, #64	; 0x40
   80c6c:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set display start line
   80c6e:	47a8      	blx	r5
   80c70:	6803      	ldr	r3, [r0, #0]
   80c72:	4621      	mov	r1, r4
   80c74:	689b      	ldr	r3, [r3, #8]
   80c76:	4798      	blx	r3
    swp->data = 0xAD;
   80c78:	23ad      	movs	r3, #173	; 0xad
   80c7a:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set master configuration
   80c7c:	47a8      	blx	r5
   80c7e:	6803      	ldr	r3, [r0, #0]
   80c80:	4621      	mov	r1, r4
   80c82:	689b      	ldr	r3, [r3, #8]
   80c84:	4798      	blx	r3
    swp->data = 0x8E;
   80c86:	238e      	movs	r3, #142	; 0x8e
   80c88:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80c8a:	47a8      	blx	r5
   80c8c:	6803      	ldr	r3, [r0, #0]
   80c8e:	4621      	mov	r1, r4
   80c90:	689b      	ldr	r3, [r3, #8]
   80c92:	4798      	blx	r3
    swp->data = 0xD8;
   80c94:	23d8      	movs	r3, #216	; 0xd8
   80c96:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set area color mode
   80c98:	47a8      	blx	r5
   80c9a:	6803      	ldr	r3, [r0, #0]
   80c9c:	4621      	mov	r1, r4
   80c9e:	689b      	ldr	r3, [r3, #8]
   80ca0:	4798      	blx	r3
    swp->data = 0x05;
   80ca2:	2305      	movs	r3, #5
   80ca4:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80ca6:	47a8      	blx	r5
   80ca8:	6803      	ldr	r3, [r0, #0]
   80caa:	4621      	mov	r1, r4
   80cac:	689b      	ldr	r3, [r3, #8]
   80cae:	4798      	blx	r3
    swp->data = 0xA1;
   80cb0:	23a1      	movs	r3, #161	; 0xa1
   80cb2:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set segment re-map
   80cb4:	47a8      	blx	r5
   80cb6:	6803      	ldr	r3, [r0, #0]
   80cb8:	4621      	mov	r1, r4
   80cba:	689b      	ldr	r3, [r3, #8]
   80cbc:	4798      	blx	r3
    swp->data = 0xC8;
   80cbe:	23c8      	movs	r3, #200	; 0xc8
   80cc0:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set com output scan direction
   80cc2:	47a8      	blx	r5
   80cc4:	6803      	ldr	r3, [r0, #0]
   80cc6:	4621      	mov	r1, r4
   80cc8:	689b      	ldr	r3, [r3, #8]
   80cca:	4798      	blx	r3
    swp->data = 0xDA;
   80ccc:	23da      	movs	r3, #218	; 0xda
   80cce:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set com pins hardware configuration
   80cd0:	47a8      	blx	r5
   80cd2:	6803      	ldr	r3, [r0, #0]
   80cd4:	4621      	mov	r1, r4
   80cd6:	689b      	ldr	r3, [r3, #8]
   80cd8:	4798      	blx	r3
    swp->data = 0x12;
   80cda:	2312      	movs	r3, #18
   80cdc:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80cde:	47a8      	blx	r5
   80ce0:	6803      	ldr	r3, [r0, #0]
   80ce2:	4621      	mov	r1, r4
   80ce4:	689b      	ldr	r3, [r3, #8]
   80ce6:	4798      	blx	r3
    swp->data = 0x91;
   80ce8:	2391      	movs	r3, #145	; 0x91
   80cea:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set lookup table
   80cec:	47a8      	blx	r5
   80cee:	6803      	ldr	r3, [r0, #0]
   80cf0:	4621      	mov	r1, r4
   80cf2:	689b      	ldr	r3, [r3, #8]
   80cf4:	4798      	blx	r3
    swp->data = 0x3F;
   80cf6:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80cf8:	47a8      	blx	r5
   80cfa:	6803      	ldr	r3, [r0, #0]
   80cfc:	4621      	mov	r1, r4
   80cfe:	689b      	ldr	r3, [r3, #8]
   80d00:	4798      	blx	r3
    swp->data = 0x3F;
   80d02:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80d04:	47a8      	blx	r5
   80d06:	6803      	ldr	r3, [r0, #0]
   80d08:	4621      	mov	r1, r4
   80d0a:	689b      	ldr	r3, [r3, #8]
   80d0c:	4798      	blx	r3
    swp->data = 0x3F;
   80d0e:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80d10:	47a8      	blx	r5
   80d12:	6803      	ldr	r3, [r0, #0]
   80d14:	4621      	mov	r1, r4
   80d16:	689b      	ldr	r3, [r3, #8]
   80d18:	4798      	blx	r3
    swp->data = 0x3F;
   80d1a:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80d1c:	47a8      	blx	r5
   80d1e:	6803      	ldr	r3, [r0, #0]
   80d20:	4621      	mov	r1, r4
   80d22:	689b      	ldr	r3, [r3, #8]
   80d24:	4798      	blx	r3
    swp->data = 0x81;
   80d26:	2381      	movs	r3, #129	; 0x81
   80d28:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set current control for bank 0
   80d2a:	47a8      	blx	r5
   80d2c:	6803      	ldr	r3, [r0, #0]
   80d2e:	4621      	mov	r1, r4
   80d30:	689b      	ldr	r3, [r3, #8]
   80d32:	4798      	blx	r3
    swp->data = 0x8F;
   80d34:	238f      	movs	r3, #143	; 0x8f
   80d36:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80d38:	47a8      	blx	r5
   80d3a:	6803      	ldr	r3, [r0, #0]
   80d3c:	4621      	mov	r1, r4
   80d3e:	689b      	ldr	r3, [r3, #8]
   80d40:	4798      	blx	r3
    swp->data = 0xD9;
   80d42:	23d9      	movs	r3, #217	; 0xd9
   80d44:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set pre-charge period
   80d46:	47a8      	blx	r5
   80d48:	6803      	ldr	r3, [r0, #0]
   80d4a:	4621      	mov	r1, r4
   80d4c:	689b      	ldr	r3, [r3, #8]
   80d4e:	4798      	blx	r3
    swp->data = 0xD2;
   80d50:	23d2      	movs	r3, #210	; 0xd2
   80d52:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80d54:	47a8      	blx	r5
   80d56:	6803      	ldr	r3, [r0, #0]
   80d58:	4621      	mov	r1, r4
   80d5a:	689b      	ldr	r3, [r3, #8]
   80d5c:	4798      	blx	r3
    swp->data = 0xDB;
   80d5e:	23db      	movs	r3, #219	; 0xdb
   80d60:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set vcomh deselect level
   80d62:	47a8      	blx	r5
   80d64:	6803      	ldr	r3, [r0, #0]
   80d66:	4621      	mov	r1, r4
   80d68:	689b      	ldr	r3, [r3, #8]
   80d6a:	4798      	blx	r3
    swp->data = 0x34;
   80d6c:	2334      	movs	r3, #52	; 0x34
   80d6e:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80d70:	47a8      	blx	r5
   80d72:	6803      	ldr	r3, [r0, #0]
   80d74:	4621      	mov	r1, r4
   80d76:	689b      	ldr	r3, [r3, #8]
   80d78:	4798      	blx	r3
    swp->data = 0xA4;
   80d7a:	23a4      	movs	r3, #164	; 0xa4
   80d7c:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set entire display on/off
   80d7e:	47a8      	blx	r5
   80d80:	6803      	ldr	r3, [r0, #0]
   80d82:	4621      	mov	r1, r4
   80d84:	689b      	ldr	r3, [r3, #8]
   80d86:	4798      	blx	r3
    swp->data = 0xA6;
   80d88:	23a6      	movs	r3, #166	; 0xa6
   80d8a:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set normal/inverse display
   80d8c:	47a8      	blx	r5
   80d8e:	6803      	ldr	r3, [r0, #0]
   80d90:	4621      	mov	r1, r4
   80d92:	689b      	ldr	r3, [r3, #8]
   80d94:	4798      	blx	r3
    swp->data = 0x20;
   80d96:	2320      	movs	r3, #32
   80d98:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Page mode
   80d9a:	47a8      	blx	r5
   80d9c:	6803      	ldr	r3, [r0, #0]
   80d9e:	4621      	mov	r1, r4
   80da0:	689b      	ldr	r3, [r3, #8]
   80da2:	4798      	blx	r3
    swp->data = 0X00;
   80da4:	f8a4 8000 	strh.w	r8, [r4]
    SPI::Instance().write((void*)swp);
   80da8:	47a8      	blx	r5
   80daa:	6803      	ldr	r3, [r0, #0]
   80dac:	4621      	mov	r1, r4
   80dae:	689b      	ldr	r3, [r3, #8]
   80db0:	4798      	blx	r3
    
    SPI::Instance().ioctl(SPI_BLOCK_UNTIL_TRANSFERRED, NULL);
   80db2:	47a8      	blx	r5
   80db4:	6803      	ldr	r3, [r0, #0]
   80db6:	4641      	mov	r1, r8
   80db8:	4642      	mov	r2, r8
   80dba:	691b      	ldr	r3, [r3, #16]
   80dbc:	4798      	blx	r3
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);
   80dbe:	4648      	mov	r0, r9
   80dc0:	211c      	movs	r1, #28
   80dc2:	465a      	mov	r2, fp
   80dc4:	47b8      	blx	r7

    // Transfer 0 for every buffer
    swp->data = 0x00;
   80dc6:	f44f 6684 	mov.w	r6, #1056	; 0x420
   80dca:	f8a4 8000 	strh.w	r8, [r4]
   80dce:	46a8      	mov	r8, r5
   80dd0:	e00c      	b.n	80dec <_ZN7SSD13054openEPv+0x25c>
   80dd2:	bf00      	nop
   80dd4:	00080255 	.word	0x00080255
   80dd8:	000803e1 	.word	0x000803e1
   80ddc:	00080429 	.word	0x00080429
   80de0:	00081179 	.word	0x00081179
   80de4:	00080b55 	.word	0x00080b55
   80de8:	00081189 	.word	0x00081189
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
        SPI::Instance().write(swp);
   80dec:	47c0      	blx	r8
   80dee:	6803      	ldr	r3, [r0, #0]
   80df0:	4621      	mov	r1, r4
   80df2:	689b      	ldr	r3, [r3, #8]
   80df4:	4798      	blx	r3
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);

    // Transfer 0 for every buffer
    swp->data = 0x00;
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
   80df6:	3e01      	subs	r6, #1
        SPI::Instance().write(swp);
   80df8:	4d0c      	ldr	r5, [pc, #48]	; (80e2c <_ZN7SSD13054openEPv+0x29c>)
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);

    // Transfer 0 for every buffer
    swp->data = 0x00;
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
   80dfa:	d1f7      	bne.n	80dec <_ZN7SSD13054openEPv+0x25c>
        SPI::Instance().write(swp);
    }

    SPI::Instance().ioctl(SPI_BLOCK_UNTIL_TRANSFERRED, NULL);
   80dfc:	47a8      	blx	r5
   80dfe:	6803      	ldr	r3, [r0, #0]
   80e00:	4631      	mov	r1, r6
   80e02:	691b      	ldr	r3, [r3, #16]
   80e04:	4632      	mov	r2, r6
   80e06:	4798      	blx	r3
    pinSetOutput(dcPort, dcPin, LOW);
   80e08:	4632      	mov	r2, r6
   80e0a:	211c      	movs	r1, #28
   80e0c:	2002      	movs	r0, #2
   80e0e:	47b8      	blx	r7

    swp->data = 0xAF;
   80e10:	23af      	movs	r3, #175	; 0xaf
   80e12:	8023      	strh	r3, [r4, #0]
    swp->mode = SPI_LAST;
   80e14:	6066      	str	r6, [r4, #4]
    SPI::Instance().write(swp);
   80e16:	47a8      	blx	r5
   80e18:	6803      	ldr	r3, [r0, #0]
   80e1a:	4621      	mov	r1, r4
   80e1c:	689b      	ldr	r3, [r3, #8]
   80e1e:	4798      	blx	r3

    free(swp);
   80e20:	4620      	mov	r0, r4
   80e22:	47d0      	blx	sl

    return 0;
 }
   80e24:	4630      	mov	r0, r6
   80e26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e2a:	bf00      	nop
   80e2c:	00080b55 	.word	0x00080b55

00080e30 <_ZN7SSD13055writeEPv>:

 int SSD1305::close() {
    return 0;
 }

 int SSD1305::write( void* params) {
   80e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
   80e34:	2002      	movs	r0, #2
   80e36:	2201      	movs	r2, #1
   80e38:	4b20      	ldr	r3, [pc, #128]	; (80ebc <_ZN7SSD13055writeEPv+0x8c>)

 int SSD1305::close() {
    return 0;
 }

 int SSD1305::write( void* params) {
   80e3a:	4688      	mov	r8, r1
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
   80e3c:	211c      	movs	r1, #28
   80e3e:	4798      	blx	r3
    SPIWriteParams *swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   80e40:	4b1f      	ldr	r3, [pc, #124]	; (80ec0 <_ZN7SSD13055writeEPv+0x90>)
   80e42:	2008      	movs	r0, #8
   80e44:	4798      	blx	r3
    
    // transfer color data (we don't use this)
    swp->data = 0x00;
   80e46:	2300      	movs	r3, #0
   80e48:	8003      	strh	r3, [r0, #0]
    swp->mode = SPI_CONTINUE;
   80e4a:	2301      	movs	r3, #1

 int SSD1305::write( void* params) {
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
    SPIWriteParams *swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   80e4c:	4604      	mov	r4, r0
    
    // transfer color data (we don't use this)
    swp->data = 0x00;
    swp->mode = SPI_CONTINUE;
   80e4e:	6043      	str	r3, [r0, #4]
   80e50:	f44f 7505 	mov.w	r5, #532	; 0x214
    for (int i = 0; i < ssdp->junk_buffer; i++) {
        SPI::Instance().write(swp);
   80e54:	4f1b      	ldr	r7, [pc, #108]	; (80ec4 <_ZN7SSD13055writeEPv+0x94>)
   80e56:	47b8      	blx	r7
   80e58:	6803      	ldr	r3, [r0, #0]
   80e5a:	4621      	mov	r1, r4
   80e5c:	689b      	ldr	r3, [r3, #8]
   80e5e:	4798      	blx	r3
    SPIWriteParams *swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
    
    // transfer color data (we don't use this)
    swp->data = 0x00;
    swp->mode = SPI_CONTINUE;
    for (int i = 0; i < ssdp->junk_buffer; i++) {
   80e60:	3d01      	subs	r5, #1
   80e62:	d1f7      	bne.n	80e54 <_ZN7SSD13055writeEPv+0x24>
        SPI::Instance().write(swp);
    }

    for (int i = 0; i < ssdp->visible_buffers; i++) {
        swp->data = ssdp->buffer[i];
   80e64:	f818 3005 	ldrb.w	r3, [r8, r5]
   80e68:	8023      	strh	r3, [r4, #0]
        if (i == ssdp->visible_buffers - 1)
   80e6a:	f240 13ff 	movw	r3, #511	; 0x1ff
   80e6e:	429d      	cmp	r5, r3
            swp->mode = SPI_LAST;
   80e70:	bf04      	itt	eq
   80e72:	2300      	moveq	r3, #0
   80e74:	6063      	streq	r3, [r4, #4]
        SPI::Instance().write(swp);
   80e76:	47b8      	blx	r7
   80e78:	6803      	ldr	r3, [r0, #0]
   80e7a:	4621      	mov	r1, r4
   80e7c:	689b      	ldr	r3, [r3, #8]
   80e7e:	4798      	blx	r3

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
   80e80:	f005 037f 	and.w	r3, r5, #127	; 0x7f
   80e84:	2b7f      	cmp	r3, #127	; 0x7f
   80e86:	d009      	beq.n	80e9c <_ZN7SSD13055writeEPv+0x6c>
    swp->mode = SPI_CONTINUE;
    for (int i = 0; i < ssdp->junk_buffer; i++) {
        SPI::Instance().write(swp);
    }

    for (int i = 0; i < ssdp->visible_buffers; i++) {
   80e88:	3501      	adds	r5, #1
   80e8a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   80e8e:	d1e9      	bne.n	80e64 <_ZN7SSD13055writeEPv+0x34>
                SPI::Instance().write(swp);
            }
        }
    }

    free(swp);
   80e90:	4620      	mov	r0, r4
   80e92:	4b0d      	ldr	r3, [pc, #52]	; (80ec8 <_ZN7SSD13055writeEPv+0x98>)
   80e94:	4798      	blx	r3
    return 0;
 }
   80e96:	2000      	movs	r0, #0
   80e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        swp->data = ssdp->buffer[i];
        if (i == ssdp->visible_buffers - 1)
            swp->mode = SPI_LAST;
        SPI::Instance().write(swp);

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
   80e9c:	f240 13ff 	movw	r3, #511	; 0x1ff
   80ea0:	429d      	cmp	r5, r3
   80ea2:	d0f1      	beq.n	80e88 <_ZN7SSD13055writeEPv+0x58>
   80ea4:	2604      	movs	r6, #4
            for (int j = 0; j < ssdp->blank; j++) {
                swp->data = 255;
   80ea6:	23ff      	movs	r3, #255	; 0xff
   80ea8:	8023      	strh	r3, [r4, #0]
                SPI::Instance().write(swp);
   80eaa:	47b8      	blx	r7
   80eac:	6803      	ldr	r3, [r0, #0]
   80eae:	4621      	mov	r1, r4
   80eb0:	689b      	ldr	r3, [r3, #8]
   80eb2:	4798      	blx	r3
        if (i == ssdp->visible_buffers - 1)
            swp->mode = SPI_LAST;
        SPI::Instance().write(swp);

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
            for (int j = 0; j < ssdp->blank; j++) {
   80eb4:	3e01      	subs	r6, #1
   80eb6:	d1f6      	bne.n	80ea6 <_ZN7SSD13055writeEPv+0x76>
   80eb8:	e7e6      	b.n	80e88 <_ZN7SSD13055writeEPv+0x58>
   80eba:	bf00      	nop
   80ebc:	00080429 	.word	0x00080429
   80ec0:	00081179 	.word	0x00081179
   80ec4:	00080b55 	.word	0x00080b55
   80ec8:	00081189 	.word	0x00081189

00080ecc <_ZN14ShiftRegisters8InstanceEv>:
    // Make this a singleton
    ShiftRegisters() {};
    ShiftRegisters(ShiftRegisters const&);
    void operator=(ShiftRegisters const&);
  public:
    static ShiftRegisters& Instance()
   80ecc:	b510      	push	{r4, lr}
    {
        static ShiftRegisters instance;
   80ece:	4c08      	ldr	r4, [pc, #32]	; (80ef0 <_ZN14ShiftRegisters8InstanceEv+0x24>)
   80ed0:	6823      	ldr	r3, [r4, #0]
   80ed2:	07db      	lsls	r3, r3, #31
   80ed4:	d409      	bmi.n	80eea <_ZN14ShiftRegisters8InstanceEv+0x1e>
   80ed6:	4620      	mov	r0, r4
   80ed8:	4b06      	ldr	r3, [pc, #24]	; (80ef4 <_ZN14ShiftRegisters8InstanceEv+0x28>)
   80eda:	4798      	blx	r3
   80edc:	b128      	cbz	r0, 80eea <_ZN14ShiftRegisters8InstanceEv+0x1e>
    static const int  funcClkPin   = 21;
    static const Port funcOePort   =  C;
    static const int  funcOePin    = 22;

    // Make this a singleton
    ShiftRegisters() {};
   80ede:	4b06      	ldr	r3, [pc, #24]	; (80ef8 <_ZN14ShiftRegisters8InstanceEv+0x2c>)
   80ee0:	4a06      	ldr	r2, [pc, #24]	; (80efc <_ZN14ShiftRegisters8InstanceEv+0x30>)
    ShiftRegisters(ShiftRegisters const&);
    void operator=(ShiftRegisters const&);
  public:
    static ShiftRegisters& Instance()
    {
        static ShiftRegisters instance;
   80ee2:	4620      	mov	r0, r4
    static const int  funcClkPin   = 21;
    static const Port funcOePort   =  C;
    static const int  funcOePin    = 22;

    // Make this a singleton
    ShiftRegisters() {};
   80ee4:	601a      	str	r2, [r3, #0]
    ShiftRegisters(ShiftRegisters const&);
    void operator=(ShiftRegisters const&);
  public:
    static ShiftRegisters& Instance()
    {
        static ShiftRegisters instance;
   80ee6:	4b06      	ldr	r3, [pc, #24]	; (80f00 <_ZN14ShiftRegisters8InstanceEv+0x34>)
   80ee8:	4798      	blx	r3
        return instance;
    };
   80eea:	4803      	ldr	r0, [pc, #12]	; (80ef8 <_ZN14ShiftRegisters8InstanceEv+0x2c>)
   80eec:	bd10      	pop	{r4, pc}
   80eee:	bf00      	nop
   80ef0:	200000b0 	.word	0x200000b0
   80ef4:	000810fd 	.word	0x000810fd
   80ef8:	200000ac 	.word	0x200000ac
   80efc:	00081df8 	.word	0x00081df8
   80f00:	00081119 	.word	0x00081119

00080f04 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm>:
#include "Display.h"

#include <stdlib.h>
#include <stdio.h>

void Reporting::reportCode(Priority p, VisualStateMethod method, uint32_t code) {
   80f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f06:	4606      	mov	r6, r0
   80f08:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
   80f0c:	460c      	mov	r4, r1
   80f0e:	461f      	mov	r7, r3
    if (method == LIGHTS) {
   80f10:	b9b2      	cbnz	r2, 80f40 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x3c>
        if (p == PRIORITY_DEBUG) {
   80f12:	2900      	cmp	r1, #0
   80f14:	d12b      	bne.n	80f6e <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x6a>
          #ifdef DEBUG
            srwp->stepLights = code;
   80f16:	6803      	ldr	r3, [r0, #0]
            srwp->functionLights = 0xFFFF;
   80f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80f1c:	809a      	strh	r2, [r3, #4]
            ShiftRegisters::Instance().open(NULL);
   80f1e:	4d15      	ldr	r5, [pc, #84]	; (80f74 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x70>)

void Reporting::reportCode(Priority p, VisualStateMethod method, uint32_t code) {
    if (method == LIGHTS) {
        if (p == PRIORITY_DEBUG) {
          #ifdef DEBUG
            srwp->stepLights = code;
   80f20:	601f      	str	r7, [r3, #0]
            srwp->functionLights = 0xFFFF;
            ShiftRegisters::Instance().open(NULL);
   80f22:	47a8      	blx	r5
   80f24:	6803      	ldr	r3, [r0, #0]
   80f26:	4621      	mov	r1, r4
   80f28:	681b      	ldr	r3, [r3, #0]
   80f2a:	4798      	blx	r3
            ShiftRegisters::Instance().write(srwp);
   80f2c:	47a8      	blx	r5
   80f2e:	6803      	ldr	r3, [r0, #0]
   80f30:	6831      	ldr	r1, [r6, #0]
   80f32:	689b      	ldr	r3, [r3, #8]
   80f34:	4798      	blx	r3
            ShiftRegisters::Instance().close();
   80f36:	47a8      	blx	r5
   80f38:	6803      	ldr	r3, [r0, #0]
   80f3a:	685b      	ldr	r3, [r3, #4]
   80f3c:	4798      	blx	r3
   80f3e:	e016      	b.n	80f6e <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x6a>
          #endif
        }
    }
    else {
        if (p == PRIORITY_DEBUG)  {
   80f40:	b9a9      	cbnz	r1, 80f6e <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x6a>
            #ifdef DEBUG
                Display disp = Display();
   80f42:	4b0d      	ldr	r3, [pc, #52]	; (80f78 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x74>)
                char hexString[10];
                sprintf(hexString, "0x%X", (unsigned int)code);
   80f44:	ad03      	add	r5, sp, #12
        }
    }
    else {
        if (p == PRIORITY_DEBUG)  {
            #ifdef DEBUG
                Display disp = Display();
   80f46:	a806      	add	r0, sp, #24
   80f48:	4798      	blx	r3
                char hexString[10];
                sprintf(hexString, "0x%X", (unsigned int)code);
   80f4a:	490c      	ldr	r1, [pc, #48]	; (80f7c <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x78>)
   80f4c:	463a      	mov	r2, r7
   80f4e:	4b0c      	ldr	r3, [pc, #48]	; (80f80 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x7c>)
   80f50:	4628      	mov	r0, r5
   80f52:	4798      	blx	r3
                disp.drawText(0, 0, SMALL_FONT, hexString);
   80f54:	4621      	mov	r1, r4
   80f56:	4622      	mov	r2, r4
   80f58:	4623      	mov	r3, r4
   80f5a:	a806      	add	r0, sp, #24
   80f5c:	9500      	str	r5, [sp, #0]
   80f5e:	4c09      	ldr	r4, [pc, #36]	; (80f84 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x80>)
   80f60:	47a0      	blx	r4
                disp.paint();
   80f62:	a806      	add	r0, sp, #24
   80f64:	4b08      	ldr	r3, [pc, #32]	; (80f88 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x84>)
   80f66:	4798      	blx	r3
   80f68:	a806      	add	r0, sp, #24
   80f6a:	4b08      	ldr	r3, [pc, #32]	; (80f8c <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x88>)
   80f6c:	4798      	blx	r3
            #endif
        }
    }
}
   80f6e:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
   80f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80f74:	00080ecd 	.word	0x00080ecd
   80f78:	00080521 	.word	0x00080521
   80f7c:	00081e50 	.word	0x00081e50
   80f80:	00081385 	.word	0x00081385
   80f84:	00080595 	.word	0x00080595
   80f88:	0008067d 	.word	0x0008067d
   80f8c:	00080575 	.word	0x00080575

00080f90 <_ZN9Reporting10reportTextE8PriorityPKc>:

void Reporting::reportText(Priority p, const char* text) {
   80f90:	b530      	push	{r4, r5, lr}
   80f92:	4615      	mov	r5, r2
   80f94:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
    if (p == PRIORITY_DEBUG) {
   80f98:	460c      	mov	r4, r1
   80f9a:	b931      	cbnz	r1, 80faa <_ZN9Reporting10reportTextE8PriorityPKc+0x1a>
      #ifdef DEBUG
        Display disp = Display();
   80f9c:	a802      	add	r0, sp, #8
   80f9e:	4b0d      	ldr	r3, [pc, #52]	; (80fd4 <_ZN9Reporting10reportTextE8PriorityPKc+0x44>)
   80fa0:	4798      	blx	r3
        disp.drawText(0, 0, SMALL_FONT, text);
   80fa2:	9500      	str	r5, [sp, #0]
   80fa4:	a802      	add	r0, sp, #8
   80fa6:	4621      	mov	r1, r4
   80fa8:	e007      	b.n	80fba <_ZN9Reporting10reportTextE8PriorityPKc+0x2a>
        disp.paint();
      #endif
    }
    else if (p == PRIORITY_PANIC) {
   80faa:	2901      	cmp	r1, #1
   80fac:	d10f      	bne.n	80fce <_ZN9Reporting10reportTextE8PriorityPKc+0x3e>
        Display disp = Display();
   80fae:	a802      	add	r0, sp, #8
   80fb0:	4b08      	ldr	r3, [pc, #32]	; (80fd4 <_ZN9Reporting10reportTextE8PriorityPKc+0x44>)
   80fb2:	4798      	blx	r3
        disp.drawText(0, 0, SMALL_FONT, text);
   80fb4:	9500      	str	r5, [sp, #0]
   80fb6:	a802      	add	r0, sp, #8
   80fb8:	2100      	movs	r1, #0
   80fba:	460b      	mov	r3, r1
   80fbc:	460a      	mov	r2, r1
   80fbe:	4c06      	ldr	r4, [pc, #24]	; (80fd8 <_ZN9Reporting10reportTextE8PriorityPKc+0x48>)
   80fc0:	47a0      	blx	r4
        disp.paint();
   80fc2:	a802      	add	r0, sp, #8
   80fc4:	4b05      	ldr	r3, [pc, #20]	; (80fdc <_ZN9Reporting10reportTextE8PriorityPKc+0x4c>)
   80fc6:	4798      	blx	r3
   80fc8:	a802      	add	r0, sp, #8
   80fca:	4b05      	ldr	r3, [pc, #20]	; (80fe0 <_ZN9Reporting10reportTextE8PriorityPKc+0x50>)
   80fcc:	4798      	blx	r3
    }
}
   80fce:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
   80fd2:	bd30      	pop	{r4, r5, pc}
   80fd4:	00080521 	.word	0x00080521
   80fd8:	00080595 	.word	0x00080595
   80fdc:	0008067d 	.word	0x0008067d
   80fe0:	00080575 	.word	0x00080575

00080fe4 <_ZN9Reporting8InstanceEv>:

    // Make this a singleton
    Reporting(Reporting const&);
    void operator=(Reporting const&);
  public:
    static Reporting &Instance() {
   80fe4:	b510      	push	{r4, lr}
        static Reporting instance;
   80fe6:	4c09      	ldr	r4, [pc, #36]	; (8100c <_ZN9Reporting8InstanceEv+0x28>)
   80fe8:	6823      	ldr	r3, [r4, #0]
   80fea:	07db      	lsls	r3, r3, #31
   80fec:	d40b      	bmi.n	81006 <_ZN9Reporting8InstanceEv+0x22>
   80fee:	4620      	mov	r0, r4
   80ff0:	4b07      	ldr	r3, [pc, #28]	; (81010 <_ZN9Reporting8InstanceEv+0x2c>)
   80ff2:	4798      	blx	r3
   80ff4:	b138      	cbz	r0, 81006 <_ZN9Reporting8InstanceEv+0x22>
enum Priority { PRIORITY_DEBUG, PRIORITY_PANIC};

class Reporting {
  private:
    Reporting() {
        srwp = (ShiftRegistersWriteParams*)malloc(sizeof(ShiftRegistersWriteParams));
   80ff6:	4b07      	ldr	r3, [pc, #28]	; (81014 <_ZN9Reporting8InstanceEv+0x30>)
   80ff8:	2008      	movs	r0, #8
   80ffa:	4798      	blx	r3
   80ffc:	4b06      	ldr	r3, [pc, #24]	; (81018 <_ZN9Reporting8InstanceEv+0x34>)
   80ffe:	6018      	str	r0, [r3, #0]
    // Make this a singleton
    Reporting(Reporting const&);
    void operator=(Reporting const&);
  public:
    static Reporting &Instance() {
        static Reporting instance;
   81000:	4620      	mov	r0, r4
   81002:	4b06      	ldr	r3, [pc, #24]	; (8101c <_ZN9Reporting8InstanceEv+0x38>)
   81004:	4798      	blx	r3
        return instance;
    };
   81006:	4804      	ldr	r0, [pc, #16]	; (81018 <_ZN9Reporting8InstanceEv+0x34>)
   81008:	bd10      	pop	{r4, pc}
   8100a:	bf00      	nop
   8100c:	20000094 	.word	0x20000094
   81010:	000810fd 	.word	0x000810fd
   81014:	00081179 	.word	0x00081179
   81018:	20000090 	.word	0x20000090
   8101c:	00081119 	.word	0x00081119

00081020 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   81020:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Initialize the SAM system */
    SystemInit();
   81022:	4b23      	ldr	r3, [pc, #140]	; (810b0 <main+0x90>)
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   81024:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
    /* Initialize the SAM system */
    SystemInit();

    Reporting::Instance().reportCode(PRIORITY_DEBUG, LIGHTS, 0xDEADBEEF);
   81028:	4e22      	ldr	r6, [pc, #136]	; (810b4 <main+0x94>)
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    /* Initialize the SAM system */
    SystemInit();
   8102a:	4798      	blx	r3

    Reporting::Instance().reportCode(PRIORITY_DEBUG, LIGHTS, 0xDEADBEEF);
   8102c:	47b0      	blx	r6
   8102e:	2100      	movs	r1, #0
   81030:	460a      	mov	r2, r1
   81032:	4d21      	ldr	r5, [pc, #132]	; (810b8 <main+0x98>)
   81034:	4b21      	ldr	r3, [pc, #132]	; (810bc <main+0x9c>)
   81036:	47a8      	blx	r5
    //Reporting::Instance().reportCode(d, LIGHTS, 0x00080008);
    //SSD1305::Instance().open((void*)&ssdp);
    //Reporting::Instance().reportCode(d, LIGHTS, 0xFFFF0000);
    //SSD1305::Instance().write((void*)&ssdp);

    Display disp = Display();
   81038:	4b21      	ldr	r3, [pc, #132]	; (810c0 <main+0xa0>)
   8103a:	a802      	add	r0, sp, #8
   8103c:	4798      	blx	r3
    //disp.drawLine(0, 0, 0, 31);
    //disp.drawPixel(0, 0);
    //disp.drawPixel(127, 0);
    //disp.drawPixel(127, 31);
    //disp.drawPixel(0, 31);
    disp.drawText(0, 0, SMALL_FONT, "hello\nworld!");
   8103e:	4b21      	ldr	r3, [pc, #132]	; (810c4 <main+0xa4>)
   81040:	2100      	movs	r1, #0
   81042:	9300      	str	r3, [sp, #0]
   81044:	a802      	add	r0, sp, #8
   81046:	460b      	mov	r3, r1
   81048:	460a      	mov	r2, r1
   8104a:	4c1f      	ldr	r4, [pc, #124]	; (810c8 <main+0xa8>)
   8104c:	47a0      	blx	r4
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   8104e:	4c1f      	ldr	r4, [pc, #124]	; (810cc <main+0xac>)
    disp.paint();
   81050:	4b1f      	ldr	r3, [pc, #124]	; (810d0 <main+0xb0>)
   81052:	a802      	add	r0, sp, #8
   81054:	4798      	blx	r3
   81056:	6823      	ldr	r3, [r4, #0]
   81058:	462f      	mov	r7, r5
   8105a:	f013 0f01 	tst.w	r3, #1
   8105e:	4d1d      	ldr	r5, [pc, #116]	; (810d4 <main+0xb4>)
   81060:	d108      	bne.n	81074 <main+0x54>
   81062:	4620      	mov	r0, r4
   81064:	4b1c      	ldr	r3, [pc, #112]	; (810d8 <main+0xb8>)
   81066:	4798      	blx	r3
   81068:	b120      	cbz	r0, 81074 <main+0x54>
    // Volatile, because these will change during interrupts
    volatile EncodersStatus status;
    volatile EncoderState *states[4];

    // Define as a singleton
    Encoders() {};
   8106a:	4b1c      	ldr	r3, [pc, #112]	; (810dc <main+0xbc>)
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   8106c:	4620      	mov	r0, r4
    // Volatile, because these will change during interrupts
    volatile EncodersStatus status;
    volatile EncoderState *states[4];

    // Define as a singleton
    Encoders() {};
   8106e:	602b      	str	r3, [r5, #0]
    Encoders(Encoders const&);
    void operator=(Encoders const&);
  public:
    static Encoders& Instance()
    {
        static Encoders instance;
   81070:	4b1b      	ldr	r3, [pc, #108]	; (810e0 <main+0xc0>)
   81072:	4798      	blx	r3

    Encoders::Instance().open(NULL);
   81074:	682b      	ldr	r3, [r5, #0]
   81076:	2100      	movs	r1, #0
   81078:	681b      	ldr	r3, [r3, #0]
   8107a:	4816      	ldr	r0, [pc, #88]	; (810d4 <main+0xb4>)
   8107c:	4798      	blx	r3

    Reporting::Instance().reportCode(PRIORITY_DEBUG, LIGHTS, 0xAAAA5555);
   8107e:	47b0      	blx	r6
   81080:	2100      	movs	r1, #0
   81082:	460a      	mov	r2, r1
   81084:	4b17      	ldr	r3, [pc, #92]	; (810e4 <main+0xc4>)
   81086:	47b8      	blx	r7
    

    pinSetMode(A, 8, OUTPUT);
   81088:	2000      	movs	r0, #0
   8108a:	2108      	movs	r1, #8
   8108c:	4b16      	ldr	r3, [pc, #88]	; (810e8 <main+0xc8>)
   8108e:	2201      	movs	r2, #1
   81090:	4798      	blx	r3
    pinDisablePullup(A, 8);
   81092:	2000      	movs	r0, #0
   81094:	2108      	movs	r1, #8
   81096:	4b15      	ldr	r3, [pc, #84]	; (810ec <main+0xcc>)
   81098:	4798      	blx	r3
    while (1) 
    {
        pinSetOutput(A, 8, HIGH);
   8109a:	2000      	movs	r0, #0
   8109c:	2108      	movs	r1, #8
   8109e:	2201      	movs	r2, #1
   810a0:	4c13      	ldr	r4, [pc, #76]	; (810f0 <main+0xd0>)
   810a2:	47a0      	blx	r4
        pinSetOutput(A, 8, LOW);
   810a4:	2000      	movs	r0, #0
   810a6:	2108      	movs	r1, #8
   810a8:	4602      	mov	r2, r0
   810aa:	47a0      	blx	r4
   810ac:	e7f5      	b.n	8109a <main+0x7a>
   810ae:	bf00      	nop
   810b0:	000801bd 	.word	0x000801bd
   810b4:	00080fe5 	.word	0x00080fe5
   810b8:	00080f05 	.word	0x00080f05
   810bc:	deadbeef 	.word	0xdeadbeef
   810c0:	00080521 	.word	0x00080521
   810c4:	00081e55 	.word	0x00081e55
   810c8:	00080595 	.word	0x00080595
   810cc:	200000d0 	.word	0x200000d0
   810d0:	0008067d 	.word	0x0008067d
   810d4:	200000b4 	.word	0x200000b4
   810d8:	000810fd 	.word	0x000810fd
   810dc:	00081dc0 	.word	0x00081dc0
   810e0:	00081119 	.word	0x00081119
   810e4:	aaaa5555 	.word	0xaaaa5555
   810e8:	00080255 	.word	0x00080255
   810ec:	000803e1 	.word	0x000803e1
   810f0:	00080429 	.word	0x00080429

000810f4 <_ZdlPv>:
   810f4:	b108      	cbz	r0, 810fa <_ZdlPv+0x6>
   810f6:	f000 b847 	b.w	81188 <free>
   810fa:	4770      	bx	lr

000810fc <__cxa_guard_acquire>:
   810fc:	b508      	push	{r3, lr}
   810fe:	6803      	ldr	r3, [r0, #0]
   81100:	07db      	lsls	r3, r3, #31
   81102:	d407      	bmi.n	81114 <__cxa_guard_acquire+0x18>
   81104:	7843      	ldrb	r3, [r0, #1]
   81106:	b10b      	cbz	r3, 8110c <__cxa_guard_acquire+0x10>
   81108:	f000 f809 	bl	8111e <abort>
   8110c:	2301      	movs	r3, #1
   8110e:	7043      	strb	r3, [r0, #1]
   81110:	4618      	mov	r0, r3
   81112:	bd08      	pop	{r3, pc}
   81114:	2000      	movs	r0, #0
   81116:	bd08      	pop	{r3, pc}

00081118 <__cxa_guard_release>:
   81118:	2301      	movs	r3, #1
   8111a:	6003      	str	r3, [r0, #0]
   8111c:	4770      	bx	lr

0008111e <abort>:
   8111e:	b508      	push	{r3, lr}
   81120:	2006      	movs	r0, #6
   81122:	f000 f913 	bl	8134c <raise>
   81126:	2001      	movs	r0, #1
   81128:	f000 fca8 	bl	81a7c <_exit>

0008112c <__libc_init_array>:
   8112c:	b570      	push	{r4, r5, r6, lr}
   8112e:	4b0e      	ldr	r3, [pc, #56]	; (81168 <__libc_init_array+0x3c>)
   81130:	4d0e      	ldr	r5, [pc, #56]	; (8116c <__libc_init_array+0x40>)
   81132:	2400      	movs	r4, #0
   81134:	1aed      	subs	r5, r5, r3
   81136:	10ad      	asrs	r5, r5, #2
   81138:	461e      	mov	r6, r3
   8113a:	42ac      	cmp	r4, r5
   8113c:	d004      	beq.n	81148 <__libc_init_array+0x1c>
   8113e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81142:	4790      	blx	r2
   81144:	3401      	adds	r4, #1
   81146:	e7f8      	b.n	8113a <__libc_init_array+0xe>
   81148:	f000 fea6 	bl	81e98 <_init>
   8114c:	4d08      	ldr	r5, [pc, #32]	; (81170 <__libc_init_array+0x44>)
   8114e:	4b09      	ldr	r3, [pc, #36]	; (81174 <__libc_init_array+0x48>)
   81150:	2400      	movs	r4, #0
   81152:	1aed      	subs	r5, r5, r3
   81154:	10ad      	asrs	r5, r5, #2
   81156:	461e      	mov	r6, r3
   81158:	42ac      	cmp	r4, r5
   8115a:	d004      	beq.n	81166 <__libc_init_array+0x3a>
   8115c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   81160:	4790      	blx	r2
   81162:	3401      	adds	r4, #1
   81164:	e7f8      	b.n	81158 <__libc_init_array+0x2c>
   81166:	bd70      	pop	{r4, r5, r6, pc}
   81168:	00081ea4 	.word	0x00081ea4
   8116c:	00081ea4 	.word	0x00081ea4
   81170:	00081ea8 	.word	0x00081ea8
   81174:	00081ea4 	.word	0x00081ea4

00081178 <malloc>:
   81178:	4b02      	ldr	r3, [pc, #8]	; (81184 <malloc+0xc>)
   8117a:	4601      	mov	r1, r0
   8117c:	6818      	ldr	r0, [r3, #0]
   8117e:	f000 b859 	b.w	81234 <_malloc_r>
   81182:	bf00      	nop
   81184:	20000064 	.word	0x20000064

00081188 <free>:
   81188:	4b02      	ldr	r3, [pc, #8]	; (81194 <free+0xc>)
   8118a:	4601      	mov	r1, r0
   8118c:	6818      	ldr	r0, [r3, #0]
   8118e:	f000 b80d 	b.w	811ac <_free_r>
   81192:	bf00      	nop
   81194:	20000064 	.word	0x20000064

00081198 <memcpy>:
   81198:	b510      	push	{r4, lr}
   8119a:	2300      	movs	r3, #0
   8119c:	4293      	cmp	r3, r2
   8119e:	d003      	beq.n	811a8 <memcpy+0x10>
   811a0:	5ccc      	ldrb	r4, [r1, r3]
   811a2:	54c4      	strb	r4, [r0, r3]
   811a4:	3301      	adds	r3, #1
   811a6:	e7f9      	b.n	8119c <memcpy+0x4>
   811a8:	bd10      	pop	{r4, pc}
	...

000811ac <_free_r>:
   811ac:	b530      	push	{r4, r5, lr}
   811ae:	2900      	cmp	r1, #0
   811b0:	d03c      	beq.n	8122c <_free_r+0x80>
   811b2:	f851 2c04 	ldr.w	r2, [r1, #-4]
   811b6:	1f0b      	subs	r3, r1, #4
   811b8:	491d      	ldr	r1, [pc, #116]	; (81230 <_free_r+0x84>)
   811ba:	2a00      	cmp	r2, #0
   811bc:	bfb8      	it	lt
   811be:	189b      	addlt	r3, r3, r2
   811c0:	680a      	ldr	r2, [r1, #0]
   811c2:	460c      	mov	r4, r1
   811c4:	b912      	cbnz	r2, 811cc <_free_r+0x20>
   811c6:	605a      	str	r2, [r3, #4]
   811c8:	600b      	str	r3, [r1, #0]
   811ca:	bd30      	pop	{r4, r5, pc}
   811cc:	4293      	cmp	r3, r2
   811ce:	d20d      	bcs.n	811ec <_free_r+0x40>
   811d0:	6819      	ldr	r1, [r3, #0]
   811d2:	1858      	adds	r0, r3, r1
   811d4:	4290      	cmp	r0, r2
   811d6:	d103      	bne.n	811e0 <_free_r+0x34>
   811d8:	585a      	ldr	r2, [r3, r1]
   811da:	4411      	add	r1, r2
   811dc:	6842      	ldr	r2, [r0, #4]
   811de:	6019      	str	r1, [r3, #0]
   811e0:	605a      	str	r2, [r3, #4]
   811e2:	6023      	str	r3, [r4, #0]
   811e4:	bd30      	pop	{r4, r5, pc}
   811e6:	4299      	cmp	r1, r3
   811e8:	d803      	bhi.n	811f2 <_free_r+0x46>
   811ea:	460a      	mov	r2, r1
   811ec:	6851      	ldr	r1, [r2, #4]
   811ee:	2900      	cmp	r1, #0
   811f0:	d1f9      	bne.n	811e6 <_free_r+0x3a>
   811f2:	6814      	ldr	r4, [r2, #0]
   811f4:	1915      	adds	r5, r2, r4
   811f6:	429d      	cmp	r5, r3
   811f8:	d10a      	bne.n	81210 <_free_r+0x64>
   811fa:	681b      	ldr	r3, [r3, #0]
   811fc:	4423      	add	r3, r4
   811fe:	18d0      	adds	r0, r2, r3
   81200:	4288      	cmp	r0, r1
   81202:	6013      	str	r3, [r2, #0]
   81204:	d112      	bne.n	8122c <_free_r+0x80>
   81206:	6808      	ldr	r0, [r1, #0]
   81208:	4403      	add	r3, r0
   8120a:	6013      	str	r3, [r2, #0]
   8120c:	684b      	ldr	r3, [r1, #4]
   8120e:	e00c      	b.n	8122a <_free_r+0x7e>
   81210:	d902      	bls.n	81218 <_free_r+0x6c>
   81212:	230c      	movs	r3, #12
   81214:	6003      	str	r3, [r0, #0]
   81216:	bd30      	pop	{r4, r5, pc}
   81218:	6818      	ldr	r0, [r3, #0]
   8121a:	181c      	adds	r4, r3, r0
   8121c:	428c      	cmp	r4, r1
   8121e:	d103      	bne.n	81228 <_free_r+0x7c>
   81220:	680c      	ldr	r4, [r1, #0]
   81222:	6849      	ldr	r1, [r1, #4]
   81224:	4420      	add	r0, r4
   81226:	6018      	str	r0, [r3, #0]
   81228:	6059      	str	r1, [r3, #4]
   8122a:	6053      	str	r3, [r2, #4]
   8122c:	bd30      	pop	{r4, r5, pc}
   8122e:	bf00      	nop
   81230:	200000d8 	.word	0x200000d8

00081234 <_malloc_r>:
   81234:	b570      	push	{r4, r5, r6, lr}
   81236:	1ccd      	adds	r5, r1, #3
   81238:	f025 0503 	bic.w	r5, r5, #3
   8123c:	3508      	adds	r5, #8
   8123e:	2d0c      	cmp	r5, #12
   81240:	bf38      	it	cc
   81242:	250c      	movcc	r5, #12
   81244:	2d00      	cmp	r5, #0
   81246:	4606      	mov	r6, r0
   81248:	db3f      	blt.n	812ca <_malloc_r+0x96>
   8124a:	428d      	cmp	r5, r1
   8124c:	d33d      	bcc.n	812ca <_malloc_r+0x96>
   8124e:	4b21      	ldr	r3, [pc, #132]	; (812d4 <_malloc_r+0xa0>)
   81250:	681c      	ldr	r4, [r3, #0]
   81252:	4618      	mov	r0, r3
   81254:	4621      	mov	r1, r4
   81256:	b1a1      	cbz	r1, 81282 <_malloc_r+0x4e>
   81258:	680b      	ldr	r3, [r1, #0]
   8125a:	1b5b      	subs	r3, r3, r5
   8125c:	d40e      	bmi.n	8127c <_malloc_r+0x48>
   8125e:	2b0b      	cmp	r3, #11
   81260:	d903      	bls.n	8126a <_malloc_r+0x36>
   81262:	600b      	str	r3, [r1, #0]
   81264:	18cc      	adds	r4, r1, r3
   81266:	50cd      	str	r5, [r1, r3]
   81268:	e01f      	b.n	812aa <_malloc_r+0x76>
   8126a:	428c      	cmp	r4, r1
   8126c:	d102      	bne.n	81274 <_malloc_r+0x40>
   8126e:	6862      	ldr	r2, [r4, #4]
   81270:	6002      	str	r2, [r0, #0]
   81272:	e01a      	b.n	812aa <_malloc_r+0x76>
   81274:	684b      	ldr	r3, [r1, #4]
   81276:	6063      	str	r3, [r4, #4]
   81278:	460c      	mov	r4, r1
   8127a:	e016      	b.n	812aa <_malloc_r+0x76>
   8127c:	460c      	mov	r4, r1
   8127e:	6849      	ldr	r1, [r1, #4]
   81280:	e7e9      	b.n	81256 <_malloc_r+0x22>
   81282:	4c15      	ldr	r4, [pc, #84]	; (812d8 <_malloc_r+0xa4>)
   81284:	6823      	ldr	r3, [r4, #0]
   81286:	b91b      	cbnz	r3, 81290 <_malloc_r+0x5c>
   81288:	4630      	mov	r0, r6
   8128a:	f000 f827 	bl	812dc <_sbrk_r>
   8128e:	6020      	str	r0, [r4, #0]
   81290:	4629      	mov	r1, r5
   81292:	4630      	mov	r0, r6
   81294:	f000 f822 	bl	812dc <_sbrk_r>
   81298:	1c43      	adds	r3, r0, #1
   8129a:	4601      	mov	r1, r0
   8129c:	d015      	beq.n	812ca <_malloc_r+0x96>
   8129e:	1cc4      	adds	r4, r0, #3
   812a0:	f024 0403 	bic.w	r4, r4, #3
   812a4:	4284      	cmp	r4, r0
   812a6:	d10a      	bne.n	812be <_malloc_r+0x8a>
   812a8:	6025      	str	r5, [r4, #0]
   812aa:	f104 000b 	add.w	r0, r4, #11
   812ae:	1d23      	adds	r3, r4, #4
   812b0:	f020 0007 	bic.w	r0, r0, #7
   812b4:	1ac3      	subs	r3, r0, r3
   812b6:	d00b      	beq.n	812d0 <_malloc_r+0x9c>
   812b8:	425a      	negs	r2, r3
   812ba:	50e2      	str	r2, [r4, r3]
   812bc:	bd70      	pop	{r4, r5, r6, pc}
   812be:	4630      	mov	r0, r6
   812c0:	1a61      	subs	r1, r4, r1
   812c2:	f000 f80b 	bl	812dc <_sbrk_r>
   812c6:	3001      	adds	r0, #1
   812c8:	d1ee      	bne.n	812a8 <_malloc_r+0x74>
   812ca:	230c      	movs	r3, #12
   812cc:	6033      	str	r3, [r6, #0]
   812ce:	2000      	movs	r0, #0
   812d0:	bd70      	pop	{r4, r5, r6, pc}
   812d2:	bf00      	nop
   812d4:	200000d8 	.word	0x200000d8
   812d8:	200000d4 	.word	0x200000d4

000812dc <_sbrk_r>:
   812dc:	b538      	push	{r3, r4, r5, lr}
   812de:	4c06      	ldr	r4, [pc, #24]	; (812f8 <_sbrk_r+0x1c>)
   812e0:	2300      	movs	r3, #0
   812e2:	4605      	mov	r5, r0
   812e4:	4608      	mov	r0, r1
   812e6:	6023      	str	r3, [r4, #0]
   812e8:	f000 fbae 	bl	81a48 <_sbrk>
   812ec:	1c43      	adds	r3, r0, #1
   812ee:	d102      	bne.n	812f6 <_sbrk_r+0x1a>
   812f0:	6823      	ldr	r3, [r4, #0]
   812f2:	b103      	cbz	r3, 812f6 <_sbrk_r+0x1a>
   812f4:	602b      	str	r3, [r5, #0]
   812f6:	bd38      	pop	{r3, r4, r5, pc}
   812f8:	200000e0 	.word	0x200000e0

000812fc <_raise_r>:
   812fc:	291f      	cmp	r1, #31
   812fe:	b538      	push	{r3, r4, r5, lr}
   81300:	4605      	mov	r5, r0
   81302:	460c      	mov	r4, r1
   81304:	d904      	bls.n	81310 <_raise_r+0x14>
   81306:	2316      	movs	r3, #22
   81308:	6003      	str	r3, [r0, #0]
   8130a:	f04f 30ff 	mov.w	r0, #4294967295
   8130e:	bd38      	pop	{r3, r4, r5, pc}
   81310:	6c42      	ldr	r2, [r0, #68]	; 0x44
   81312:	b112      	cbz	r2, 8131a <_raise_r+0x1e>
   81314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   81318:	b94b      	cbnz	r3, 8132e <_raise_r+0x32>
   8131a:	4628      	mov	r0, r5
   8131c:	f000 f830 	bl	81380 <_getpid_r>
   81320:	4622      	mov	r2, r4
   81322:	4601      	mov	r1, r0
   81324:	4628      	mov	r0, r5
   81326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8132a:	f000 b817 	b.w	8135c <_kill_r>
   8132e:	2b01      	cmp	r3, #1
   81330:	d00a      	beq.n	81348 <_raise_r+0x4c>
   81332:	1c59      	adds	r1, r3, #1
   81334:	d103      	bne.n	8133e <_raise_r+0x42>
   81336:	2316      	movs	r3, #22
   81338:	6003      	str	r3, [r0, #0]
   8133a:	2001      	movs	r0, #1
   8133c:	bd38      	pop	{r3, r4, r5, pc}
   8133e:	2500      	movs	r5, #0
   81340:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   81344:	4620      	mov	r0, r4
   81346:	4798      	blx	r3
   81348:	2000      	movs	r0, #0
   8134a:	bd38      	pop	{r3, r4, r5, pc}

0008134c <raise>:
   8134c:	4b02      	ldr	r3, [pc, #8]	; (81358 <raise+0xc>)
   8134e:	4601      	mov	r1, r0
   81350:	6818      	ldr	r0, [r3, #0]
   81352:	f7ff bfd3 	b.w	812fc <_raise_r>
   81356:	bf00      	nop
   81358:	20000064 	.word	0x20000064

0008135c <_kill_r>:
   8135c:	b538      	push	{r3, r4, r5, lr}
   8135e:	4c07      	ldr	r4, [pc, #28]	; (8137c <_kill_r+0x20>)
   81360:	2300      	movs	r3, #0
   81362:	4605      	mov	r5, r0
   81364:	4608      	mov	r0, r1
   81366:	4611      	mov	r1, r2
   81368:	6023      	str	r3, [r4, #0]
   8136a:	f000 fb65 	bl	81a38 <_kill>
   8136e:	1c43      	adds	r3, r0, #1
   81370:	d102      	bne.n	81378 <_kill_r+0x1c>
   81372:	6823      	ldr	r3, [r4, #0]
   81374:	b103      	cbz	r3, 81378 <_kill_r+0x1c>
   81376:	602b      	str	r3, [r5, #0]
   81378:	bd38      	pop	{r3, r4, r5, pc}
   8137a:	bf00      	nop
   8137c:	200000e0 	.word	0x200000e0

00081380 <_getpid_r>:
   81380:	f000 bb52 	b.w	81a28 <_getpid>

00081384 <siprintf>:
   81384:	b40e      	push	{r1, r2, r3}
   81386:	b500      	push	{lr}
   81388:	f44f 7102 	mov.w	r1, #520	; 0x208
   8138c:	b09c      	sub	sp, #112	; 0x70
   8138e:	f8ad 1014 	strh.w	r1, [sp, #20]
   81392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   81396:	9104      	str	r1, [sp, #16]
   81398:	9107      	str	r1, [sp, #28]
   8139a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   8139e:	ab1d      	add	r3, sp, #116	; 0x74
   813a0:	f8ad 1016 	strh.w	r1, [sp, #22]
   813a4:	4908      	ldr	r1, [pc, #32]	; (813c8 <siprintf+0x44>)
   813a6:	f853 2b04 	ldr.w	r2, [r3], #4
   813aa:	9002      	str	r0, [sp, #8]
   813ac:	9006      	str	r0, [sp, #24]
   813ae:	6808      	ldr	r0, [r1, #0]
   813b0:	a902      	add	r1, sp, #8
   813b2:	9301      	str	r3, [sp, #4]
   813b4:	f000 f866 	bl	81484 <_svfiprintf_r>
   813b8:	9b02      	ldr	r3, [sp, #8]
   813ba:	2200      	movs	r2, #0
   813bc:	701a      	strb	r2, [r3, #0]
   813be:	b01c      	add	sp, #112	; 0x70
   813c0:	f85d eb04 	ldr.w	lr, [sp], #4
   813c4:	b003      	add	sp, #12
   813c6:	4770      	bx	lr
   813c8:	20000064 	.word	0x20000064

000813cc <__ssputs_r>:
   813cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   813d0:	688d      	ldr	r5, [r1, #8]
   813d2:	4681      	mov	r9, r0
   813d4:	42ab      	cmp	r3, r5
   813d6:	460c      	mov	r4, r1
   813d8:	4692      	mov	sl, r2
   813da:	461f      	mov	r7, r3
   813dc:	d343      	bcc.n	81466 <__ssputs_r+0x9a>
   813de:	898b      	ldrh	r3, [r1, #12]
   813e0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   813e4:	d03d      	beq.n	81462 <__ssputs_r+0x96>
   813e6:	6826      	ldr	r6, [r4, #0]
   813e8:	6909      	ldr	r1, [r1, #16]
   813ea:	2202      	movs	r2, #2
   813ec:	ebc1 0806 	rsb	r8, r1, r6
   813f0:	6966      	ldr	r6, [r4, #20]
   813f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   813f6:	fb96 f6f2 	sdiv	r6, r6, r2
   813fa:	f108 0201 	add.w	r2, r8, #1
   813fe:	443a      	add	r2, r7
   81400:	4296      	cmp	r6, r2
   81402:	bf38      	it	cc
   81404:	4616      	movcc	r6, r2
   81406:	055b      	lsls	r3, r3, #21
   81408:	d50f      	bpl.n	8142a <__ssputs_r+0x5e>
   8140a:	4631      	mov	r1, r6
   8140c:	f7ff ff12 	bl	81234 <_malloc_r>
   81410:	4605      	mov	r5, r0
   81412:	b198      	cbz	r0, 8143c <__ssputs_r+0x70>
   81414:	6921      	ldr	r1, [r4, #16]
   81416:	4642      	mov	r2, r8
   81418:	f7ff febe 	bl	81198 <memcpy>
   8141c:	89a3      	ldrh	r3, [r4, #12]
   8141e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   81422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81426:	81a3      	strh	r3, [r4, #12]
   81428:	e013      	b.n	81452 <__ssputs_r+0x86>
   8142a:	4632      	mov	r2, r6
   8142c:	f000 fac5 	bl	819ba <_realloc_r>
   81430:	4605      	mov	r5, r0
   81432:	b970      	cbnz	r0, 81452 <__ssputs_r+0x86>
   81434:	4648      	mov	r0, r9
   81436:	6921      	ldr	r1, [r4, #16]
   81438:	f7ff feb8 	bl	811ac <_free_r>
   8143c:	230c      	movs	r3, #12
   8143e:	f8c9 3000 	str.w	r3, [r9]
   81442:	89a3      	ldrh	r3, [r4, #12]
   81444:	f04f 30ff 	mov.w	r0, #4294967295
   81448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8144c:	81a3      	strh	r3, [r4, #12]
   8144e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81452:	6125      	str	r5, [r4, #16]
   81454:	6166      	str	r6, [r4, #20]
   81456:	4445      	add	r5, r8
   81458:	ebc8 0606 	rsb	r6, r8, r6
   8145c:	6025      	str	r5, [r4, #0]
   8145e:	60a6      	str	r6, [r4, #8]
   81460:	463d      	mov	r5, r7
   81462:	42af      	cmp	r7, r5
   81464:	d200      	bcs.n	81468 <__ssputs_r+0x9c>
   81466:	463d      	mov	r5, r7
   81468:	462a      	mov	r2, r5
   8146a:	6820      	ldr	r0, [r4, #0]
   8146c:	4651      	mov	r1, sl
   8146e:	f000 fa89 	bl	81984 <memmove>
   81472:	68a3      	ldr	r3, [r4, #8]
   81474:	2000      	movs	r0, #0
   81476:	1b5b      	subs	r3, r3, r5
   81478:	60a3      	str	r3, [r4, #8]
   8147a:	6823      	ldr	r3, [r4, #0]
   8147c:	441d      	add	r5, r3
   8147e:	6025      	str	r5, [r4, #0]
   81480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081484 <_svfiprintf_r>:
   81484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81488:	b09d      	sub	sp, #116	; 0x74
   8148a:	9303      	str	r3, [sp, #12]
   8148c:	898b      	ldrh	r3, [r1, #12]
   8148e:	4607      	mov	r7, r0
   81490:	061c      	lsls	r4, r3, #24
   81492:	460d      	mov	r5, r1
   81494:	4616      	mov	r6, r2
   81496:	d50c      	bpl.n	814b2 <_svfiprintf_r+0x2e>
   81498:	690b      	ldr	r3, [r1, #16]
   8149a:	b953      	cbnz	r3, 814b2 <_svfiprintf_r+0x2e>
   8149c:	2140      	movs	r1, #64	; 0x40
   8149e:	f7ff fec9 	bl	81234 <_malloc_r>
   814a2:	6028      	str	r0, [r5, #0]
   814a4:	6128      	str	r0, [r5, #16]
   814a6:	b910      	cbnz	r0, 814ae <_svfiprintf_r+0x2a>
   814a8:	230c      	movs	r3, #12
   814aa:	603b      	str	r3, [r7, #0]
   814ac:	e0c7      	b.n	8163e <_svfiprintf_r+0x1ba>
   814ae:	2340      	movs	r3, #64	; 0x40
   814b0:	616b      	str	r3, [r5, #20]
   814b2:	2300      	movs	r3, #0
   814b4:	9309      	str	r3, [sp, #36]	; 0x24
   814b6:	2320      	movs	r3, #32
   814b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   814bc:	2330      	movs	r3, #48	; 0x30
   814be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   814c2:	4633      	mov	r3, r6
   814c4:	461c      	mov	r4, r3
   814c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   814ca:	b91a      	cbnz	r2, 814d4 <_svfiprintf_r+0x50>
   814cc:	ebb4 0906 	subs.w	r9, r4, r6
   814d0:	d00f      	beq.n	814f2 <_svfiprintf_r+0x6e>
   814d2:	e002      	b.n	814da <_svfiprintf_r+0x56>
   814d4:	2a25      	cmp	r2, #37	; 0x25
   814d6:	d1f5      	bne.n	814c4 <_svfiprintf_r+0x40>
   814d8:	e7f8      	b.n	814cc <_svfiprintf_r+0x48>
   814da:	4638      	mov	r0, r7
   814dc:	4629      	mov	r1, r5
   814de:	4632      	mov	r2, r6
   814e0:	464b      	mov	r3, r9
   814e2:	f7ff ff73 	bl	813cc <__ssputs_r>
   814e6:	3001      	adds	r0, #1
   814e8:	f000 80a4 	beq.w	81634 <_svfiprintf_r+0x1b0>
   814ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   814ee:	444b      	add	r3, r9
   814f0:	9309      	str	r3, [sp, #36]	; 0x24
   814f2:	7823      	ldrb	r3, [r4, #0]
   814f4:	2b00      	cmp	r3, #0
   814f6:	f000 809d 	beq.w	81634 <_svfiprintf_r+0x1b0>
   814fa:	2300      	movs	r3, #0
   814fc:	f04f 32ff 	mov.w	r2, #4294967295
   81500:	9304      	str	r3, [sp, #16]
   81502:	9307      	str	r3, [sp, #28]
   81504:	9205      	str	r2, [sp, #20]
   81506:	9306      	str	r3, [sp, #24]
   81508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   8150c:	931a      	str	r3, [sp, #104]	; 0x68
   8150e:	f104 0901 	add.w	r9, r4, #1
   81512:	4e4d      	ldr	r6, [pc, #308]	; (81648 <_svfiprintf_r+0x1c4>)
   81514:	464c      	mov	r4, r9
   81516:	4630      	mov	r0, r6
   81518:	7821      	ldrb	r1, [r4, #0]
   8151a:	2205      	movs	r2, #5
   8151c:	f000 fa24 	bl	81968 <memchr>
   81520:	f109 0901 	add.w	r9, r9, #1
   81524:	9b04      	ldr	r3, [sp, #16]
   81526:	b128      	cbz	r0, 81534 <_svfiprintf_r+0xb0>
   81528:	1b86      	subs	r6, r0, r6
   8152a:	2001      	movs	r0, #1
   8152c:	40b0      	lsls	r0, r6
   8152e:	4303      	orrs	r3, r0
   81530:	9304      	str	r3, [sp, #16]
   81532:	e7ee      	b.n	81512 <_svfiprintf_r+0x8e>
   81534:	06d9      	lsls	r1, r3, #27
   81536:	bf44      	itt	mi
   81538:	2220      	movmi	r2, #32
   8153a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   8153e:	071a      	lsls	r2, r3, #28
   81540:	bf44      	itt	mi
   81542:	222b      	movmi	r2, #43	; 0x2b
   81544:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   81548:	7822      	ldrb	r2, [r4, #0]
   8154a:	2a2a      	cmp	r2, #42	; 0x2a
   8154c:	d002      	beq.n	81554 <_svfiprintf_r+0xd0>
   8154e:	9b07      	ldr	r3, [sp, #28]
   81550:	4621      	mov	r1, r4
   81552:	e00e      	b.n	81572 <_svfiprintf_r+0xee>
   81554:	9a03      	ldr	r2, [sp, #12]
   81556:	1d11      	adds	r1, r2, #4
   81558:	6812      	ldr	r2, [r2, #0]
   8155a:	9103      	str	r1, [sp, #12]
   8155c:	2a00      	cmp	r2, #0
   8155e:	db01      	blt.n	81564 <_svfiprintf_r+0xe0>
   81560:	9207      	str	r2, [sp, #28]
   81562:	e004      	b.n	8156e <_svfiprintf_r+0xea>
   81564:	4252      	negs	r2, r2
   81566:	f043 0302 	orr.w	r3, r3, #2
   8156a:	9207      	str	r2, [sp, #28]
   8156c:	9304      	str	r3, [sp, #16]
   8156e:	3401      	adds	r4, #1
   81570:	e00a      	b.n	81588 <_svfiprintf_r+0x104>
   81572:	460c      	mov	r4, r1
   81574:	7822      	ldrb	r2, [r4, #0]
   81576:	3101      	adds	r1, #1
   81578:	3a30      	subs	r2, #48	; 0x30
   8157a:	2a09      	cmp	r2, #9
   8157c:	d803      	bhi.n	81586 <_svfiprintf_r+0x102>
   8157e:	200a      	movs	r0, #10
   81580:	fb00 2303 	mla	r3, r0, r3, r2
   81584:	e7f5      	b.n	81572 <_svfiprintf_r+0xee>
   81586:	9307      	str	r3, [sp, #28]
   81588:	7823      	ldrb	r3, [r4, #0]
   8158a:	2b2e      	cmp	r3, #46	; 0x2e
   8158c:	d119      	bne.n	815c2 <_svfiprintf_r+0x13e>
   8158e:	7863      	ldrb	r3, [r4, #1]
   81590:	2b2a      	cmp	r3, #42	; 0x2a
   81592:	d109      	bne.n	815a8 <_svfiprintf_r+0x124>
   81594:	9b03      	ldr	r3, [sp, #12]
   81596:	3402      	adds	r4, #2
   81598:	1d1a      	adds	r2, r3, #4
   8159a:	681b      	ldr	r3, [r3, #0]
   8159c:	9203      	str	r2, [sp, #12]
   8159e:	2b00      	cmp	r3, #0
   815a0:	bfb8      	it	lt
   815a2:	f04f 33ff 	movlt.w	r3, #4294967295
   815a6:	e00b      	b.n	815c0 <_svfiprintf_r+0x13c>
   815a8:	1c61      	adds	r1, r4, #1
   815aa:	2300      	movs	r3, #0
   815ac:	460c      	mov	r4, r1
   815ae:	7822      	ldrb	r2, [r4, #0]
   815b0:	3101      	adds	r1, #1
   815b2:	3a30      	subs	r2, #48	; 0x30
   815b4:	2a09      	cmp	r2, #9
   815b6:	d803      	bhi.n	815c0 <_svfiprintf_r+0x13c>
   815b8:	200a      	movs	r0, #10
   815ba:	fb00 2303 	mla	r3, r0, r3, r2
   815be:	e7f5      	b.n	815ac <_svfiprintf_r+0x128>
   815c0:	9305      	str	r3, [sp, #20]
   815c2:	4e22      	ldr	r6, [pc, #136]	; (8164c <_svfiprintf_r+0x1c8>)
   815c4:	7821      	ldrb	r1, [r4, #0]
   815c6:	4630      	mov	r0, r6
   815c8:	2203      	movs	r2, #3
   815ca:	f000 f9cd 	bl	81968 <memchr>
   815ce:	b130      	cbz	r0, 815de <_svfiprintf_r+0x15a>
   815d0:	1b86      	subs	r6, r0, r6
   815d2:	2040      	movs	r0, #64	; 0x40
   815d4:	40b0      	lsls	r0, r6
   815d6:	9b04      	ldr	r3, [sp, #16]
   815d8:	3401      	adds	r4, #1
   815da:	4303      	orrs	r3, r0
   815dc:	9304      	str	r3, [sp, #16]
   815de:	7821      	ldrb	r1, [r4, #0]
   815e0:	481b      	ldr	r0, [pc, #108]	; (81650 <_svfiprintf_r+0x1cc>)
   815e2:	2206      	movs	r2, #6
   815e4:	1c66      	adds	r6, r4, #1
   815e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   815ea:	f000 f9bd 	bl	81968 <memchr>
   815ee:	b188      	cbz	r0, 81614 <_svfiprintf_r+0x190>
   815f0:	4b18      	ldr	r3, [pc, #96]	; (81654 <_svfiprintf_r+0x1d0>)
   815f2:	b933      	cbnz	r3, 81602 <_svfiprintf_r+0x17e>
   815f4:	9b03      	ldr	r3, [sp, #12]
   815f6:	3307      	adds	r3, #7
   815f8:	f023 0307 	bic.w	r3, r3, #7
   815fc:	3308      	adds	r3, #8
   815fe:	9303      	str	r3, [sp, #12]
   81600:	e014      	b.n	8162c <_svfiprintf_r+0x1a8>
   81602:	ab03      	add	r3, sp, #12
   81604:	9300      	str	r3, [sp, #0]
   81606:	4638      	mov	r0, r7
   81608:	a904      	add	r1, sp, #16
   8160a:	462a      	mov	r2, r5
   8160c:	4b12      	ldr	r3, [pc, #72]	; (81658 <_svfiprintf_r+0x1d4>)
   8160e:	f3af 8000 	nop.w
   81612:	e007      	b.n	81624 <_svfiprintf_r+0x1a0>
   81614:	ab03      	add	r3, sp, #12
   81616:	9300      	str	r3, [sp, #0]
   81618:	4638      	mov	r0, r7
   8161a:	a904      	add	r1, sp, #16
   8161c:	462a      	mov	r2, r5
   8161e:	4b0e      	ldr	r3, [pc, #56]	; (81658 <_svfiprintf_r+0x1d4>)
   81620:	f000 f88e 	bl	81740 <_printf_i>
   81624:	f1b0 3fff 	cmp.w	r0, #4294967295
   81628:	4680      	mov	r8, r0
   8162a:	d003      	beq.n	81634 <_svfiprintf_r+0x1b0>
   8162c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8162e:	4443      	add	r3, r8
   81630:	9309      	str	r3, [sp, #36]	; 0x24
   81632:	e746      	b.n	814c2 <_svfiprintf_r+0x3e>
   81634:	89ab      	ldrh	r3, [r5, #12]
   81636:	065b      	lsls	r3, r3, #25
   81638:	d401      	bmi.n	8163e <_svfiprintf_r+0x1ba>
   8163a:	9809      	ldr	r0, [sp, #36]	; 0x24
   8163c:	e001      	b.n	81642 <_svfiprintf_r+0x1be>
   8163e:	f04f 30ff 	mov.w	r0, #4294967295
   81642:	b01d      	add	sp, #116	; 0x74
   81644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81648:	00081e64 	.word	0x00081e64
   8164c:	00081e6a 	.word	0x00081e6a
   81650:	00081e6e 	.word	0x00081e6e
   81654:	00000000 	.word	0x00000000
   81658:	000813cd 	.word	0x000813cd

0008165c <_printf_common>:
   8165c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81660:	4615      	mov	r5, r2
   81662:	461f      	mov	r7, r3
   81664:	688a      	ldr	r2, [r1, #8]
   81666:	690b      	ldr	r3, [r1, #16]
   81668:	4606      	mov	r6, r0
   8166a:	429a      	cmp	r2, r3
   8166c:	bfa8      	it	ge
   8166e:	4613      	movge	r3, r2
   81670:	602b      	str	r3, [r5, #0]
   81672:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   81676:	460c      	mov	r4, r1
   81678:	f8dd 8020 	ldr.w	r8, [sp, #32]
   8167c:	b10a      	cbz	r2, 81682 <_printf_common+0x26>
   8167e:	3301      	adds	r3, #1
   81680:	602b      	str	r3, [r5, #0]
   81682:	6823      	ldr	r3, [r4, #0]
   81684:	0699      	lsls	r1, r3, #26
   81686:	d502      	bpl.n	8168e <_printf_common+0x32>
   81688:	682b      	ldr	r3, [r5, #0]
   8168a:	3302      	adds	r3, #2
   8168c:	602b      	str	r3, [r5, #0]
   8168e:	6823      	ldr	r3, [r4, #0]
   81690:	f013 0906 	ands.w	r9, r3, #6
   81694:	d01d      	beq.n	816d2 <_printf_common+0x76>
   81696:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   8169a:	6822      	ldr	r2, [r4, #0]
   8169c:	3300      	adds	r3, #0
   8169e:	bf18      	it	ne
   816a0:	2301      	movne	r3, #1
   816a2:	0692      	lsls	r2, r2, #26
   816a4:	d51f      	bpl.n	816e6 <_printf_common+0x8a>
   816a6:	18e1      	adds	r1, r4, r3
   816a8:	2030      	movs	r0, #48	; 0x30
   816aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   816ae:	1c5a      	adds	r2, r3, #1
   816b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   816b4:	4422      	add	r2, r4
   816b6:	3302      	adds	r3, #2
   816b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   816bc:	e013      	b.n	816e6 <_printf_common+0x8a>
   816be:	4630      	mov	r0, r6
   816c0:	4639      	mov	r1, r7
   816c2:	f104 0219 	add.w	r2, r4, #25
   816c6:	2301      	movs	r3, #1
   816c8:	47c0      	blx	r8
   816ca:	3001      	adds	r0, #1
   816cc:	d007      	beq.n	816de <_printf_common+0x82>
   816ce:	f109 0901 	add.w	r9, r9, #1
   816d2:	68e2      	ldr	r2, [r4, #12]
   816d4:	682b      	ldr	r3, [r5, #0]
   816d6:	1ad3      	subs	r3, r2, r3
   816d8:	4599      	cmp	r9, r3
   816da:	dbf0      	blt.n	816be <_printf_common+0x62>
   816dc:	e7db      	b.n	81696 <_printf_common+0x3a>
   816de:	f04f 30ff 	mov.w	r0, #4294967295
   816e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   816e6:	4630      	mov	r0, r6
   816e8:	4639      	mov	r1, r7
   816ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
   816ee:	47c0      	blx	r8
   816f0:	3001      	adds	r0, #1
   816f2:	d0f4      	beq.n	816de <_printf_common+0x82>
   816f4:	6823      	ldr	r3, [r4, #0]
   816f6:	682a      	ldr	r2, [r5, #0]
   816f8:	f003 0306 	and.w	r3, r3, #6
   816fc:	68e1      	ldr	r1, [r4, #12]
   816fe:	2b04      	cmp	r3, #4
   81700:	bf08      	it	eq
   81702:	ebc2 0501 	rsbeq	r5, r2, r1
   81706:	6923      	ldr	r3, [r4, #16]
   81708:	68a2      	ldr	r2, [r4, #8]
   8170a:	bf0c      	ite	eq
   8170c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   81710:	2500      	movne	r5, #0
   81712:	429a      	cmp	r2, r3
   81714:	bfc4      	itt	gt
   81716:	ebc3 0302 	rsbgt	r3, r3, r2
   8171a:	18ed      	addgt	r5, r5, r3
   8171c:	f04f 0900 	mov.w	r9, #0
   81720:	45a9      	cmp	r9, r5
   81722:	da0a      	bge.n	8173a <_printf_common+0xde>
   81724:	4630      	mov	r0, r6
   81726:	4639      	mov	r1, r7
   81728:	f104 021a 	add.w	r2, r4, #26
   8172c:	2301      	movs	r3, #1
   8172e:	47c0      	blx	r8
   81730:	3001      	adds	r0, #1
   81732:	d0d4      	beq.n	816de <_printf_common+0x82>
   81734:	f109 0901 	add.w	r9, r9, #1
   81738:	e7f2      	b.n	81720 <_printf_common+0xc4>
   8173a:	2000      	movs	r0, #0
   8173c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081740 <_printf_i>:
   81740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   81744:	7e0e      	ldrb	r6, [r1, #24]
   81746:	4680      	mov	r8, r0
   81748:	2e6e      	cmp	r6, #110	; 0x6e
   8174a:	460c      	mov	r4, r1
   8174c:	4691      	mov	r9, r2
   8174e:	469a      	mov	sl, r3
   81750:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   81752:	f101 0043 	add.w	r0, r1, #67	; 0x43
   81756:	f000 80a5 	beq.w	818a4 <_printf_i+0x164>
   8175a:	d811      	bhi.n	81780 <_printf_i+0x40>
   8175c:	2e63      	cmp	r6, #99	; 0x63
   8175e:	d022      	beq.n	817a6 <_printf_i+0x66>
   81760:	d809      	bhi.n	81776 <_printf_i+0x36>
   81762:	2e00      	cmp	r6, #0
   81764:	f000 80af 	beq.w	818c6 <_printf_i+0x186>
   81768:	2e58      	cmp	r6, #88	; 0x58
   8176a:	f040 80bf 	bne.w	818ec <_printf_i+0x1ac>
   8176e:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
   81772:	4a7b      	ldr	r2, [pc, #492]	; (81960 <_printf_i+0x220>)
   81774:	e04f      	b.n	81816 <_printf_i+0xd6>
   81776:	2e64      	cmp	r6, #100	; 0x64
   81778:	d01e      	beq.n	817b8 <_printf_i+0x78>
   8177a:	2e69      	cmp	r6, #105	; 0x69
   8177c:	d01c      	beq.n	817b8 <_printf_i+0x78>
   8177e:	e0b5      	b.n	818ec <_printf_i+0x1ac>
   81780:	2e73      	cmp	r6, #115	; 0x73
   81782:	f000 80a4 	beq.w	818ce <_printf_i+0x18e>
   81786:	d809      	bhi.n	8179c <_printf_i+0x5c>
   81788:	2e6f      	cmp	r6, #111	; 0x6f
   8178a:	d02b      	beq.n	817e4 <_printf_i+0xa4>
   8178c:	2e70      	cmp	r6, #112	; 0x70
   8178e:	f040 80ad 	bne.w	818ec <_printf_i+0x1ac>
   81792:	680b      	ldr	r3, [r1, #0]
   81794:	f043 0320 	orr.w	r3, r3, #32
   81798:	600b      	str	r3, [r1, #0]
   8179a:	e038      	b.n	8180e <_printf_i+0xce>
   8179c:	2e75      	cmp	r6, #117	; 0x75
   8179e:	d021      	beq.n	817e4 <_printf_i+0xa4>
   817a0:	2e78      	cmp	r6, #120	; 0x78
   817a2:	d034      	beq.n	8180e <_printf_i+0xce>
   817a4:	e0a2      	b.n	818ec <_printf_i+0x1ac>
   817a6:	682b      	ldr	r3, [r5, #0]
   817a8:	f101 0742 	add.w	r7, r1, #66	; 0x42
   817ac:	1d1a      	adds	r2, r3, #4
   817ae:	681b      	ldr	r3, [r3, #0]
   817b0:	602a      	str	r2, [r5, #0]
   817b2:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
   817b6:	e09d      	b.n	818f4 <_printf_i+0x1b4>
   817b8:	6822      	ldr	r2, [r4, #0]
   817ba:	682b      	ldr	r3, [r5, #0]
   817bc:	f012 0f80 	tst.w	r2, #128	; 0x80
   817c0:	d003      	beq.n	817ca <_printf_i+0x8a>
   817c2:	1d1a      	adds	r2, r3, #4
   817c4:	602a      	str	r2, [r5, #0]
   817c6:	681d      	ldr	r5, [r3, #0]
   817c8:	e005      	b.n	817d6 <_printf_i+0x96>
   817ca:	0651      	lsls	r1, r2, #25
   817cc:	d5f9      	bpl.n	817c2 <_printf_i+0x82>
   817ce:	1d1a      	adds	r2, r3, #4
   817d0:	602a      	str	r2, [r5, #0]
   817d2:	f9b3 5000 	ldrsh.w	r5, [r3]
   817d6:	2d00      	cmp	r5, #0
   817d8:	da39      	bge.n	8184e <_printf_i+0x10e>
   817da:	232d      	movs	r3, #45	; 0x2d
   817dc:	426d      	negs	r5, r5
   817de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   817e2:	e034      	b.n	8184e <_printf_i+0x10e>
   817e4:	6822      	ldr	r2, [r4, #0]
   817e6:	682b      	ldr	r3, [r5, #0]
   817e8:	f012 0f80 	tst.w	r2, #128	; 0x80
   817ec:	d003      	beq.n	817f6 <_printf_i+0xb6>
   817ee:	1d1a      	adds	r2, r3, #4
   817f0:	602a      	str	r2, [r5, #0]
   817f2:	681d      	ldr	r5, [r3, #0]
   817f4:	e004      	b.n	81800 <_printf_i+0xc0>
   817f6:	0652      	lsls	r2, r2, #25
   817f8:	d5f9      	bpl.n	817ee <_printf_i+0xae>
   817fa:	1d1a      	adds	r2, r3, #4
   817fc:	602a      	str	r2, [r5, #0]
   817fe:	881d      	ldrh	r5, [r3, #0]
   81800:	7e23      	ldrb	r3, [r4, #24]
   81802:	4a57      	ldr	r2, [pc, #348]	; (81960 <_printf_i+0x220>)
   81804:	2b6f      	cmp	r3, #111	; 0x6f
   81806:	bf14      	ite	ne
   81808:	230a      	movne	r3, #10
   8180a:	2308      	moveq	r3, #8
   8180c:	e01b      	b.n	81846 <_printf_i+0x106>
   8180e:	2378      	movs	r3, #120	; 0x78
   81810:	4a54      	ldr	r2, [pc, #336]	; (81964 <_printf_i+0x224>)
   81812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   81816:	6823      	ldr	r3, [r4, #0]
   81818:	6829      	ldr	r1, [r5, #0]
   8181a:	f013 0f80 	tst.w	r3, #128	; 0x80
   8181e:	f101 0604 	add.w	r6, r1, #4
   81822:	602e      	str	r6, [r5, #0]
   81824:	d001      	beq.n	8182a <_printf_i+0xea>
   81826:	680d      	ldr	r5, [r1, #0]
   81828:	e002      	b.n	81830 <_printf_i+0xf0>
   8182a:	065f      	lsls	r7, r3, #25
   8182c:	d5fb      	bpl.n	81826 <_printf_i+0xe6>
   8182e:	880d      	ldrh	r5, [r1, #0]
   81830:	07de      	lsls	r6, r3, #31
   81832:	bf44      	itt	mi
   81834:	f043 0320 	orrmi.w	r3, r3, #32
   81838:	6023      	strmi	r3, [r4, #0]
   8183a:	b91d      	cbnz	r5, 81844 <_printf_i+0x104>
   8183c:	6823      	ldr	r3, [r4, #0]
   8183e:	f023 0320 	bic.w	r3, r3, #32
   81842:	6023      	str	r3, [r4, #0]
   81844:	2310      	movs	r3, #16
   81846:	2100      	movs	r1, #0
   81848:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   8184c:	e001      	b.n	81852 <_printf_i+0x112>
   8184e:	4a44      	ldr	r2, [pc, #272]	; (81960 <_printf_i+0x220>)
   81850:	230a      	movs	r3, #10
   81852:	6866      	ldr	r6, [r4, #4]
   81854:	2e00      	cmp	r6, #0
   81856:	60a6      	str	r6, [r4, #8]
   81858:	db03      	blt.n	81862 <_printf_i+0x122>
   8185a:	6821      	ldr	r1, [r4, #0]
   8185c:	f021 0104 	bic.w	r1, r1, #4
   81860:	6021      	str	r1, [r4, #0]
   81862:	b905      	cbnz	r5, 81866 <_printf_i+0x126>
   81864:	b16e      	cbz	r6, 81882 <_printf_i+0x142>
   81866:	f104 0142 	add.w	r1, r4, #66	; 0x42
   8186a:	fbb5 f6f3 	udiv	r6, r5, r3
   8186e:	fb03 5516 	mls	r5, r3, r6, r5
   81872:	5d55      	ldrb	r5, [r2, r5]
   81874:	460f      	mov	r7, r1
   81876:	f801 5901 	strb.w	r5, [r1], #-1
   8187a:	4635      	mov	r5, r6
   8187c:	2e00      	cmp	r6, #0
   8187e:	d1f4      	bne.n	8186a <_printf_i+0x12a>
   81880:	e000      	b.n	81884 <_printf_i+0x144>
   81882:	4607      	mov	r7, r0
   81884:	2b08      	cmp	r3, #8
   81886:	d10a      	bne.n	8189e <_printf_i+0x15e>
   81888:	6823      	ldr	r3, [r4, #0]
   8188a:	07dd      	lsls	r5, r3, #31
   8188c:	d507      	bpl.n	8189e <_printf_i+0x15e>
   8188e:	6862      	ldr	r2, [r4, #4]
   81890:	6923      	ldr	r3, [r4, #16]
   81892:	429a      	cmp	r2, r3
   81894:	dc03      	bgt.n	8189e <_printf_i+0x15e>
   81896:	2330      	movs	r3, #48	; 0x30
   81898:	f807 3c01 	strb.w	r3, [r7, #-1]
   8189c:	3f01      	subs	r7, #1
   8189e:	1bc0      	subs	r0, r0, r7
   818a0:	6120      	str	r0, [r4, #16]
   818a2:	e02c      	b.n	818fe <_printf_i+0x1be>
   818a4:	6809      	ldr	r1, [r1, #0]
   818a6:	682b      	ldr	r3, [r5, #0]
   818a8:	f011 0f80 	tst.w	r1, #128	; 0x80
   818ac:	6962      	ldr	r2, [r4, #20]
   818ae:	d004      	beq.n	818ba <_printf_i+0x17a>
   818b0:	1d19      	adds	r1, r3, #4
   818b2:	6029      	str	r1, [r5, #0]
   818b4:	681b      	ldr	r3, [r3, #0]
   818b6:	601a      	str	r2, [r3, #0]
   818b8:	e005      	b.n	818c6 <_printf_i+0x186>
   818ba:	0649      	lsls	r1, r1, #25
   818bc:	d5f8      	bpl.n	818b0 <_printf_i+0x170>
   818be:	1d19      	adds	r1, r3, #4
   818c0:	6029      	str	r1, [r5, #0]
   818c2:	681b      	ldr	r3, [r3, #0]
   818c4:	801a      	strh	r2, [r3, #0]
   818c6:	2300      	movs	r3, #0
   818c8:	6123      	str	r3, [r4, #16]
   818ca:	4607      	mov	r7, r0
   818cc:	e017      	b.n	818fe <_printf_i+0x1be>
   818ce:	682b      	ldr	r3, [r5, #0]
   818d0:	1d1a      	adds	r2, r3, #4
   818d2:	602a      	str	r2, [r5, #0]
   818d4:	681f      	ldr	r7, [r3, #0]
   818d6:	4638      	mov	r0, r7
   818d8:	f000 f895 	bl	81a06 <strlen>
   818dc:	6863      	ldr	r3, [r4, #4]
   818de:	6120      	str	r0, [r4, #16]
   818e0:	4298      	cmp	r0, r3
   818e2:	bf88      	it	hi
   818e4:	6123      	strhi	r3, [r4, #16]
   818e6:	6923      	ldr	r3, [r4, #16]
   818e8:	6063      	str	r3, [r4, #4]
   818ea:	e005      	b.n	818f8 <_printf_i+0x1b8>
   818ec:	f104 0742 	add.w	r7, r4, #66	; 0x42
   818f0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
   818f4:	2301      	movs	r3, #1
   818f6:	6123      	str	r3, [r4, #16]
   818f8:	2300      	movs	r3, #0
   818fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   818fe:	f8cd a000 	str.w	sl, [sp]
   81902:	4640      	mov	r0, r8
   81904:	4621      	mov	r1, r4
   81906:	aa03      	add	r2, sp, #12
   81908:	464b      	mov	r3, r9
   8190a:	f7ff fea7 	bl	8165c <_printf_common>
   8190e:	3001      	adds	r0, #1
   81910:	d102      	bne.n	81918 <_printf_i+0x1d8>
   81912:	f04f 30ff 	mov.w	r0, #4294967295
   81916:	e01f      	b.n	81958 <_printf_i+0x218>
   81918:	4640      	mov	r0, r8
   8191a:	4649      	mov	r1, r9
   8191c:	463a      	mov	r2, r7
   8191e:	6923      	ldr	r3, [r4, #16]
   81920:	47d0      	blx	sl
   81922:	3001      	adds	r0, #1
   81924:	d0f5      	beq.n	81912 <_printf_i+0x1d2>
   81926:	6823      	ldr	r3, [r4, #0]
   81928:	079b      	lsls	r3, r3, #30
   8192a:	d405      	bmi.n	81938 <_printf_i+0x1f8>
   8192c:	68e0      	ldr	r0, [r4, #12]
   8192e:	9b03      	ldr	r3, [sp, #12]
   81930:	4298      	cmp	r0, r3
   81932:	bfb8      	it	lt
   81934:	4618      	movlt	r0, r3
   81936:	e00f      	b.n	81958 <_printf_i+0x218>
   81938:	2500      	movs	r5, #0
   8193a:	68e2      	ldr	r2, [r4, #12]
   8193c:	9b03      	ldr	r3, [sp, #12]
   8193e:	1ad3      	subs	r3, r2, r3
   81940:	429d      	cmp	r5, r3
   81942:	daf3      	bge.n	8192c <_printf_i+0x1ec>
   81944:	4640      	mov	r0, r8
   81946:	4649      	mov	r1, r9
   81948:	f104 0219 	add.w	r2, r4, #25
   8194c:	2301      	movs	r3, #1
   8194e:	47d0      	blx	sl
   81950:	3001      	adds	r0, #1
   81952:	d0de      	beq.n	81912 <_printf_i+0x1d2>
   81954:	3501      	adds	r5, #1
   81956:	e7f0      	b.n	8193a <_printf_i+0x1fa>
   81958:	b004      	add	sp, #16
   8195a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8195e:	bf00      	nop
   81960:	00081e75 	.word	0x00081e75
   81964:	00081e86 	.word	0x00081e86

00081968 <memchr>:
   81968:	b510      	push	{r4, lr}
   8196a:	b2c9      	uxtb	r1, r1
   8196c:	4402      	add	r2, r0
   8196e:	4290      	cmp	r0, r2
   81970:	4603      	mov	r3, r0
   81972:	d005      	beq.n	81980 <memchr+0x18>
   81974:	781c      	ldrb	r4, [r3, #0]
   81976:	3001      	adds	r0, #1
   81978:	428c      	cmp	r4, r1
   8197a:	d1f8      	bne.n	8196e <memchr+0x6>
   8197c:	4618      	mov	r0, r3
   8197e:	bd10      	pop	{r4, pc}
   81980:	2000      	movs	r0, #0
   81982:	bd10      	pop	{r4, pc}

00081984 <memmove>:
   81984:	4281      	cmp	r1, r0
   81986:	b570      	push	{r4, r5, r6, lr}
   81988:	d301      	bcc.n	8198e <memmove+0xa>
   8198a:	2300      	movs	r3, #0
   8198c:	e00e      	b.n	819ac <memmove+0x28>
   8198e:	188c      	adds	r4, r1, r2
   81990:	42a0      	cmp	r0, r4
   81992:	d2fa      	bcs.n	8198a <memmove+0x6>
   81994:	1885      	adds	r5, r0, r2
   81996:	4613      	mov	r3, r2
   81998:	f113 33ff 	adds.w	r3, r3, #4294967295
   8199c:	d305      	bcc.n	819aa <memmove+0x26>
   8199e:	4251      	negs	r1, r2
   819a0:	1866      	adds	r6, r4, r1
   819a2:	5cf6      	ldrb	r6, [r6, r3]
   819a4:	4429      	add	r1, r5
   819a6:	54ce      	strb	r6, [r1, r3]
   819a8:	e7f6      	b.n	81998 <memmove+0x14>
   819aa:	bd70      	pop	{r4, r5, r6, pc}
   819ac:	4293      	cmp	r3, r2
   819ae:	d003      	beq.n	819b8 <memmove+0x34>
   819b0:	5ccc      	ldrb	r4, [r1, r3]
   819b2:	54c4      	strb	r4, [r0, r3]
   819b4:	3301      	adds	r3, #1
   819b6:	e7f9      	b.n	819ac <memmove+0x28>
   819b8:	bd70      	pop	{r4, r5, r6, pc}

000819ba <_realloc_r>:
   819ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   819bc:	4606      	mov	r6, r0
   819be:	4614      	mov	r4, r2
   819c0:	460d      	mov	r5, r1
   819c2:	b921      	cbnz	r1, 819ce <_realloc_r+0x14>
   819c4:	4611      	mov	r1, r2
   819c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   819ca:	f7ff bc33 	b.w	81234 <_malloc_r>
   819ce:	b91a      	cbnz	r2, 819d8 <_realloc_r+0x1e>
   819d0:	f7ff fbec 	bl	811ac <_free_r>
   819d4:	4620      	mov	r0, r4
   819d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   819d8:	f000 f81d 	bl	81a16 <_malloc_usable_size_r>
   819dc:	42a0      	cmp	r0, r4
   819de:	d20e      	bcs.n	819fe <_realloc_r+0x44>
   819e0:	4630      	mov	r0, r6
   819e2:	4621      	mov	r1, r4
   819e4:	f7ff fc26 	bl	81234 <_malloc_r>
   819e8:	4607      	mov	r7, r0
   819ea:	b150      	cbz	r0, 81a02 <_realloc_r+0x48>
   819ec:	4629      	mov	r1, r5
   819ee:	4622      	mov	r2, r4
   819f0:	f7ff fbd2 	bl	81198 <memcpy>
   819f4:	4630      	mov	r0, r6
   819f6:	4629      	mov	r1, r5
   819f8:	f7ff fbd8 	bl	811ac <_free_r>
   819fc:	e001      	b.n	81a02 <_realloc_r+0x48>
   819fe:	4628      	mov	r0, r5
   81a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81a02:	4638      	mov	r0, r7
   81a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081a06 <strlen>:
   81a06:	4603      	mov	r3, r0
   81a08:	f813 2b01 	ldrb.w	r2, [r3], #1
   81a0c:	2a00      	cmp	r2, #0
   81a0e:	d1fb      	bne.n	81a08 <strlen+0x2>
   81a10:	1a18      	subs	r0, r3, r0
   81a12:	3801      	subs	r0, #1
   81a14:	4770      	bx	lr

00081a16 <_malloc_usable_size_r>:
   81a16:	f851 0c04 	ldr.w	r0, [r1, #-4]
   81a1a:	2800      	cmp	r0, #0
   81a1c:	da02      	bge.n	81a24 <_malloc_usable_size_r+0xe>
   81a1e:	3904      	subs	r1, #4
   81a20:	580b      	ldr	r3, [r1, r0]
   81a22:	4418      	add	r0, r3
   81a24:	3804      	subs	r0, #4
   81a26:	4770      	bx	lr

00081a28 <_getpid>:
   81a28:	4b02      	ldr	r3, [pc, #8]	; (81a34 <_getpid+0xc>)
   81a2a:	2258      	movs	r2, #88	; 0x58
   81a2c:	601a      	str	r2, [r3, #0]
   81a2e:	f04f 30ff 	mov.w	r0, #4294967295
   81a32:	4770      	bx	lr
   81a34:	200000e0 	.word	0x200000e0

00081a38 <_kill>:
   81a38:	4b02      	ldr	r3, [pc, #8]	; (81a44 <_kill+0xc>)
   81a3a:	2258      	movs	r2, #88	; 0x58
   81a3c:	601a      	str	r2, [r3, #0]
   81a3e:	f04f 30ff 	mov.w	r0, #4294967295
   81a42:	4770      	bx	lr
   81a44:	200000e0 	.word	0x200000e0

00081a48 <_sbrk>:
   81a48:	4a09      	ldr	r2, [pc, #36]	; (81a70 <_sbrk+0x28>)
   81a4a:	6813      	ldr	r3, [r2, #0]
   81a4c:	b163      	cbz	r3, 81a68 <_sbrk+0x20>
   81a4e:	4418      	add	r0, r3
   81a50:	4669      	mov	r1, sp
   81a52:	4288      	cmp	r0, r1
   81a54:	d802      	bhi.n	81a5c <_sbrk+0x14>
   81a56:	6010      	str	r0, [r2, #0]
   81a58:	4618      	mov	r0, r3
   81a5a:	4770      	bx	lr
   81a5c:	4b05      	ldr	r3, [pc, #20]	; (81a74 <_sbrk+0x2c>)
   81a5e:	220c      	movs	r2, #12
   81a60:	601a      	str	r2, [r3, #0]
   81a62:	f04f 30ff 	mov.w	r0, #4294967295
   81a66:	4770      	bx	lr
   81a68:	4b03      	ldr	r3, [pc, #12]	; (81a78 <_sbrk+0x30>)
   81a6a:	6013      	str	r3, [r2, #0]
   81a6c:	e7ef      	b.n	81a4e <_sbrk+0x6>
   81a6e:	bf00      	nop
   81a70:	200000dc 	.word	0x200000dc
   81a74:	200000e0 	.word	0x200000e0
   81a78:	20000000 	.word	0x20000000

00081a7c <_exit>:
   81a7c:	e7fe      	b.n	81a7c <_exit>
   81a7e:	bf00      	nop

00081a80 <_ZL10font_small>:
   81a80:	2840 0000 0000 0000 8000 0000 820e 81c3     @(..............
   81a90:	a0f0 0000 4209 4326 9010 0000 0109 2182     .....B&C.......!
   81aa0:	9838 9f00 0104 9101 a440 8000 8084 f910     8.......@.......
   81ab0:	a641 0000 e083 40e3 9c3c 0000 0780 2000     A......@<...... 
   81ac0:	c000 3c3e 0cc7 2000 c000 9210 0c0c 10c0     ..><... ........
   81ad0:	a060 8c08 0704 7120 bc10 1208 0183 9110     `..... q........
   81ae0:	9208 1104 0001 8890 9208 8e04 20c0 7960     ............. `y
   81af0:	9c70 3000 0200 2303 8020 0800 0206 2000     p..0...# ...... 
   81b00:	8020 3f18 0109 9100 ac10 0424 8109 5100      ..?......$....Q
   81b10:	d410 043e 870e 3080 d410 8202 4484 4890     ..>....0.....D.H
   81b20:	aa08 821c 4483 8860 aa08 0000 0000 0000     .....D`.........
   81b30:	8000 0000 0306 4000 8000 0c14 8489 f0c2     .......@........
   81b40:	a248 122c 8449 2121 9248 1124 8387 2040     H.,.I.!!H.$...@ 
   81b50:	8a24 8912 4200 1090 8624 8612 4100 1060     $....B..$....A`.
   81b60:	8258 0000 0000 0000 8000 0000 0011 0000     X...............
   81b70:	8000 1254 078a 0000 8000 0c54 0206 0000     ..T.......T.....
   81b80:	8000 042a 0102 0000 8000 0a2a 0081 0000     ..*.......*.....
   81b90:	8000 8914 03c0 0000 8000 ffff ffff ffff     ................
   81ba0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   81bb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   81bc0:	ffff                                        ..

00081bc2 <_ZL10font_large>:
   81bc2:	4038 0000 0000 0000 0000 0000 0000 0000     8@..............
	...
   81be2:	1800 7e3c 0030 0000 3c1c 3022 0000 1e00     ..<~0....<"0....
   81bf2:	1066 0030 0000 661a 3808 0000 1800 1e60     f.0....f.8....`.
   81c02:	0038 0000 6018 3830 0000 1800 2060 0038     8....`08....` 8.
   81c12:	0000 3018 3820 0000 1800 6030 0038 0000     ...0 8....0`8...
   81c22:	3018 3460 0000 1800 6018 0034 007c 1818     .0`4.....`4.|...
   81c32:	3460 3e00 1800 6018 0034 0000 0c18 3460     `4.>...`4.....`4
   81c42:	0000 1800 600c 0032 0000 0c18 3260 0000     .....`2.....`2..
   81c52:	1800 6006 0032 0000 0618 3260 0000 1800     ...`2.....`2....
   81c62:	6006 0032 0000 0618 7e60 0000 1800 6206     .`2.....`~.....b
   81c72:	007e 0000 0618 3022 0000 7e00 227e 0030     ~....."0...~~"0.
   81c82:	0000 7e7e 301c 0000 0000 0000 0000 0000     ..~~.0..........
	...
   81cb6:	0000 7e00 7e00 1818 0000 4046 2c62 3c24     ...~.~....F@b,$<
   81cc6:	0600 6020 4246 003c 2006 4660 6642 1e00     .. `FB<.. `FBf..
   81cd6:	3010 4246 0066 1030 4630 6642 2000 1818     .0FBf.0.0FBf. ..
   81ce6:	4246 0066 1820 4618 6642 6000 1808 4246     FBf. ..FBf.`..FB
   81cf6:	0060 0c60 4618 6064 6000 0c0c 5846 0060     `.`..Fd`.`..FX`.
   81d06:	0460 460c 6040 6000 0c04 4046 0030 0660     `..F@`.`..F@0.`.
   81d16:	2c0c 3040 6000 0c1e 4018 0018 2660 340c     .,@0.`...@..`&.4
   81d26:	1840 6000 0c42 4062 0018 4260 620c 1840     @..`B.b@..`B.b@.
   81d36:	6000 0c42 4062 0018 4260 620c 1840 6000     .`B.b@..`B.b@..`
   81d46:	1c42 4062 0018 4262 620e 0044 2200 0c42     B.b@..bB.bD.."B.
   81d56:	2462 0000 2422 340c 1824 1c00 0c18 1818     b$.."$.4$.......
   81d66:	0018 0000 0000 0000 0000 0000 0000 0000     ................
	...
   81d82:	0000 6e49 6176 696c 2064 7473 7461 2065     ..Invalid state 
   81d92:	6e65 6f63 6564 2072 6425 0000 0000          encoder %d....

00081da0 <_ZN8Encoders5bPinsE>:
   81da0:	000e 0000 0000 0000 0002 0000 0006 0000     ................

00081db0 <_ZN8Encoders6aPortsE>:
   81db0:	0001 0303 0000 0000                         ........

00081db8 <_ZTV8Encoders>:
	...
   81dc0:	0745 0008 0735 0008 0739 0008 073d 0008     E...5...9...=...
   81dd0:	0741 0008 0000 0000                         A.......

00081dd8 <_ZN8Encoders6bPortsE>:
   81dd8:	0300 0303                                   ....

00081ddc <_ZN8Encoders5aPinsE>:
   81ddc:	001a 0000 000f 0000 0001 0000 0003 0000     ................
   81dec:	0000 0000                                   ....

00081df0 <_ZTV14ShiftRegisters>:
	...
   81df8:	090d 0008 0901 0008 09a9 0008 0905 0008     ................
   81e08:	0909 0008 0000 0000                         ........

00081e10 <_ZTV3SPI>:
	...
   81e18:	0a71 0008 0a51 0008 0b01 0008 0a6d 0008     q...Q.......m...
   81e28:	0aed 0008 0000 0000                         ........

00081e30 <_ZTV7SSD1305>:
	...
   81e38:	0b91 0008 0b49 0008 0e31 0008 0b4d 0008     ....I...1...M...
   81e48:	0b51 0008 0000 0000 7830 5825 6800 6c65     Q.......0x%X.hel
   81e58:	6f6c 770a 726f 646c 0021 0043 2d23 2b30     lo.world!.C.#-0+
   81e68:	0020 6c68 004c 6665 4567 4746 3000 3231      .hlL.efgEFG.012
   81e78:	3433 3635 3837 4139 4342 4544 0046 3130     3456789ABCDEF.01
   81e88:	3332 3534 3736 3938 6261 6463 6665 0000     23456789abcdef..

00081e98 <_init>:
   81e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e9a:	bf00      	nop
   81e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81e9e:	bc08      	pop	{r3}
   81ea0:	469e      	mov	lr, r3
   81ea2:	4770      	bx	lr

00081ea4 <__init_array_start>:
   81ea4:	00080119 	.word	0x00080119

00081ea8 <_fini>:
   81ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81eaa:	bf00      	nop
   81eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81eae:	bc08      	pop	{r3}
   81eb0:	469e      	mov	lr, r3
   81eb2:	4770      	bx	lr

00081eb4 <__fini_array_start>:
   81eb4:	000800f5 	.word	0x000800f5
