
OshStep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b64  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00081b64  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  20000068  00081bcc  00010068  2**2
                  ALLOC
  3 .stack        00009004  200000c4  00081c28  00010068  2**0
                  ALLOC
  4 .heap         00002000  200090c8  0008ac2c  00010068  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010091  2**0
                  CONTENTS, READONLY
  7 .debug_info   000072ab  00000000  00000000  000100ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d90  00000000  00000000  00017397  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001d61  00000000  00000000  00019127  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002f8  00000000  00000000  0001ae88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000400  00000000  00000000  0001b180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000136b5  00000000  00000000  0001b580  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004bfe  00000000  00000000  0002ec35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00056b2b  00000000  00000000  00033833  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000ba0  00000000  00000000  0008a360  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  0008af00  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000076  00000000  00000000  0008af3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200090c8 	.word	0x200090c8
   80004:	0008014d 	.word	0x0008014d
   80008:	00080149 	.word	0x00080149
   8000c:	00080149 	.word	0x00080149
   80010:	00080149 	.word	0x00080149
   80014:	00080149 	.word	0x00080149
   80018:	00080149 	.word	0x00080149
	...
   8002c:	00080149 	.word	0x00080149
   80030:	00080149 	.word	0x00080149
   80034:	00000000 	.word	0x00000000
   80038:	00080149 	.word	0x00080149
   8003c:	00080149 	.word	0x00080149
   80040:	00080149 	.word	0x00080149
   80044:	00080149 	.word	0x00080149
   80048:	00080149 	.word	0x00080149
   8004c:	00080149 	.word	0x00080149
   80050:	00080149 	.word	0x00080149
   80054:	00080149 	.word	0x00080149
   80058:	00080149 	.word	0x00080149
   8005c:	00080149 	.word	0x00080149
   80060:	00080149 	.word	0x00080149
   80064:	00080149 	.word	0x00080149
   80068:	00000000 	.word	0x00000000
   8006c:	00080149 	.word	0x00080149
   80070:	00080149 	.word	0x00080149
   80074:	00080149 	.word	0x00080149
   80078:	00080149 	.word	0x00080149
	...
   80084:	00080149 	.word	0x00080149
   80088:	00080149 	.word	0x00080149
   8008c:	00080149 	.word	0x00080149
   80090:	00080149 	.word	0x00080149
   80094:	00080149 	.word	0x00080149
   80098:	00080149 	.word	0x00080149
   8009c:	00080149 	.word	0x00080149
   800a0:	00080149 	.word	0x00080149
   800a4:	00000000 	.word	0x00000000
   800a8:	00080149 	.word	0x00080149
   800ac:	00080245 	.word	0x00080245
   800b0:	00080149 	.word	0x00080149
   800b4:	00080149 	.word	0x00080149
   800b8:	00080149 	.word	0x00080149
   800bc:	00080149 	.word	0x00080149
   800c0:	00080149 	.word	0x00080149
   800c4:	00080149 	.word	0x00080149
   800c8:	00080149 	.word	0x00080149
   800cc:	00080149 	.word	0x00080149
   800d0:	00080149 	.word	0x00080149
   800d4:	00080149 	.word	0x00080149
   800d8:	00080149 	.word	0x00080149
   800dc:	00080149 	.word	0x00080149
   800e0:	00080149 	.word	0x00080149
   800e4:	00080149 	.word	0x00080149
   800e8:	00080149 	.word	0x00080149
   800ec:	00080149 	.word	0x00080149
   800f0:	00080149 	.word	0x00080149

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000068 	.word	0x20000068
   80110:	00000000 	.word	0x00000000
   80114:	00081b64 	.word	0x00081b64

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00081b64 	.word	0x00081b64
   8013c:	2000006c 	.word	0x2000006c
   80140:	00081b64 	.word	0x00081b64
   80144:	00000000 	.word	0x00000000

00080148 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80148:	e7fe      	b.n	80148 <Dummy_Handler>
	...

0008014c <Reset_Handler>:

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
   8014c:	4b12      	ldr	r3, [pc, #72]	; (80198 <Reset_Handler+0x4c>)
   8014e:	4a13      	ldr	r2, [pc, #76]	; (8019c <Reset_Handler+0x50>)
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80150:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
   80152:	4293      	cmp	r3, r2
   80154:	461c      	mov	r4, r3
   80156:	d001      	beq.n	8015c <Reset_Handler+0x10>
   80158:	2300      	movs	r3, #0
   8015a:	e001      	b.n	80160 <Reset_Handler+0x14>
   8015c:	4b10      	ldr	r3, [pc, #64]	; (801a0 <Reset_Handler+0x54>)
   8015e:	e007      	b.n	80170 <Reset_Handler+0x24>
                for (; pDest < &_erelocate;) {
   80160:	4910      	ldr	r1, [pc, #64]	; (801a4 <Reset_Handler+0x58>)
   80162:	18d0      	adds	r0, r2, r3
   80164:	4288      	cmp	r0, r1
   80166:	d2f9      	bcs.n	8015c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80168:	58e1      	ldr	r1, [r4, r3]
   8016a:	50d1      	str	r1, [r2, r3]
   8016c:	3304      	adds	r3, #4
   8016e:	e7f7      	b.n	80160 <Reset_Handler+0x14>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   80170:	4a0d      	ldr	r2, [pc, #52]	; (801a8 <Reset_Handler+0x5c>)
   80172:	4293      	cmp	r3, r2
   80174:	d203      	bcs.n	8017e <Reset_Handler+0x32>
                *pDest++ = 0;
   80176:	2200      	movs	r2, #0
   80178:	f843 2b04 	str.w	r2, [r3], #4
   8017c:	e7f8      	b.n	80170 <Reset_Handler+0x24>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8017e:	4b0b      	ldr	r3, [pc, #44]	; (801ac <Reset_Handler+0x60>)
   80180:	4a0b      	ldr	r2, [pc, #44]	; (801b0 <Reset_Handler+0x64>)
   80182:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80186:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8018a:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   8018c:	4b09      	ldr	r3, [pc, #36]	; (801b4 <Reset_Handler+0x68>)
   8018e:	4798      	blx	r3

        /* Branch to main function */
        main();
   80190:	4b09      	ldr	r3, [pc, #36]	; (801b8 <Reset_Handler+0x6c>)
   80192:	4798      	blx	r3
   80194:	e7fe      	b.n	80194 <Reset_Handler+0x48>
   80196:	bf00      	nop
   80198:	00081b64 	.word	0x00081b64
   8019c:	20000000 	.word	0x20000000
   801a0:	20000068 	.word	0x20000068
   801a4:	20000068 	.word	0x20000068
   801a8:	200000c4 	.word	0x200000c4
   801ac:	00080000 	.word	0x00080000
   801b0:	e000ed00 	.word	0xe000ed00
   801b4:	00080e4d 	.word	0x00080e4d
   801b8:	00080db5 	.word	0x00080db5

000801bc <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801bc:	4a1a      	ldr	r2, [pc, #104]	; (80228 <SystemInit+0x6c>)
   801be:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801c2:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801c8:	4b18      	ldr	r3, [pc, #96]	; (8022c <SystemInit+0x70>)
   801ca:	6a1a      	ldr	r2, [r3, #32]
   801cc:	01d2      	lsls	r2, r2, #7
   801ce:	d502      	bpl.n	801d6 <SystemInit+0x1a>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801d0:	4a17      	ldr	r2, [pc, #92]	; (80230 <SystemInit+0x74>)
   801d2:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801d4:	e005      	b.n	801e2 <SystemInit+0x26>
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801d6:	4a17      	ldr	r2, [pc, #92]	; (80234 <SystemInit+0x78>)
   801d8:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   801dc:	07d0      	lsls	r0, r2, #31
   801de:	d5fc      	bpl.n	801da <SystemInit+0x1e>
   801e0:	e7f6      	b.n	801d0 <SystemInit+0x14>
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801e2:	6e99      	ldr	r1, [r3, #104]	; 0x68
   801e4:	4a11      	ldr	r2, [pc, #68]	; (8022c <SystemInit+0x70>)
   801e6:	03c9      	lsls	r1, r1, #15
   801e8:	d5fb      	bpl.n	801e2 <SystemInit+0x26>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   801ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
   801ec:	f021 0103 	bic.w	r1, r1, #3
   801f0:	f041 0101 	orr.w	r1, r1, #1
   801f4:	6311      	str	r1, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   801f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   801f8:	0712      	lsls	r2, r2, #28
   801fa:	d5fc      	bpl.n	801f6 <SystemInit+0x3a>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   801fc:	490e      	ldr	r1, [pc, #56]	; (80238 <SystemInit+0x7c>)
   801fe:	4a0b      	ldr	r2, [pc, #44]	; (8022c <SystemInit+0x70>)
   80200:	6291      	str	r1, [r2, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80202:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   80204:	0790      	lsls	r0, r2, #30
   80206:	d5fc      	bpl.n	80202 <SystemInit+0x46>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a08      	ldr	r2, [pc, #32]	; (8022c <SystemInit+0x70>)
   8020a:	2111      	movs	r1, #17
   8020c:	6311      	str	r1, [r2, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8020e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   80210:	0711      	lsls	r1, r2, #28
   80212:	d5fc      	bpl.n	8020e <SystemInit+0x52>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80214:	4a05      	ldr	r2, [pc, #20]	; (8022c <SystemInit+0x70>)
   80216:	2112      	movs	r1, #18
   80218:	6311      	str	r1, [r2, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8021a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8021c:	0712      	lsls	r2, r2, #28
   8021e:	d5fc      	bpl.n	8021a <SystemInit+0x5e>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80220:	4a06      	ldr	r2, [pc, #24]	; (8023c <SystemInit+0x80>)
   80222:	4b07      	ldr	r3, [pc, #28]	; (80240 <SystemInit+0x84>)
   80224:	601a      	str	r2, [r3, #0]
   80226:	4770      	bx	lr
   80228:	400e0a00 	.word	0x400e0a00
   8022c:	400e0600 	.word	0x400e0600
   80230:	01370809 	.word	0x01370809
   80234:	00370809 	.word	0x00370809
   80238:	200d3f01 	.word	0x200d3f01
   8023c:	0501bd00 	.word	0x0501bd00
   80240:	20000000 	.word	0x20000000

00080244 <TC0_Handler>:
     // Reset counter (SWTRG) and enable counter clock(CLKEN)
     TC0->TC_CHANNEL[0].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;

 }

 void TC0_Handler(void) {
   80244:	b508      	push	{r3, lr}
     __due_tc0_callback();
   80246:	4b02      	ldr	r3, [pc, #8]	; (80250 <TC0_Handler+0xc>)
   80248:	681b      	ldr	r3, [r3, #0]
   8024a:	4798      	blx	r3
   8024c:	bd08      	pop	{r3, pc}
   8024e:	bf00      	nop
   80250:	20000084 	.word	0x20000084

00080254 <_Z10pinSetMode4Porti4Mode>:
 }

 void pinSetMode(Port p, int pin, Mode m) {
    switch (m) {
   80254:	2a03      	cmp	r2, #3
   80256:	d876      	bhi.n	80346 <_Z10pinSetMode4Porti4Mode+0xf2>
   80258:	e8df f002 	tbb	[pc, r2]
   8025c:	583a1e02 	.word	0x583a1e02
      case INPUT:
        switch (p) {
   80260:	2803      	cmp	r0, #3
   80262:	d870      	bhi.n	80346 <_Z10pinSetMode4Porti4Mode+0xf2>
   80264:	e8df f000 	tbb	[pc, r0]
   80268:	130e0702 	.word	0x130e0702
          case A:
            PIOA->PIO_PER=1<<pin;
   8026c:	2301      	movs	r3, #1
   8026e:	fa03 f101 	lsl.w	r1, r3, r1
   80272:	4b35      	ldr	r3, [pc, #212]	; (80348 <_Z10pinSetMode4Porti4Mode+0xf4>)
   80274:	e003      	b.n	8027e <_Z10pinSetMode4Porti4Mode+0x2a>
            PIOA->PIO_ODR=1<<pin;
            break;
          case B:
            PIOB->PIO_PER=1<<pin;
   80276:	2301      	movs	r3, #1
   80278:	fa03 f101 	lsl.w	r1, r3, r1
   8027c:	4b33      	ldr	r3, [pc, #204]	; (8034c <_Z10pinSetMode4Porti4Mode+0xf8>)
   8027e:	6019      	str	r1, [r3, #0]
            PIOB->PIO_ODR=1<<pin;
   80280:	6159      	str	r1, [r3, #20]
            break;
   80282:	4770      	bx	lr
          case C:
            PIOC->PIO_PER=1<<pin;
   80284:	2301      	movs	r3, #1
   80286:	fa03 f101 	lsl.w	r1, r3, r1
   8028a:	4b31      	ldr	r3, [pc, #196]	; (80350 <_Z10pinSetMode4Porti4Mode+0xfc>)
   8028c:	e7f7      	b.n	8027e <_Z10pinSetMode4Porti4Mode+0x2a>
            PIOC->PIO_ODR=1<<pin;
            break;
          case D:
            PIOD->PIO_PER=1<<pin;
   8028e:	2301      	movs	r3, #1
   80290:	fa03 f101 	lsl.w	r1, r3, r1
   80294:	4b2f      	ldr	r3, [pc, #188]	; (80354 <_Z10pinSetMode4Porti4Mode+0x100>)
   80296:	e7f2      	b.n	8027e <_Z10pinSetMode4Porti4Mode+0x2a>
            PIOD->PIO_ODR=1<<pin;
            break;
        }
        break;
      case OUTPUT:
        switch (p) {
   80298:	2803      	cmp	r0, #3
   8029a:	d854      	bhi.n	80346 <_Z10pinSetMode4Porti4Mode+0xf2>
   8029c:	e8df f000 	tbb	[pc, r0]
   802a0:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PER=1<<pin;
   802a4:	2301      	movs	r3, #1
   802a6:	fa03 f101 	lsl.w	r1, r3, r1
   802aa:	4b27      	ldr	r3, [pc, #156]	; (80348 <_Z10pinSetMode4Porti4Mode+0xf4>)
   802ac:	e00d      	b.n	802ca <_Z10pinSetMode4Porti4Mode+0x76>
            PIOA->PIO_OER=1<<pin;
            break;
          case B:
            PIOB->PIO_PER=1<<pin;
   802ae:	2301      	movs	r3, #1
   802b0:	fa03 f101 	lsl.w	r1, r3, r1
   802b4:	4b25      	ldr	r3, [pc, #148]	; (8034c <_Z10pinSetMode4Porti4Mode+0xf8>)
   802b6:	e008      	b.n	802ca <_Z10pinSetMode4Porti4Mode+0x76>
            PIOB->PIO_OER=1<<pin;
            break;
          case C:
            PIOC->PIO_PER=1<<pin;
   802b8:	2301      	movs	r3, #1
   802ba:	fa03 f101 	lsl.w	r1, r3, r1
   802be:	4b24      	ldr	r3, [pc, #144]	; (80350 <_Z10pinSetMode4Porti4Mode+0xfc>)
   802c0:	e003      	b.n	802ca <_Z10pinSetMode4Porti4Mode+0x76>
            PIOC->PIO_OER=1<<pin;
            break;
          case D:
            PIOD->PIO_PER=1<<pin;
   802c2:	2301      	movs	r3, #1
   802c4:	fa03 f101 	lsl.w	r1, r3, r1
   802c8:	4b22      	ldr	r3, [pc, #136]	; (80354 <_Z10pinSetMode4Porti4Mode+0x100>)
   802ca:	6019      	str	r1, [r3, #0]
            PIOD->PIO_OER=1<<pin;
   802cc:	6119      	str	r1, [r3, #16]
            break;
   802ce:	4770      	bx	lr
        }
        break;
      case PERIPHERAL_A:
        switch (p) {
   802d0:	2803      	cmp	r0, #3
   802d2:	d838      	bhi.n	80346 <_Z10pinSetMode4Porti4Mode+0xf2>
   802d4:	e8df f000 	tbb	[pc, r0]
   802d8:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PDR=1<<pin;
   802dc:	2301      	movs	r3, #1
   802de:	fa03 f101 	lsl.w	r1, r3, r1
   802e2:	4b19      	ldr	r3, [pc, #100]	; (80348 <_Z10pinSetMode4Porti4Mode+0xf4>)
   802e4:	e00d      	b.n	80302 <_Z10pinSetMode4Porti4Mode+0xae>
            PIOA->PIO_ABSR &= ~(1<<pin);
            break;
          case B:
            PIOB->PIO_PDR=1<<pin;
   802e6:	2301      	movs	r3, #1
   802e8:	fa03 f101 	lsl.w	r1, r3, r1
   802ec:	4b17      	ldr	r3, [pc, #92]	; (8034c <_Z10pinSetMode4Porti4Mode+0xf8>)
   802ee:	e008      	b.n	80302 <_Z10pinSetMode4Porti4Mode+0xae>
            PIOB->PIO_ABSR &= ~(1<<pin);
            break;
          case C:
            PIOC->PIO_PDR=1<<pin;
   802f0:	2301      	movs	r3, #1
   802f2:	fa03 f101 	lsl.w	r1, r3, r1
   802f6:	4b16      	ldr	r3, [pc, #88]	; (80350 <_Z10pinSetMode4Porti4Mode+0xfc>)
   802f8:	e003      	b.n	80302 <_Z10pinSetMode4Porti4Mode+0xae>
            PIOC->PIO_ABSR &= ~(1<<pin);
            break;
          case D:
            PIOD->PIO_PDR=1<<pin;
   802fa:	2301      	movs	r3, #1
   802fc:	fa03 f101 	lsl.w	r1, r3, r1
   80300:	4b14      	ldr	r3, [pc, #80]	; (80354 <_Z10pinSetMode4Porti4Mode+0x100>)
   80302:	6059      	str	r1, [r3, #4]
            PIOD->PIO_ABSR &= ~(1<<pin);
   80304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80306:	ea22 0101 	bic.w	r1, r2, r1
   8030a:	e01b      	b.n	80344 <_Z10pinSetMode4Porti4Mode+0xf0>
            break;
        }
        break;
      case PERIPHERAL_B:
        switch (p) {
   8030c:	2803      	cmp	r0, #3
   8030e:	d81a      	bhi.n	80346 <_Z10pinSetMode4Porti4Mode+0xf2>
   80310:	e8df f000 	tbb	[pc, r0]
   80314:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_PDR=1<<pin;
   80318:	2301      	movs	r3, #1
   8031a:	fa03 f101 	lsl.w	r1, r3, r1
   8031e:	4b0a      	ldr	r3, [pc, #40]	; (80348 <_Z10pinSetMode4Porti4Mode+0xf4>)
   80320:	e00d      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOA->PIO_ABSR |=1 <<pin;
            break;
          case B:
            PIOB->PIO_PDR=1<<pin;
   80322:	2301      	movs	r3, #1
   80324:	fa03 f101 	lsl.w	r1, r3, r1
   80328:	4b08      	ldr	r3, [pc, #32]	; (8034c <_Z10pinSetMode4Porti4Mode+0xf8>)
   8032a:	e008      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOB->PIO_ABSR |= 1<<pin;
            break;
          case C:
            PIOC->PIO_PDR=1<<pin;
   8032c:	2301      	movs	r3, #1
   8032e:	fa03 f101 	lsl.w	r1, r3, r1
   80332:	4b07      	ldr	r3, [pc, #28]	; (80350 <_Z10pinSetMode4Porti4Mode+0xfc>)
   80334:	e003      	b.n	8033e <_Z10pinSetMode4Porti4Mode+0xea>
            PIOC->PIO_ABSR |= 1<<pin;
            break;
          case D:
            PIOD->PIO_PDR=1<<pin;
   80336:	2301      	movs	r3, #1
   80338:	fa03 f101 	lsl.w	r1, r3, r1
   8033c:	4b05      	ldr	r3, [pc, #20]	; (80354 <_Z10pinSetMode4Porti4Mode+0x100>)
   8033e:	6059      	str	r1, [r3, #4]
            PIOD->PIO_ABSR |= 1<<pin;
   80340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80342:	4311      	orrs	r1, r2
   80344:	6719      	str	r1, [r3, #112]	; 0x70
   80346:	4770      	bx	lr
   80348:	400e0e00 	.word	0x400e0e00
   8034c:	400e1000 	.word	0x400e1000
   80350:	400e1200 	.word	0x400e1200
   80354:	400e1400 	.word	0x400e1400

00080358 <_Z16pinDisablePullup4Porti>:
        break;
    }
 }

 void pinDisablePullup(Port p, int pin) {
    switch (p) {
   80358:	2803      	cmp	r0, #3
   8035a:	d817      	bhi.n	8038c <_Z16pinDisablePullup4Porti+0x34>
   8035c:	e8df f000 	tbb	[pc, r0]
   80360:	110c0702 	.word	0x110c0702
      case A:
        PIOA->PIO_PUDR=1<<pin;
   80364:	2301      	movs	r3, #1
   80366:	fa03 f101 	lsl.w	r1, r3, r1
   8036a:	4b09      	ldr	r3, [pc, #36]	; (80390 <_Z16pinDisablePullup4Porti+0x38>)
   8036c:	e00d      	b.n	8038a <_Z16pinDisablePullup4Porti+0x32>
        break;
      case B:
        PIOB->PIO_PUDR=1<<pin;
   8036e:	2301      	movs	r3, #1
   80370:	fa03 f101 	lsl.w	r1, r3, r1
   80374:	4b07      	ldr	r3, [pc, #28]	; (80394 <_Z16pinDisablePullup4Porti+0x3c>)
   80376:	e008      	b.n	8038a <_Z16pinDisablePullup4Porti+0x32>
        break;
      case C:
        PIOC->PIO_PUDR=1<<pin;
   80378:	2301      	movs	r3, #1
   8037a:	fa03 f101 	lsl.w	r1, r3, r1
   8037e:	4b06      	ldr	r3, [pc, #24]	; (80398 <_Z16pinDisablePullup4Porti+0x40>)
   80380:	e003      	b.n	8038a <_Z16pinDisablePullup4Porti+0x32>
        break;
      case D:
        PIOD->PIO_PUDR=1<<pin;
   80382:	2301      	movs	r3, #1
   80384:	fa03 f101 	lsl.w	r1, r3, r1
   80388:	4b04      	ldr	r3, [pc, #16]	; (8039c <_Z16pinDisablePullup4Porti+0x44>)
   8038a:	6619      	str	r1, [r3, #96]	; 0x60
   8038c:	4770      	bx	lr
   8038e:	bf00      	nop
   80390:	400e0e00 	.word	0x400e0e00
   80394:	400e1000 	.word	0x400e1000
   80398:	400e1200 	.word	0x400e1200
   8039c:	400e1400 	.word	0x400e1400

000803a0 <_Z12pinSetOutput4Portii>:
        break;
    }
 }

 void pinSetOutput(Port p, int pin, int level) {
    switch (level) {
   803a0:	b1e2      	cbz	r2, 803dc <_Z12pinSetOutput4Portii+0x3c>
   803a2:	2a01      	cmp	r2, #1
   803a4:	d134      	bne.n	80410 <_Z12pinSetOutput4Portii+0x70>
      case HIGH:
        switch (p) {
   803a6:	2803      	cmp	r0, #3
   803a8:	d832      	bhi.n	80410 <_Z12pinSetOutput4Portii+0x70>
   803aa:	e8df f000 	tbb	[pc, r0]
   803ae:	0702      	.short	0x0702
   803b0:	110c      	.short	0x110c
          case A:
            PIOA->PIO_SODR=1<<pin;
   803b2:	2301      	movs	r3, #1
   803b4:	fa03 f101 	lsl.w	r1, r3, r1
   803b8:	4b16      	ldr	r3, [pc, #88]	; (80414 <_Z12pinSetOutput4Portii+0x74>)
   803ba:	e00d      	b.n	803d8 <_Z12pinSetOutput4Portii+0x38>
            break;
          case B:
            PIOB->PIO_SODR=1<<pin;
   803bc:	2301      	movs	r3, #1
   803be:	fa03 f101 	lsl.w	r1, r3, r1
   803c2:	4b15      	ldr	r3, [pc, #84]	; (80418 <_Z12pinSetOutput4Portii+0x78>)
   803c4:	e008      	b.n	803d8 <_Z12pinSetOutput4Portii+0x38>
            break;
          case C:
            PIOC->PIO_SODR=1<<pin;
   803c6:	2301      	movs	r3, #1
   803c8:	fa03 f101 	lsl.w	r1, r3, r1
   803cc:	4b13      	ldr	r3, [pc, #76]	; (8041c <_Z12pinSetOutput4Portii+0x7c>)
   803ce:	e003      	b.n	803d8 <_Z12pinSetOutput4Portii+0x38>
            break;
          case D:
            PIOD->PIO_SODR=1<<pin;
   803d0:	2301      	movs	r3, #1
   803d2:	fa03 f101 	lsl.w	r1, r3, r1
   803d6:	4b12      	ldr	r3, [pc, #72]	; (80420 <_Z12pinSetOutput4Portii+0x80>)
   803d8:	6319      	str	r1, [r3, #48]	; 0x30
            break;
   803da:	4770      	bx	lr
        }
        break;
      case LOW:
        switch (p) {
   803dc:	2803      	cmp	r0, #3
   803de:	d817      	bhi.n	80410 <_Z12pinSetOutput4Portii+0x70>
   803e0:	e8df f000 	tbb	[pc, r0]
   803e4:	110c0702 	.word	0x110c0702
          case A:
            PIOA->PIO_CODR=1<<pin;
   803e8:	2301      	movs	r3, #1
   803ea:	fa03 f101 	lsl.w	r1, r3, r1
   803ee:	4b09      	ldr	r3, [pc, #36]	; (80414 <_Z12pinSetOutput4Portii+0x74>)
   803f0:	e00d      	b.n	8040e <_Z12pinSetOutput4Portii+0x6e>
            break;
          case B:
            PIOB->PIO_CODR=1<<pin;
   803f2:	2301      	movs	r3, #1
   803f4:	fa03 f101 	lsl.w	r1, r3, r1
   803f8:	4b07      	ldr	r3, [pc, #28]	; (80418 <_Z12pinSetOutput4Portii+0x78>)
   803fa:	e008      	b.n	8040e <_Z12pinSetOutput4Portii+0x6e>
            break;
          case C:
            PIOC->PIO_CODR=1<<pin;
   803fc:	2301      	movs	r3, #1
   803fe:	fa03 f101 	lsl.w	r1, r3, r1
   80402:	4b06      	ldr	r3, [pc, #24]	; (8041c <_Z12pinSetOutput4Portii+0x7c>)
   80404:	e003      	b.n	8040e <_Z12pinSetOutput4Portii+0x6e>
            break;
          case D:
            PIOD->PIO_CODR=1<<pin;
   80406:	2301      	movs	r3, #1
   80408:	fa03 f101 	lsl.w	r1, r3, r1
   8040c:	4b04      	ldr	r3, [pc, #16]	; (80420 <_Z12pinSetOutput4Portii+0x80>)
   8040e:	6359      	str	r1, [r3, #52]	; 0x34
   80410:	4770      	bx	lr
   80412:	bf00      	nop
   80414:	400e0e00 	.word	0x400e0e00
   80418:	400e1000 	.word	0x400e1000
   8041c:	400e1200 	.word	0x400e1200
   80420:	400e1400 	.word	0x400e1400

00080424 <_ZN7SSD13058InstanceEv>:

    SSD1305() {};
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
   80424:	b510      	push	{r4, lr}
        static SSD1305 instance;
   80426:	4c08      	ldr	r4, [pc, #32]	; (80448 <_ZN7SSD13058InstanceEv+0x24>)
   80428:	6823      	ldr	r3, [r4, #0]
   8042a:	07db      	lsls	r3, r3, #31
   8042c:	d409      	bmi.n	80442 <_ZN7SSD13058InstanceEv+0x1e>
   8042e:	4620      	mov	r0, r4
   80430:	4b06      	ldr	r3, [pc, #24]	; (8044c <_ZN7SSD13058InstanceEv+0x28>)
   80432:	4798      	blx	r3
   80434:	b128      	cbz	r0, 80442 <_ZN7SSD13058InstanceEv+0x1e>
    static const Port resPort   =  B;
    static const int  resPin    = 25;
    static const Port dcPort    =  C;
    static const int  dcPin     = 28;

    SSD1305() {};
   80436:	4b06      	ldr	r3, [pc, #24]	; (80450 <_ZN7SSD13058InstanceEv+0x2c>)
   80438:	4a06      	ldr	r2, [pc, #24]	; (80454 <_ZN7SSD13058InstanceEv+0x30>)
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
        static SSD1305 instance;
   8043a:	4620      	mov	r0, r4
    static const Port resPort   =  B;
    static const int  resPin    = 25;
    static const Port dcPort    =  C;
    static const int  dcPin     = 28;

    SSD1305() {};
   8043c:	601a      	str	r2, [r3, #0]
    SSD1305(SSD1305 const&);
    void operator=(SSD1305 const&);
  public:
    static SSD1305& Instance() {
        static SSD1305 instance;
   8043e:	4b06      	ldr	r3, [pc, #24]	; (80458 <_ZN7SSD13058InstanceEv+0x34>)
   80440:	4798      	blx	r3
        return instance;
    };
   80442:	4803      	ldr	r0, [pc, #12]	; (80450 <_ZN7SSD13058InstanceEv+0x2c>)
   80444:	bd10      	pop	{r4, pc}
   80446:	bf00      	nop
   80448:	2000008c 	.word	0x2000008c
   8044c:	00080e1d 	.word	0x00080e1d
   80450:	20000088 	.word	0x20000088
   80454:	00081af0 	.word	0x00081af0
   80458:	00080e39 	.word	0x00080e39

0008045c <_ZN7DisplayC1Ev>:
#include "driver/SSD1305.h"
#include "../assets/images.h"

#include <math.h>

Display::Display() {
   8045c:	b530      	push	{r4, r5, lr}
   8045e:	4d0f      	ldr	r5, [pc, #60]	; (8049c <_ZN7DisplayC1Ev+0x40>)
   80460:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
   80464:	4604      	mov	r4, r0
   80466:	47a8      	blx	r5
    ssdp = SSD1305Params();
   80468:	4668      	mov	r0, sp
   8046a:	47a8      	blx	r5
   8046c:	f44f 7200 	mov.w	r2, #512	; 0x200
   80470:	4669      	mov	r1, sp
   80472:	4620      	mov	r0, r4
   80474:	4b0a      	ldr	r3, [pc, #40]	; (804a0 <_ZN7DisplayC1Ev+0x44>)
   80476:	4798      	blx	r3
   80478:	4668      	mov	r0, sp
   8047a:	4b0a      	ldr	r3, [pc, #40]	; (804a4 <_ZN7DisplayC1Ev+0x48>)
   8047c:	4798      	blx	r3
    ssdp.clear(PIXEL_OFF);
   8047e:	4620      	mov	r0, r4
   80480:	2100      	movs	r1, #0
   80482:	4b09      	ldr	r3, [pc, #36]	; (804a8 <_ZN7DisplayC1Ev+0x4c>)
   80484:	4798      	blx	r3
    SSD1305::Instance().open(NULL);
   80486:	4b09      	ldr	r3, [pc, #36]	; (804ac <_ZN7DisplayC1Ev+0x50>)
   80488:	4798      	blx	r3
   8048a:	6803      	ldr	r3, [r0, #0]
   8048c:	2100      	movs	r1, #0
   8048e:	681b      	ldr	r3, [r3, #0]
   80490:	4798      	blx	r3
}
   80492:	4620      	mov	r0, r4
   80494:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   80498:	bd30      	pop	{r4, r5, pc}
   8049a:	bf00      	nop
   8049c:	00080691 	.word	0x00080691
   804a0:	00080eb9 	.word	0x00080eb9
   804a4:	00080693 	.word	0x00080693
   804a8:	000806d3 	.word	0x000806d3
   804ac:	00080425 	.word	0x00080425

000804b0 <_ZN7DisplayD1Ev>:

Display::~Display() {
   804b0:	b538      	push	{r3, r4, r5, lr}
    delete &ssdp;
   804b2:	4604      	mov	r4, r0
   804b4:	4d04      	ldr	r5, [pc, #16]	; (804c8 <_ZN7DisplayD1Ev+0x18>)
   804b6:	b118      	cbz	r0, 804c0 <_ZN7DisplayD1Ev+0x10>
   804b8:	47a8      	blx	r5
   804ba:	4620      	mov	r0, r4
   804bc:	4b03      	ldr	r3, [pc, #12]	; (804cc <_ZN7DisplayD1Ev+0x1c>)
   804be:	4798      	blx	r3
}
   804c0:	4620      	mov	r0, r4
   804c2:	47a8      	blx	r5
   804c4:	4620      	mov	r0, r4
   804c6:	bd38      	pop	{r3, r4, r5, pc}
   804c8:	00080693 	.word	0x00080693
   804cc:	00080e15 	.word	0x00080e15

000804d0 <_ZN7Display8drawTextEhh4FontPKc>:

void Display::drawBitmap( Bitmap &bmp) {
    bmp.draw(ssdp);
}

void Display::drawText( uint8_t x, uint8_t y, Font f, const char* str) {
   804d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int glyph_w, glyph_h;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
   804d4:	2b01      	cmp	r3, #1

void Display::drawBitmap( Bitmap &bmp) {
    bmp.draw(ssdp);
}

void Display::drawText( uint8_t x, uint8_t y, Font f, const char* str) {
   804d6:	b089      	sub	sp, #36	; 0x24
   804d8:	4681      	mov	r9, r0
   804da:	460f      	mov	r7, r1
   804dc:	4692      	mov	sl, r2
    int glyph_w, glyph_h;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
   804de:	d103      	bne.n	804e8 <_ZN7Display8drawTextEhh4FontPKc+0x18>
        bitmap_raw = font_large;
   804e0:	492a      	ldr	r1, [pc, #168]	; (8058c <_ZN7Display8drawTextEhh4FontPKc+0xbc>)
        glyph_w = 8;
        glyph_h = 32;
   804e2:	2620      	movs	r6, #32
    int glyph_w, glyph_h;
    const unsigned char* bitmap_raw;
    
    if (f == LARGE_FONT) {
        bitmap_raw = font_large;
        glyph_w = 8;
   804e4:	2508      	movs	r5, #8
   804e6:	e002      	b.n	804ee <_ZN7Display8drawTextEhh4FontPKc+0x1e>
        glyph_h = 32;
    } else {    // default is SMALL_FONT
        bitmap_raw = font_small;
        glyph_w = 7;
        glyph_h = 7;
   804e8:	2607      	movs	r6, #7
    if (f == LARGE_FONT) {
        bitmap_raw = font_large;
        glyph_w = 8;
        glyph_h = 32;
    } else {    // default is SMALL_FONT
        bitmap_raw = font_small;
   804ea:	4929      	ldr	r1, [pc, #164]	; (80590 <_ZN7Display8drawTextEhh4FontPKc+0xc0>)
        glyph_w = 7;
   804ec:	4635      	mov	r5, r6
        glyph_h = 7;
    }

    Bitmap bmp(bitmap_raw);
   804ee:	4b29      	ldr	r3, [pc, #164]	; (80594 <_ZN7Display8drawTextEhh4FontPKc+0xc4>)
   804f0:	a803      	add	r0, sp, #12
   804f2:	4798      	blx	r3

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
   804f4:	9b06      	ldr	r3, [sp, #24]
   804f6:	fb93 f3f5 	sdiv	r3, r3, r5
   804fa:	fb05 fb03 	mul.w	fp, r5, r3
   804fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   80500:	f103 38ff 	add.w	r8, r3, #4294967295
    
    for (int i = 0; str[i] != 0; i++) {
   80504:	f818 4f01 	ldrb.w	r4, [r8, #1]!
   80508:	2c00      	cmp	r4, #0
   8050a:	d03c      	beq.n	80586 <_ZN7Display8drawTextEhh4FontPKc+0xb6>
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
   8050c:	2c20      	cmp	r4, #32
   8050e:	d017      	beq.n	80540 <_ZN7Display8drawTextEhh4FontPKc+0x70>
        else if (str[i] == 45)                  glyphPos = 1;           // -
   80510:	2c2d      	cmp	r4, #45	; 0x2d
   80512:	d017      	beq.n	80544 <_ZN7Display8drawTextEhh4FontPKc+0x74>
        else if (str[i] >= 48 && str[i] <= 57)  glyphPos = str[i] - 46; // 0-9
   80514:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   80518:	2b09      	cmp	r3, #9
   8051a:	d801      	bhi.n	80520 <_ZN7Display8drawTextEhh4FontPKc+0x50>
   8051c:	3c2e      	subs	r4, #46	; 0x2e
   8051e:	e016      	b.n	8054e <_ZN7Display8drawTextEhh4FontPKc+0x7e>
        else if (str[i] == 63)                  glyphPos = 12;          // ?
   80520:	2c3f      	cmp	r4, #63	; 0x3f
   80522:	d013      	beq.n	8054c <_ZN7Display8drawTextEhh4FontPKc+0x7c>
        else if (str[i] == 46)                  glyphPos = 13;          // .
   80524:	2c2e      	cmp	r4, #46	; 0x2e
   80526:	d00f      	beq.n	80548 <_ZN7Display8drawTextEhh4FontPKc+0x78>
        else if (str[i] >= 65 && str[i] <= 90)  glyphPos = str[i] - 51; // A-Z
   80528:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   8052c:	2b19      	cmp	r3, #25
   8052e:	d801      	bhi.n	80534 <_ZN7Display8drawTextEhh4FontPKc+0x64>
   80530:	3c33      	subs	r4, #51	; 0x33
   80532:	e00c      	b.n	8054e <_ZN7Display8drawTextEhh4FontPKc+0x7e>
        else if (str[i] >= 97 && str[i] <= 122) glyphPos = str[i] - 83; // a-z
   80534:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   80538:	2b19      	cmp	r3, #25
   8053a:	d807      	bhi.n	8054c <_ZN7Display8drawTextEhh4FontPKc+0x7c>
   8053c:	3c53      	subs	r4, #83	; 0x53
   8053e:	e006      	b.n	8054e <_ZN7Display8drawTextEhh4FontPKc+0x7e>

    int glyph_map_w = (bmp.width / glyph_w) * glyph_w;
    
    for (int i = 0; str[i] != 0; i++) {
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
   80540:	2400      	movs	r4, #0
   80542:	e004      	b.n	8054e <_ZN7Display8drawTextEhh4FontPKc+0x7e>
        else if (str[i] == 45)                  glyphPos = 1;           // -
   80544:	2401      	movs	r4, #1
   80546:	e002      	b.n	8054e <_ZN7Display8drawTextEhh4FontPKc+0x7e>
        else if (str[i] >= 48 && str[i] <= 57)  glyphPos = str[i] - 46; // 0-9
        else if (str[i] == 63)                  glyphPos = 12;          // ?
        else if (str[i] == 46)                  glyphPos = 13;          // .
   80548:	240d      	movs	r4, #13
   8054a:	e000      	b.n	8054e <_ZN7Display8drawTextEhh4FontPKc+0x7e>
    for (int i = 0; str[i] != 0; i++) {
        int glyphPos;
        if (str[i] == 32)                       glyphPos = 0;           // Space
        else if (str[i] == 45)                  glyphPos = 1;           // -
        else if (str[i] >= 48 && str[i] <= 57)  glyphPos = str[i] - 46; // 0-9
        else if (str[i] == 63)                  glyphPos = 12;          // ?
   8054c:	240c      	movs	r4, #12
        else if (str[i] == 46)                  glyphPos = 13;          // .
        else if (str[i] >= 65 && str[i] <= 90)  glyphPos = str[i] - 51; // A-Z
        else if (str[i] >= 97 && str[i] <= 122) glyphPos = str[i] - 83; // a-z
        else                                    glyphPos = 12;          // ?
        
        bmp.setRectangle(   (glyphPos * glyph_w) % glyph_map_w, 
   8054e:	fb05 f104 	mul.w	r1, r5, r4
   80552:	fb91 f2fb 	sdiv	r2, r1, fp
   80556:	fb0b 1112 	mls	r1, fp, r2, r1
                            (((glyphPos * glyph_w) / glyph_map_w) * glyph_h), 
                             glyph_w, glyph_h);
   8055a:	4372      	muls	r2, r6
   8055c:	b2ec      	uxtb	r4, r5
   8055e:	f8df c040 	ldr.w	ip, [pc, #64]	; 805a0 <_ZN7Display8drawTextEhh4FontPKc+0xd0>
   80562:	a803      	add	r0, sp, #12
   80564:	b2c9      	uxtb	r1, r1
   80566:	b2d2      	uxtb	r2, r2
   80568:	4623      	mov	r3, r4
   8056a:	9600      	str	r6, [sp, #0]
   8056c:	47e0      	blx	ip
        bmp.moveTo(x, y);
   8056e:	4639      	mov	r1, r7
   80570:	a803      	add	r0, sp, #12
   80572:	4652      	mov	r2, sl
   80574:	4b08      	ldr	r3, [pc, #32]	; (80598 <_ZN7Display8drawTextEhh4FontPKc+0xc8>)
   80576:	4798      	blx	r3
        bmp.draw(ssdp);
        x += glyph_w;
   80578:	4427      	add	r7, r4
        
        bmp.setRectangle(   (glyphPos * glyph_w) % glyph_map_w, 
                            (((glyphPos * glyph_w) / glyph_map_w) * glyph_h), 
                             glyph_w, glyph_h);
        bmp.moveTo(x, y);
        bmp.draw(ssdp);
   8057a:	a803      	add	r0, sp, #12
   8057c:	4649      	mov	r1, r9
   8057e:	4b07      	ldr	r3, [pc, #28]	; (8059c <_ZN7Display8drawTextEhh4FontPKc+0xcc>)
   80580:	4798      	blx	r3
        x += glyph_w;
   80582:	b2ff      	uxtb	r7, r7
   80584:	e7be      	b.n	80504 <_ZN7Display8drawTextEhh4FontPKc+0x34>
    }
}
   80586:	b009      	add	sp, #36	; 0x24
   80588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8058c:	000818e2 	.word	0x000818e2
   80590:	000817a0 	.word	0x000817a0
   80594:	000805f1 	.word	0x000805f1
   80598:	00080615 	.word	0x00080615
   8059c:	00080629 	.word	0x00080629
   805a0:	0008061b 	.word	0x0008061b

000805a4 <_ZN7Display19drawFilledRectangleEiiii>:
    this->drawLine(x0, y1, x1, y1);
    this->drawLine(x1, y1, x1, y0);
    this->drawLine(x1, y0, x0, y0);
}

void Display::drawFilledRectangle(int x0, int y0, int x1, int y1) {
   805a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   805a8:	4680      	mov	r8, r0
   805aa:	460f      	mov	r7, r1
   805ac:	4615      	mov	r5, r2
   805ae:	4699      	mov	r9, r3
    for (int y = y0; y < y1; y++) {
   805b0:	9b08      	ldr	r3, [sp, #32]
   805b2:	429d      	cmp	r5, r3
   805b4:	da0c      	bge.n	805d0 <_ZN7Display19drawFilledRectangleEiiii+0x2c>
   805b6:	463c      	mov	r4, r7
        for (int x = x0; x < x1; x++) {
   805b8:	454c      	cmp	r4, r9
   805ba:	da07      	bge.n	805cc <_ZN7Display19drawFilledRectangleEiiii+0x28>
            ssdp.setPixel(x, y, PIXEL_ON);
   805bc:	4621      	mov	r1, r4
   805be:	4640      	mov	r0, r8
   805c0:	462a      	mov	r2, r5
   805c2:	2301      	movs	r3, #1
   805c4:	4e03      	ldr	r6, [pc, #12]	; (805d4 <_ZN7Display19drawFilledRectangleEiiii+0x30>)
   805c6:	47b0      	blx	r6
    this->drawLine(x1, y0, x0, y0);
}

void Display::drawFilledRectangle(int x0, int y0, int x1, int y1) {
    for (int y = y0; y < y1; y++) {
        for (int x = x0; x < x1; x++) {
   805c8:	3401      	adds	r4, #1
   805ca:	e7f5      	b.n	805b8 <_ZN7Display19drawFilledRectangleEiiii+0x14>
    this->drawLine(x1, y1, x1, y0);
    this->drawLine(x1, y0, x0, y0);
}

void Display::drawFilledRectangle(int x0, int y0, int x1, int y1) {
    for (int y = y0; y < y1; y++) {
   805cc:	3501      	adds	r5, #1
   805ce:	e7ef      	b.n	805b0 <_ZN7Display19drawFilledRectangleEiiii+0xc>
   805d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   805d4:	00080695 	.word	0x00080695

000805d8 <_ZN7Display5paintEv>:

void Display::drawPixel(int x, int y) {
    ssdp.setPixel(x, y, PIXEL_ON);
}

void Display::paint() {
   805d8:	b510      	push	{r4, lr}
    SSD1305::Instance().write(&ssdp);
   805da:	4b04      	ldr	r3, [pc, #16]	; (805ec <_ZN7Display5paintEv+0x14>)

void Display::drawPixel(int x, int y) {
    ssdp.setPixel(x, y, PIXEL_ON);
}

void Display::paint() {
   805dc:	4604      	mov	r4, r0
    SSD1305::Instance().write(&ssdp);
   805de:	4798      	blx	r3
   805e0:	6803      	ldr	r3, [r0, #0]
   805e2:	4621      	mov	r1, r4
   805e4:	689b      	ldr	r3, [r3, #8]
   805e6:	4798      	blx	r3
   805e8:	bd10      	pop	{r4, pc}
   805ea:	bf00      	nop
   805ec:	00080425 	.word	0x00080425

000805f0 <_ZN6BitmapC1EPKh>:

Bitmap::Bitmap(uint8_t x, uint8_t y, const unsigned char* bmp) {
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], x, y, bmp);
}

Bitmap::Bitmap(const unsigned char* bmp) {
   805f0:	b530      	push	{r4, r5, lr}
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], 0, 0, bmp);
   805f2:	780d      	ldrb	r5, [r1, #0]
   805f4:	784c      	ldrb	r4, [r1, #1]
}

void Bitmap::init(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h, 
                  uint8_t x, uint8_t y, const unsigned char* bmp) {
    this->r_x = r_x;
   805f6:	2200      	movs	r2, #0
   805f8:	7082      	strb	r2, [r0, #2]
    this->r_y = r_y;
   805fa:	70c2      	strb	r2, [r0, #3]
    this->r_w = r_w;
   805fc:	7105      	strb	r5, [r0, #4]
    this->r_h = r_h;
   805fe:	7144      	strb	r4, [r0, #5]

    this->x = x;
   80600:	7002      	strb	r2, [r0, #0]
    this->y = y;
   80602:	7042      	strb	r2, [r0, #1]

    width = bmp[0];
   80604:	780a      	ldrb	r2, [r1, #0]
    height = bmp[1];

    bitmap = &bmp[2];
   80606:	3102      	adds	r1, #2
    this->r_h = r_h;

    this->x = x;
    this->y = y;

    width = bmp[0];
   80608:	60c2      	str	r2, [r0, #12]
    height = bmp[1];
   8060a:	f811 2c01 	ldrb.w	r2, [r1, #-1]

    bitmap = &bmp[2];
   8060e:	6081      	str	r1, [r0, #8]

    this->x = x;
    this->y = y;

    width = bmp[0];
    height = bmp[1];
   80610:	6102      	str	r2, [r0, #16]
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], x, y, bmp);
}

Bitmap::Bitmap(const unsigned char* bmp) {
    init(0, 0, (uint8_t)bmp[0], (uint8_t)bmp[1], 0, 0, bmp);
}
   80612:	bd30      	pop	{r4, r5, pc}

00080614 <_ZN6Bitmap6moveToEhh>:

    bitmap = &bmp[2];
}

void Bitmap::moveTo(uint8_t x, uint8_t y) {
    this->x = x;
   80614:	7001      	strb	r1, [r0, #0]
    this->y = y;
   80616:	7042      	strb	r2, [r0, #1]
   80618:	4770      	bx	lr

0008061a <_ZN6Bitmap12setRectangleEhhhh>:
}

void Bitmap::setRectangle(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h) {
    this->r_x = r_x;
    this->r_y = r_y;
    this->r_w = r_w;
   8061a:	7103      	strb	r3, [r0, #4]
    this->r_h = r_h;
   8061c:	f89d 3000 	ldrb.w	r3, [sp]
uint8_t Bitmap::getY() {
    return y;
}

void Bitmap::setRectangle(uint8_t r_x, uint8_t r_y, uint8_t r_w, uint8_t r_h) {
    this->r_x = r_x;
   80620:	7081      	strb	r1, [r0, #2]
    this->r_y = r_y;
   80622:	70c2      	strb	r2, [r0, #3]
    this->r_w = r_w;
    this->r_h = r_h;
   80624:	7143      	strb	r3, [r0, #5]
   80626:	4770      	bx	lr

00080628 <_ZN6Bitmap4drawER13SSD1305Params>:

uint8_t Bitmap::getRectH() {
    return r_h;
}

void Bitmap::draw(SSD1305Params &ssdp) {
   80628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8062c:	4604      	mov	r4, r0
   8062e:	4688      	mov	r8, r1
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
   80630:	2600      	movs	r6, #0
   80632:	7963      	ldrb	r3, [r4, #5]
   80634:	b2f5      	uxtb	r5, r6
   80636:	42ab      	cmp	r3, r5
   80638:	d926      	bls.n	80688 <_ZN6Bitmap4drawER13SSD1305Params+0x60>
   8063a:	2300      	movs	r3, #0
   8063c:	b2da      	uxtb	r2, r3
   8063e:	f103 0901 	add.w	r9, r3, #1
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
   80642:	7923      	ldrb	r3, [r4, #4]
   80644:	4293      	cmp	r3, r2
   80646:	d91d      	bls.n	80684 <_ZN6Bitmap4drawER13SSD1305Params+0x5c>
            uint8_t disp_x = x + d_x;
   80648:	7823      	ldrb	r3, [r4, #0]
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   8064a:	78a7      	ldrb	r7, [r4, #2]
   8064c:	68e1      	ldr	r1, [r4, #12]
   8064e:	4417      	add	r7, r2
}

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
   80650:	441a      	add	r2, r3
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   80652:	78e3      	ldrb	r3, [r4, #3]

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
            uint8_t disp_y = y + d_y;
   80654:	f894 e001 	ldrb.w	lr, [r4, #1]

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;
   80658:	442b      	add	r3, r5
   8065a:	fb01 7303 	mla	r3, r1, r3, r7
   8065e:	2108      	movs	r1, #8
   80660:	fb93 f3f1 	sdiv	r3, r3, r1

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
                PIXEL_ON : PIXEL_OFF;
   80664:	68a1      	ldr	r1, [r4, #8]
            uint8_t disp_y = y + d_y;

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
   80666:	f007 0707 	and.w	r7, r7, #7
                PIXEL_ON : PIXEL_OFF;
   8066a:	5ccb      	ldrb	r3, [r1, r3]

void Bitmap::draw(SSD1305Params &ssdp) {
    for (uint8_t d_y = 0; d_y < r_h; d_y++) {
        for (uint8_t d_x = 0; d_x < r_w; d_x++) {
            uint8_t disp_x = x + d_x;
            uint8_t disp_y = y + d_y;
   8066c:	44ae      	add	lr, r5

            int bmp_addr = ((r_x + d_x) + ((r_y + d_y) * width)) / 8;

            int pix_status =
                (bitmap[bmp_addr] & (0x1 << ((r_x + d_x) % 8))) ?
                PIXEL_ON : PIXEL_OFF;
   8066e:	413b      	asrs	r3, r7

            ssdp.setPixel(disp_x, disp_y, pix_status);
   80670:	b2d1      	uxtb	r1, r2
   80672:	f003 0301 	and.w	r3, r3, #1
   80676:	4640      	mov	r0, r8
   80678:	fa5f f28e 	uxtb.w	r2, lr
   8067c:	4f03      	ldr	r7, [pc, #12]	; (8068c <_ZN6Bitmap4drawER13SSD1305Params+0x64>)
   8067e:	47b8      	blx	r7
   80680:	464b      	mov	r3, r9
   80682:	e7db      	b.n	8063c <_ZN6Bitmap4drawER13SSD1305Params+0x14>
   80684:	3601      	adds	r6, #1
   80686:	e7d4      	b.n	80632 <_ZN6Bitmap4drawER13SSD1305Params+0xa>
   80688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8068c:	00080695 	.word	0x00080695

00080690 <_ZN13SSD1305ParamsC1Ev>:
#include "../SSD1305.h"

#include <stdlib.h>

SSD1305Params::SSD1305Params() {
}
   80690:	4770      	bx	lr

00080692 <_ZN13SSD1305ParamsD1Ev>:

SSD1305Params::~SSD1305Params() {

}
   80692:	4770      	bx	lr

00080694 <_ZN13SSD1305Params8setPixelEiii>:

void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
   80694:	297f      	cmp	r1, #127	; 0x7f

SSD1305Params::~SSD1305Params() {

}

void SSD1305Params::setPixel(int x, int y, int val) {
   80696:	b510      	push	{r4, lr}
    if (x >= 0 && x < width && y >= 0 && y < height) {
   80698:	d81a      	bhi.n	806d0 <_ZN13SSD1305Params8setPixelEiii+0x3c>
   8069a:	2a1f      	cmp	r2, #31
   8069c:	d818      	bhi.n	806d0 <_ZN13SSD1305Params8setPixelEiii+0x3c>
   8069e:	f1c2 041f 	rsb	r4, r2, #31
   806a2:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   806a6:	f002 0207 	and.w	r2, r2, #7
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
   806aa:	10e4      	asrs	r4, r4, #3
void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
   806ac:	2b01      	cmp	r3, #1
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
                    0x1 << ((pix_in_page - 1) - ( y % pix_in_page));
   806ae:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
   806b2:	f1c2 0207 	rsb	r2, r2, #7
void SSD1305Params::setPixel(int x, int y, int val) {
    if (x >= 0 && x < width && y >= 0 && y < height) {
        #ifdef SSD1305_ORIENTATION
            int max_x = width - 1;
            int max_y = height - 1;
            if (val == PIXEL_ON)
   806b6:	d104      	bne.n	806c2 <_ZN13SSD1305Params8setPixelEiii+0x2e>
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] |= 
                    0x1 << ((pix_in_page - 1) - ( y % pix_in_page));
   806b8:	4093      	lsls	r3, r2
   806ba:	5c42      	ldrb	r2, [r0, r1]
   806bc:	4313      	orrs	r3, r2
   806be:	5443      	strb	r3, [r0, r1]
   806c0:	bd10      	pop	{r4, pc}
            else
                buffer[max_x - x + (width * ((max_y - y) / pix_in_page))] &=
                   ~(0x1 << ((pix_in_page - 1) - (y % pix_in_page))); 
   806c2:	2301      	movs	r3, #1
   806c4:	fa03 f202 	lsl.w	r2, r3, r2
   806c8:	5c43      	ldrb	r3, [r0, r1]
   806ca:	ea23 0202 	bic.w	r2, r3, r2
   806ce:	5442      	strb	r2, [r0, r1]
   806d0:	bd10      	pop	{r4, pc}

000806d2 <_ZN13SSD1305Params5clearEi>:
        #endif
    }
}

void SSD1305Params::clear(int val) {
    for (int i = 0; i < visible_buffers; i++) {
   806d2:	2300      	movs	r3, #0
        if (val == PIXEL_ON)
   806d4:	2901      	cmp	r1, #1
            buffer[i] = 0xFF; // <<<< Problem is here
   806d6:	bf0c      	ite	eq
   806d8:	22ff      	moveq	r2, #255	; 0xff
        else
            buffer[i] = 0x00;
   806da:	2200      	movne	r2, #0
   806dc:	54c2      	strb	r2, [r0, r3]
        #endif
    }
}

void SSD1305Params::clear(int val) {
    for (int i = 0; i < visible_buffers; i++) {
   806de:	3301      	adds	r3, #1
   806e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   806e4:	d1f6      	bne.n	806d4 <_ZN13SSD1305Params5clearEi+0x2>
        if (val == PIXEL_ON)
            buffer[i] = 0xFF; // <<<< Problem is here
        else
            buffer[i] = 0x00;
    }
   806e6:	4770      	bx	lr

000806e8 <_ZN14ShiftRegisters5closeEv>:
    return 0;
}

int ShiftRegisters::close() {
    return 0;
}
   806e8:	2000      	movs	r0, #0
   806ea:	4770      	bx	lr

000806ec <_ZN14ShiftRegisters4readEv>:
    return 0;
}

void* ShiftRegisters::read() {
    return (void*)0;
}
   806ec:	2000      	movs	r0, #0
   806ee:	4770      	bx	lr

000806f0 <_ZN14ShiftRegisters5ioctlEiPv>:

void* ShiftRegisters::ioctl(int ioctl_t, void* data) {
    return (void*)0;
   806f0:	2000      	movs	r0, #0
   806f2:	4770      	bx	lr

000806f4 <_ZN14ShiftRegisters4openEPv>:
#include "../../system.h"

#include <unistd.h>
#include <stdlib.h>

int ShiftRegisters::open( void* params) {
   806f4:	b510      	push	{r4, lr}

    // Open our shift register driver
    // Enable IO, set to output
    pinSetMode(seqSdPort,   seqSdPin,   OUTPUT);
   806f6:	2002      	movs	r0, #2
   806f8:	4c22      	ldr	r4, [pc, #136]	; (80784 <_ZN14ShiftRegisters4openEPv+0x90>)
   806fa:	2117      	movs	r1, #23
   806fc:	2201      	movs	r2, #1
   806fe:	47a0      	blx	r4
    pinSetMode(seqClkPort,  seqClkPin,  OUTPUT);
   80700:	2002      	movs	r0, #2
   80702:	2118      	movs	r1, #24
   80704:	2201      	movs	r2, #1
   80706:	47a0      	blx	r4
    pinSetMode(seqOePort,   seqOePin,   OUTPUT);
   80708:	2002      	movs	r0, #2
   8070a:	2119      	movs	r1, #25
   8070c:	2201      	movs	r2, #1
   8070e:	47a0      	blx	r4
    pinSetMode(funcSdPort,  funcSdPin,  OUTPUT);
   80710:	2002      	movs	r0, #2
   80712:	211d      	movs	r1, #29
   80714:	2201      	movs	r2, #1
   80716:	47a0      	blx	r4
    pinSetMode(funcClkPort, funcClkPin, OUTPUT);
   80718:	2002      	movs	r0, #2
   8071a:	2115      	movs	r1, #21
   8071c:	2201      	movs	r2, #1
   8071e:	47a0      	blx	r4
    pinSetMode(funcOePort,  funcOePin,  OUTPUT);
   80720:	2201      	movs	r2, #1
   80722:	2002      	movs	r0, #2
   80724:	2116      	movs	r1, #22
   80726:	47a0      	blx	r4

    // Disable pull-ups
    pinDisablePullup(seqSdPort,   seqSdPin);
   80728:	4c17      	ldr	r4, [pc, #92]	; (80788 <_ZN14ShiftRegisters4openEPv+0x94>)
   8072a:	2002      	movs	r0, #2
   8072c:	2117      	movs	r1, #23
   8072e:	47a0      	blx	r4
    pinDisablePullup(seqClkPort,  seqClkPin);
   80730:	2002      	movs	r0, #2
   80732:	2118      	movs	r1, #24
   80734:	47a0      	blx	r4
    pinDisablePullup(seqOePort,   seqOePort);
   80736:	2002      	movs	r0, #2
   80738:	4601      	mov	r1, r0
   8073a:	47a0      	blx	r4
    pinDisablePullup(funcSdPort,  funcSdPin);
   8073c:	2002      	movs	r0, #2
   8073e:	211d      	movs	r1, #29
   80740:	47a0      	blx	r4
    pinDisablePullup(funcClkPort, funcClkPin);
   80742:	2002      	movs	r0, #2
   80744:	2115      	movs	r1, #21
   80746:	47a0      	blx	r4
    pinDisablePullup(funcOePort,  funcOePin);
   80748:	2002      	movs	r0, #2
   8074a:	2116      	movs	r1, #22
   8074c:	47a0      	blx	r4

    // Set data and clock low, latch high
    pinSetOutput(seqSdPort,   seqSdPin,   LOW);
   8074e:	4c0f      	ldr	r4, [pc, #60]	; (8078c <_ZN14ShiftRegisters4openEPv+0x98>)
   80750:	2002      	movs	r0, #2
   80752:	2117      	movs	r1, #23
   80754:	2200      	movs	r2, #0
   80756:	47a0      	blx	r4
    pinSetOutput(seqClkPort,  seqClkPin,  LOW);
   80758:	2002      	movs	r0, #2
   8075a:	2118      	movs	r1, #24
   8075c:	2200      	movs	r2, #0
   8075e:	47a0      	blx	r4
    pinSetOutput(seqOePort,   seqOePin,   HIGH);
   80760:	2002      	movs	r0, #2
   80762:	2119      	movs	r1, #25
   80764:	2201      	movs	r2, #1
   80766:	47a0      	blx	r4
    pinSetOutput(funcSdPort,  funcSdPin,  LOW);
   80768:	2002      	movs	r0, #2
   8076a:	211d      	movs	r1, #29
   8076c:	2200      	movs	r2, #0
   8076e:	47a0      	blx	r4
    pinSetOutput(funcClkPort, funcClkPin, LOW);
   80770:	2002      	movs	r0, #2
   80772:	2115      	movs	r1, #21
   80774:	2200      	movs	r2, #0
   80776:	47a0      	blx	r4
    pinSetOutput(funcOePort,  funcOePin,  HIGH);
   80778:	2002      	movs	r0, #2
   8077a:	2116      	movs	r1, #22
   8077c:	2201      	movs	r2, #1
   8077e:	47a0      	blx	r4

    return 0;
}
   80780:	2000      	movs	r0, #0
   80782:	bd10      	pop	{r4, pc}
   80784:	00080255 	.word	0x00080255
   80788:	00080359 	.word	0x00080359
   8078c:	000803a1 	.word	0x000803a1

00080790 <_ZN14ShiftRegisters5writeEPv>:

int ShiftRegisters::close() {
    return 0;
}

int ShiftRegisters::write( void* data) {
   80790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ShiftRegistersWriteParams *params = (ShiftRegistersWriteParams *)data;
    
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
   80792:	2002      	movs	r0, #2
   80794:	2200      	movs	r2, #0
   80796:	4c27      	ldr	r4, [pc, #156]	; (80834 <_ZN14ShiftRegisters5writeEPv+0xa4>)

int ShiftRegisters::close() {
    return 0;
}

int ShiftRegisters::write( void* data) {
   80798:	460f      	mov	r7, r1
    ShiftRegistersWriteParams *params = (ShiftRegistersWriteParams *)data;
    
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
   8079a:	2119      	movs	r1, #25
   8079c:	47a0      	blx	r4
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
   8079e:	2002      	movs	r0, #2
   807a0:	2118      	movs	r1, #24
   807a2:	2201      	movs	r2, #1
   807a4:	47a0      	blx	r4
    for (int i = 0; i < 32 ; i++) {
   807a6:	2600      	movs	r6, #0
        pinSetOutput(seqClkPort, seqClkPin, LOW);
   807a8:	2002      	movs	r0, #2
   807aa:	2118      	movs	r1, #24
   807ac:	2200      	movs	r2, #0
   807ae:	47a0      	blx	r4
        int level = (~(params->stepLights >> i) & 1);
   807b0:	683b      	ldr	r3, [r7, #0]
        pinSetOutput(seqSdPort, seqSdPin, level);
   807b2:	2002      	movs	r0, #2
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
        pinSetOutput(seqClkPort, seqClkPin, LOW);
        int level = (~(params->stepLights >> i) & 1);
   807b4:	40f3      	lsrs	r3, r6
   807b6:	f003 0201 	and.w	r2, r3, #1
        pinSetOutput(seqSdPort, seqSdPin, level);
   807ba:	2117      	movs	r1, #23
   807bc:	f082 0201 	eor.w	r2, r2, #1
   807c0:	47a0      	blx	r4
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
   807c2:	3601      	adds	r6, #1
        pinSetOutput(seqClkPort, seqClkPin, LOW);
        int level = (~(params->stepLights >> i) & 1);
        pinSetOutput(seqSdPort, seqSdPin, level);
        pinSetOutput(seqClkPort, seqClkPin, HIGH);
   807c4:	2002      	movs	r0, #2
   807c6:	2118      	movs	r1, #24
   807c8:	2201      	movs	r2, #1
   807ca:	47a0      	blx	r4
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
   807cc:	2e20      	cmp	r6, #32
        pinSetOutput(seqClkPort, seqClkPin, LOW);
   807ce:	4d19      	ldr	r5, [pc, #100]	; (80834 <_ZN14ShiftRegisters5writeEPv+0xa4>)
    // Sequencer lights
    // Set latch low
    pinSetOutput(seqOePort, seqOePin, LOW);
    // Bang em out
    pinSetOutput(seqClkPort, seqClkPin, HIGH);
    for (int i = 0; i < 32 ; i++) {
   807d0:	d1ea      	bne.n	807a8 <_ZN14ShiftRegisters5writeEPv+0x18>
        pinSetOutput(seqClkPort, seqClkPin, LOW);
        int level = (~(params->stepLights >> i) & 1);
        pinSetOutput(seqSdPort, seqSdPin, level);
        pinSetOutput(seqClkPort, seqClkPin, HIGH);
    }
    pinSetOutput(seqClkPort, seqClkPin, LOW);
   807d2:	2002      	movs	r0, #2
   807d4:	2118      	movs	r1, #24
   807d6:	2200      	movs	r2, #0
   807d8:	47a8      	blx	r5
    // Latch high
    pinSetOutput(seqOePort, seqOePin, HIGH);
   807da:	2002      	movs	r0, #2
   807dc:	2119      	movs	r1, #25
   807de:	2201      	movs	r2, #1
   807e0:	47a8      	blx	r5

    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
   807e2:	2002      	movs	r0, #2
   807e4:	2116      	movs	r1, #22
   807e6:	2200      	movs	r2, #0
   807e8:	47a8      	blx	r5
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
   807ea:	2002      	movs	r0, #2
   807ec:	2115      	movs	r1, #21
   807ee:	2201      	movs	r2, #1
   807f0:	47a8      	blx	r5
    for (int i = 0; i < 16; i++) {
   807f2:	2500      	movs	r5, #0
        pinSetOutput(funcClkPort, funcClkPin, LOW);
   807f4:	2002      	movs	r0, #2
   807f6:	2115      	movs	r1, #21
   807f8:	2200      	movs	r2, #0
   807fa:	47a0      	blx	r4
        int level = ~(params->functionLights >> i) & 1;
   807fc:	88ba      	ldrh	r2, [r7, #4]
        pinSetOutput(funcSdPort, funcSdPin, level);
   807fe:	2002      	movs	r0, #2
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
        pinSetOutput(funcClkPort, funcClkPin, LOW);
        int level = ~(params->functionLights >> i) & 1;
   80800:	412a      	asrs	r2, r5
   80802:	f002 0201 	and.w	r2, r2, #1
        pinSetOutput(funcSdPort, funcSdPin, level);
   80806:	211d      	movs	r1, #29
   80808:	f082 0201 	eor.w	r2, r2, #1
   8080c:	47a0      	blx	r4
    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
   8080e:	3501      	adds	r5, #1
        pinSetOutput(funcClkPort, funcClkPin, LOW);
        int level = ~(params->functionLights >> i) & 1;
        pinSetOutput(funcSdPort, funcSdPin, level);
        pinSetOutput(funcClkPort, funcClkPin, HIGH);
   80810:	2002      	movs	r0, #2
   80812:	2115      	movs	r1, #21
   80814:	2201      	movs	r2, #1
   80816:	47a0      	blx	r4
    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
   80818:	2d10      	cmp	r5, #16
        pinSetOutput(funcClkPort, funcClkPin, LOW);
   8081a:	4e06      	ldr	r6, [pc, #24]	; (80834 <_ZN14ShiftRegisters5writeEPv+0xa4>)
    // Function lights
    // Set latch low
    pinSetOutput(funcOePort, funcOePin, LOW);
    // Bang em out
    pinSetOutput(funcClkPort, funcClkPin, HIGH);
    for (int i = 0; i < 16; i++) {
   8081c:	d1ea      	bne.n	807f4 <_ZN14ShiftRegisters5writeEPv+0x64>
        pinSetOutput(funcClkPort, funcClkPin, LOW);
        int level = ~(params->functionLights >> i) & 1;
        pinSetOutput(funcSdPort, funcSdPin, level);
        pinSetOutput(funcClkPort, funcClkPin, HIGH);
    }
    pinSetOutput(funcClkPort, funcClkPin, LOW);
   8081e:	2002      	movs	r0, #2
   80820:	2115      	movs	r1, #21
   80822:	2200      	movs	r2, #0
   80824:	47b0      	blx	r6
    // Latch high
    pinSetOutput(funcOePort, funcOePin, HIGH);
   80826:	2002      	movs	r0, #2
   80828:	2116      	movs	r1, #22
   8082a:	2201      	movs	r2, #1
   8082c:	47b0      	blx	r6

    return 0;
}
   8082e:	2000      	movs	r0, #0
   80830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80832:	bf00      	nop
   80834:	000803a1 	.word	0x000803a1

00080838 <_ZN3SPI5closeEv>:

    return 0;
 }

 int SPI::close() {
    SPI0->SPI_CR = SPI_CR_SPIDIS;
   80838:	4b05      	ldr	r3, [pc, #20]	; (80850 <_ZN3SPI5closeEv+0x18>)
   8083a:	2202      	movs	r2, #2
   8083c:	601a      	str	r2, [r3, #0]
    PMC->PMC_PCDR0 = 1<<ID_SPI0;
   8083e:	f503 2358 	add.w	r3, r3, #884736	; 0xd8000
   80842:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80846:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   8084a:	615a      	str	r2, [r3, #20]
    return 0;
 }
   8084c:	2000      	movs	r0, #0
   8084e:	4770      	bx	lr
   80850:	40008000 	.word	0x40008000

00080854 <_ZN3SPI4readEv>:
 }

 void* SPI::read() {

    return (void*)NULL;
 }
   80854:	2000      	movs	r0, #0
   80856:	4770      	bx	lr

00080858 <_ZN3SPI4openEPv>:
 #include "ShiftRegisters.h"
 #include "../Reporting.h"

 #include <stdlib.h> // Used for definition of NULL

 int SPI::open( void* data) {
   80858:	b538      	push	{r3, r4, r5, lr}
   8085a:	4604      	mov	r4, r0
    SPIParams *params = (SPIParams*)data;
    csPort = params->csPort;
   8085c:	7808      	ldrb	r0, [r1, #0]
    csPin  = params->csPin;
   8085e:	6849      	ldr	r1, [r1, #4]

    // Configure cs pin
    pinSetMode(csPort,   csPin,   OUTPUT);
   80860:	4d16      	ldr	r5, [pc, #88]	; (808bc <_ZN3SPI4openEPv+0x64>)

 #include <stdlib.h> // Used for definition of NULL

 int SPI::open( void* data) {
    SPIParams *params = (SPIParams*)data;
    csPort = params->csPort;
   80862:	7120      	strb	r0, [r4, #4]
    csPin  = params->csPin;
   80864:	60a1      	str	r1, [r4, #8]

    // Configure cs pin
    pinSetMode(csPort,   csPin,   OUTPUT);
   80866:	2201      	movs	r2, #1
   80868:	47a8      	blx	r5
    pinDisablePullup(csPort, csPin);
   8086a:	7920      	ldrb	r0, [r4, #4]
   8086c:	68a1      	ldr	r1, [r4, #8]
   8086e:	4b14      	ldr	r3, [pc, #80]	; (808c0 <_ZN3SPI4openEPv+0x68>)
   80870:	4798      	blx	r3
    pinSetOutput(csPort, csPin, HIGH);
   80872:	4b14      	ldr	r3, [pc, #80]	; (808c4 <_ZN3SPI4openEPv+0x6c>)
   80874:	7920      	ldrb	r0, [r4, #4]
   80876:	68a1      	ldr	r1, [r4, #8]
   80878:	2201      	movs	r2, #1
   8087a:	4798      	blx	r3

    // Configure SPI peripheral pins
    pinSetMode(misoPort, misoPin, PERIPHERAL_A);
   8087c:	2000      	movs	r0, #0
   8087e:	2119      	movs	r1, #25
   80880:	2202      	movs	r2, #2
   80882:	47a8      	blx	r5
    pinSetMode(mosiPort, mosiPin, PERIPHERAL_A);
   80884:	2000      	movs	r0, #0
   80886:	211a      	movs	r1, #26
   80888:	2202      	movs	r2, #2
   8088a:	47a8      	blx	r5
    pinSetMode(clkPort,  clkPin,  PERIPHERAL_A);
   8088c:	2000      	movs	r0, #0
   8088e:	211b      	movs	r1, #27
   80890:	2202      	movs	r2, #2
   80892:	47a8      	blx	r5

    // Enable SPI controller
    PMC->PMC_PCER0 = 1<<ID_SPI0;    
   80894:	4b0c      	ldr	r3, [pc, #48]	; (808c8 <_ZN3SPI4openEPv+0x70>)
   80896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8089a:	611a      	str	r2, [r3, #16]
    
    // Disable SPI in SPI controller so we can configure it
    SPI0->SPI_CR = SPI_CR_SPIDIS;
   8089c:	4b0b      	ldr	r3, [pc, #44]	; (808cc <_ZN3SPI4openEPv+0x74>)
   8089e:	2202      	movs	r2, #2
   808a0:	601a      	str	r2, [r3, #0]

    // Mode Register = Master, Disable fault detection, NPCS[3:0] = 
    SPI0->SPI_MR = SPI_MR_MSTR | SPI_MR_MODFDIS | 0x000E0000; 
   808a2:	4a0b      	ldr	r2, [pc, #44]	; (808d0 <_ZN3SPI4openEPv+0x78>)

    // Enable SPI in SPI controller
    SPI0->SPI_CR = SPI_CR_SPIEN;    

    return 0;
 }
   808a4:	2000      	movs	r0, #0
    
    // Disable SPI in SPI controller so we can configure it
    SPI0->SPI_CR = SPI_CR_SPIDIS;

    // Mode Register = Master, Disable fault detection, NPCS[3:0] = 
    SPI0->SPI_MR = SPI_MR_MSTR | SPI_MR_MODFDIS | 0x000E0000; 
   808a6:	605a      	str	r2, [r3, #4]

    // SPCK baudrate = MCK / SCBR = 84 MHz / 40 (0x28) = 2.1Mhz
    SPI0->SPI_CSR[0] |= 0x00002800 | SPI_CSR_NCPHA;
   808a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808aa:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
   808ae:	f042 0202 	orr.w	r2, r2, #2
   808b2:	631a      	str	r2, [r3, #48]	; 0x30

    // Enable SPI in SPI controller
    SPI0->SPI_CR = SPI_CR_SPIEN;    
   808b4:	2201      	movs	r2, #1
   808b6:	601a      	str	r2, [r3, #0]

    return 0;
 }
   808b8:	bd38      	pop	{r3, r4, r5, pc}
   808ba:	bf00      	nop
   808bc:	00080255 	.word	0x00080255
   808c0:	00080359 	.word	0x00080359
   808c4:	000803a1 	.word	0x000803a1
   808c8:	400e0600 	.word	0x400e0600
   808cc:	40008000 	.word	0x40008000
   808d0:	000e0011 	.word	0x000e0011

000808d4 <_ZN3SPI5ioctlEiPv>:

    return (void*)NULL;
 }

 void* SPI::ioctl(int ioctl_t, void *params) {
    if (ioctl_t == SPI_BLOCK_UNTIL_TRANSFERRED) {
   808d4:	b919      	cbnz	r1, 808de <_ZN3SPI5ioctlEiPv+0xa>
        while (!(SPI0->SPI_SR & SPI_SR_TXEMPTY)) {};
   808d6:	4b03      	ldr	r3, [pc, #12]	; (808e4 <_ZN3SPI5ioctlEiPv+0x10>)
   808d8:	691b      	ldr	r3, [r3, #16]
   808da:	059b      	lsls	r3, r3, #22
   808dc:	d5fb      	bpl.n	808d6 <_ZN3SPI5ioctlEiPv+0x2>
    }

    return (void*)NULL;
   808de:	2000      	movs	r0, #0
   808e0:	4770      	bx	lr
   808e2:	bf00      	nop
   808e4:	40008000 	.word	0x40008000

000808e8 <_ZN3SPI5writeEPv>:
    SPI0->SPI_CR = SPI_CR_SPIDIS;
    PMC->PMC_PCDR0 = 1<<ID_SPI0;
    return 0;
 }

 int SPI::write( void* data) {
   808e8:	b538      	push	{r3, r4, r5, lr}
   808ea:	4604      	mov	r4, r0
   808ec:	460d      	mov	r5, r1
    SPIWriteParams *swp = (SPIWriteParams*)data;

    // Wait for previous transfer to complete
    while ((SPI0->SPI_SR & SPI_SR_TXEMPTY) == 0);
   808ee:	4b0e      	ldr	r3, [pc, #56]	; (80928 <_ZN3SPI5writeEPv+0x40>)
   808f0:	691b      	ldr	r3, [r3, #16]
   808f2:	0599      	lsls	r1, r3, #22
   808f4:	d5fb      	bpl.n	808ee <_ZN3SPI5writeEPv+0x6>

    // Send data
    if (!csOpen) {
   808f6:	68e2      	ldr	r2, [r4, #12]
   808f8:	b92a      	cbnz	r2, 80906 <_ZN3SPI5writeEPv+0x1e>
        pinSetOutput(csPort, csPin, LOW);
   808fa:	4b0c      	ldr	r3, [pc, #48]	; (8092c <_ZN3SPI5writeEPv+0x44>)
   808fc:	7920      	ldrb	r0, [r4, #4]
   808fe:	68a1      	ldr	r1, [r4, #8]
   80900:	4798      	blx	r3
        csOpen = 1;
   80902:	2301      	movs	r3, #1
   80904:	60e3      	str	r3, [r4, #12]
    }
    SPI0->SPI_TDR = swp->data;
   80906:	882a      	ldrh	r2, [r5, #0]
   80908:	4b07      	ldr	r3, [pc, #28]	; (80928 <_ZN3SPI5writeEPv+0x40>)
   8090a:	60da      	str	r2, [r3, #12]

    // Wait til data has been sent
    // (SPI_BLOCK_UNTIL_TRANSFERRED ioctl does the same)
    while (!(SPI0->SPI_SR & SPI_SR_TXEMPTY)) {};
   8090c:	691a      	ldr	r2, [r3, #16]
   8090e:	0592      	lsls	r2, r2, #22
   80910:	d5fc      	bpl.n	8090c <_ZN3SPI5writeEPv+0x24>
    if (swp->mode == SPI_LAST) {
   80912:	686d      	ldr	r5, [r5, #4]
   80914:	b92d      	cbnz	r5, 80922 <_ZN3SPI5writeEPv+0x3a>
        pinSetOutput(csPort, csPin, HIGH);
   80916:	7920      	ldrb	r0, [r4, #4]
   80918:	68a1      	ldr	r1, [r4, #8]
   8091a:	2201      	movs	r2, #1
   8091c:	4b03      	ldr	r3, [pc, #12]	; (8092c <_ZN3SPI5writeEPv+0x44>)
   8091e:	4798      	blx	r3
        csOpen = 0;
   80920:	60e5      	str	r5, [r4, #12]
    }

    // We're out
    return 0;
 }
   80922:	2000      	movs	r0, #0
   80924:	bd38      	pop	{r3, r4, r5, pc}
   80926:	bf00      	nop
   80928:	40008000 	.word	0x40008000
   8092c:	000803a1 	.word	0x000803a1

00080930 <_ZN7SSD13055closeEv>:
    return 0;
 }

 int SSD1305::close() {
    return 0;
 }
   80930:	2000      	movs	r0, #0
   80932:	4770      	bx	lr

00080934 <_ZN7SSD13054readEv>:
    return 0;
 }

 void *SSD1305::read() {
    return (void*)0;
 }
   80934:	2000      	movs	r0, #0
   80936:	4770      	bx	lr

00080938 <_ZN7SSD13055ioctlEiPv>:

 void *SSD1305::ioctl(int ioctl_t, void* params) {
    return (void*)0;
   80938:	2000      	movs	r0, #0
   8093a:	4770      	bx	lr

0008093c <_ZN3SPI8InstanceEv>:

    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
   8093c:	b538      	push	{r3, r4, r5, lr}
        static SPI instance;
   8093e:	4c09      	ldr	r4, [pc, #36]	; (80964 <_ZN3SPI8InstanceEv+0x28>)
   80940:	6823      	ldr	r3, [r4, #0]
   80942:	f013 0501 	ands.w	r5, r3, #1
   80946:	d10a      	bne.n	8095e <_ZN3SPI8InstanceEv+0x22>
   80948:	4620      	mov	r0, r4
   8094a:	4b07      	ldr	r3, [pc, #28]	; (80968 <_ZN3SPI8InstanceEv+0x2c>)
   8094c:	4798      	blx	r3
   8094e:	b130      	cbz	r0, 8095e <_ZN3SPI8InstanceEv+0x22>

    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
   80950:	4a06      	ldr	r2, [pc, #24]	; (8096c <_ZN3SPI8InstanceEv+0x30>)
   80952:	4b07      	ldr	r3, [pc, #28]	; (80970 <_ZN3SPI8InstanceEv+0x34>)
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80954:	4620      	mov	r0, r4

    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
   80956:	6013      	str	r3, [r2, #0]
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   80958:	4b06      	ldr	r3, [pc, #24]	; (80974 <_ZN3SPI8InstanceEv+0x38>)
    Port csPort;
    int  csPin;
    int  csOpen;

    SPI() {
        csOpen = 0;
   8095a:	60d5      	str	r5, [r2, #12]
    // Make it a singleton
    SPI(SPI const&);
    void operator=(SPI const&);
  public:
    static SPI& Instance() {
        static SPI instance;
   8095c:	4798      	blx	r3
        return instance;
    };
   8095e:	4803      	ldr	r0, [pc, #12]	; (8096c <_ZN3SPI8InstanceEv+0x30>)
   80960:	bd38      	pop	{r3, r4, r5, pc}
   80962:	bf00      	nop
   80964:	200000a0 	.word	0x200000a0
   80968:	00080e1d 	.word	0x00080e1d
   8096c:	20000090 	.word	0x20000090
   80970:	00081ad0 	.word	0x00081ad0
   80974:	00080e39 	.word	0x00080e39

00080978 <_ZN7SSD13054openEPv>:

 #include "../Reporting.h"

 #include <stdlib.h>

 int SSD1305::open( void* params) {
   80978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pinSetMode(dcPort,  dcPin,  OUTPUT);
   8097c:	2002      	movs	r0, #2
   8097e:	4c8f      	ldr	r4, [pc, #572]	; (80bbc <_ZN7SSD13054openEPv+0x244>)
   80980:	211c      	movs	r1, #28
   80982:	2201      	movs	r2, #1
   80984:	47a0      	blx	r4
    pinSetMode(resPort, resPin, OUTPUT);
   80986:	2001      	movs	r0, #1
   80988:	4602      	mov	r2, r0
   8098a:	2119      	movs	r1, #25
   8098c:	47a0      	blx	r4
    pinDisablePullup(dcPort, dcPin);
   8098e:	4c8c      	ldr	r4, [pc, #560]	; (80bc0 <_ZN7SSD13054openEPv+0x248>)
   80990:	2002      	movs	r0, #2
   80992:	211c      	movs	r1, #28
   80994:	47a0      	blx	r4
    pinDisablePullup(resPort, resPin);
   80996:	2001      	movs	r0, #1
   80998:	2119      	movs	r1, #25
   8099a:	47a0      	blx	r4
    pinSetOutput(resPort, resPin, LOW);
   8099c:	4f89      	ldr	r7, [pc, #548]	; (80bc4 <_ZN7SSD13054openEPv+0x24c>)
   8099e:	2200      	movs	r2, #0
   809a0:	2119      	movs	r1, #25
   809a2:	2001      	movs	r0, #1
   809a4:	47b8      	blx	r7


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
   809a6:	4e88      	ldr	r6, [pc, #544]	; (80bc8 <_ZN7SSD13054openEPv+0x250>)
   809a8:	2008      	movs	r0, #8
   809aa:	47b0      	blx	r6
    sp->csPort = csPort;
   809ac:	f04f 0902 	mov.w	r9, #2
    sp->csPin  = csPin;
   809b0:	231a      	movs	r3, #26

    SPI::Instance().open(sp);
   809b2:	4d86      	ldr	r5, [pc, #536]	; (80bcc <_ZN7SSD13054openEPv+0x254>)
    pinSetOutput(resPort, resPin, LOW);


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
    sp->csPort = csPort;
    sp->csPin  = csPin;
   809b4:	6043      	str	r3, [r0, #4]
    pinDisablePullup(resPort, resPin);
    pinSetOutput(resPort, resPin, LOW);


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
    sp->csPort = csPort;
   809b6:	f880 9000 	strb.w	r9, [r0]
    pinDisablePullup(dcPort, dcPin);
    pinDisablePullup(resPort, resPin);
    pinSetOutput(resPort, resPin, LOW);


    SPIParams *sp = (SPIParams*)malloc(sizeof(SPIParams));
   809ba:	4604      	mov	r4, r0
    sp->csPort = csPort;
    sp->csPin  = csPin;

    SPI::Instance().open(sp);
   809bc:	47a8      	blx	r5
   809be:	6803      	ldr	r3, [r0, #0]
   809c0:	4621      	mov	r1, r4
   809c2:	681b      	ldr	r3, [r3, #0]
   809c4:	4798      	blx	r3
    free(sp);
   809c6:	f8df a208 	ldr.w	sl, [pc, #520]	; 80bd0 <_ZN7SSD13054openEPv+0x258>
   809ca:	4620      	mov	r0, r4
   809cc:	47d0      	blx	sl

    pinSetOutput(resPort, resPin, HIGH);
   809ce:	2001      	movs	r0, #1
   809d0:	4602      	mov	r2, r0
   809d2:	2119      	movs	r1, #25
   809d4:	47b8      	blx	r7
    pinSetOutput(dcPort,  dcPin,  LOW);
   809d6:	2200      	movs	r2, #0
   809d8:	211c      	movs	r1, #28
   809da:	4648      	mov	r0, r9
   809dc:	47b8      	blx	r7

    // Do our initialization
    SPIWriteParams* swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   809de:	2008      	movs	r0, #8
   809e0:	47b0      	blx	r6
    swp->mode = SPI_CONTINUE;
   809e2:	f04f 0b01 	mov.w	fp, #1
    swp->data = 0xAE;
   809e6:	23ae      	movs	r3, #174	; 0xae
   809e8:	8003      	strh	r3, [r0, #0]
    pinSetOutput(resPort, resPin, HIGH);
    pinSetOutput(dcPort,  dcPin,  LOW);

    // Do our initialization
    SPIWriteParams* swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
    swp->mode = SPI_CONTINUE;
   809ea:	f8c0 b004 	str.w	fp, [r0, #4]

    pinSetOutput(resPort, resPin, HIGH);
    pinSetOutput(dcPort,  dcPin,  LOW);

    // Do our initialization
    SPIWriteParams* swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   809ee:	4604      	mov	r4, r0
    swp->mode = SPI_CONTINUE;
    swp->data = 0xAE;
    SPI::Instance().write((void*)swp);
   809f0:	47a8      	blx	r5
   809f2:	6803      	ldr	r3, [r0, #0]
   809f4:	4621      	mov	r1, r4
   809f6:	689b      	ldr	r3, [r3, #8]
   809f8:	4798      	blx	r3
    swp->data = 0xD5;
   809fa:	23d5      	movs	r3, #213	; 0xd5
   809fc:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set display clock divider ratio
   809fe:	47a8      	blx	r5
   80a00:	6803      	ldr	r3, [r0, #0]
   80a02:	4621      	mov	r1, r4
   80a04:	689b      	ldr	r3, [r3, #8]
   80a06:	4798      	blx	r3
    swp->data = 0xA0;
   80a08:	23a0      	movs	r3, #160	; 0xa0
   80a0a:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80a0c:	47a8      	blx	r5
   80a0e:	6803      	ldr	r3, [r0, #0]
   80a10:	4621      	mov	r1, r4
   80a12:	689b      	ldr	r3, [r3, #8]
   80a14:	4798      	blx	r3
    swp->data = 0xA8;
   80a16:	23a8      	movs	r3, #168	; 0xa8
   80a18:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set multiplex ratio
   80a1a:	47a8      	blx	r5
   80a1c:	6803      	ldr	r3, [r0, #0]
    swp->data = 0x3F;
   80a1e:	263f      	movs	r6, #63	; 0x3f
    swp->data = 0xD5;
    SPI::Instance().write((void*)swp);  // set display clock divider ratio
    swp->data = 0xA0;
    SPI::Instance().write((void*)swp);
    swp->data = 0xA8;
    SPI::Instance().write((void*)swp);  // set multiplex ratio
   80a20:	689b      	ldr	r3, [r3, #8]
   80a22:	4621      	mov	r1, r4
   80a24:	4798      	blx	r3
    swp->data = 0x3F;
   80a26:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80a28:	47a8      	blx	r5
   80a2a:	6803      	ldr	r3, [r0, #0]
   80a2c:	4621      	mov	r1, r4
   80a2e:	689b      	ldr	r3, [r3, #8]
   80a30:	4798      	blx	r3
    swp->data = 0xD3;
   80a32:	23d3      	movs	r3, #211	; 0xd3
   80a34:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set display offset
   80a36:	47a8      	blx	r5
   80a38:	6803      	ldr	r3, [r0, #0]
    swp->data = 0x00;
   80a3a:	f04f 0800 	mov.w	r8, #0
    swp->data = 0xA8;
    SPI::Instance().write((void*)swp);  // set multiplex ratio
    swp->data = 0x3F;
    SPI::Instance().write((void*)swp);
    swp->data = 0xD3;
    SPI::Instance().write((void*)swp);  // set display offset
   80a3e:	689b      	ldr	r3, [r3, #8]
   80a40:	4621      	mov	r1, r4
   80a42:	4798      	blx	r3
    swp->data = 0x00;
   80a44:	f8a4 8000 	strh.w	r8, [r4]
    SPI::Instance().write((void*)swp);
   80a48:	47a8      	blx	r5
   80a4a:	6803      	ldr	r3, [r0, #0]
   80a4c:	4621      	mov	r1, r4
   80a4e:	689b      	ldr	r3, [r3, #8]
   80a50:	4798      	blx	r3
    swp->data = 0x40;
   80a52:	2340      	movs	r3, #64	; 0x40
   80a54:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set display start line
   80a56:	47a8      	blx	r5
   80a58:	6803      	ldr	r3, [r0, #0]
   80a5a:	4621      	mov	r1, r4
   80a5c:	689b      	ldr	r3, [r3, #8]
   80a5e:	4798      	blx	r3
    swp->data = 0xAD;
   80a60:	23ad      	movs	r3, #173	; 0xad
   80a62:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set master configuration
   80a64:	47a8      	blx	r5
   80a66:	6803      	ldr	r3, [r0, #0]
   80a68:	4621      	mov	r1, r4
   80a6a:	689b      	ldr	r3, [r3, #8]
   80a6c:	4798      	blx	r3
    swp->data = 0x8E;
   80a6e:	238e      	movs	r3, #142	; 0x8e
   80a70:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80a72:	47a8      	blx	r5
   80a74:	6803      	ldr	r3, [r0, #0]
   80a76:	4621      	mov	r1, r4
   80a78:	689b      	ldr	r3, [r3, #8]
   80a7a:	4798      	blx	r3
    swp->data = 0xD8;
   80a7c:	23d8      	movs	r3, #216	; 0xd8
   80a7e:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set area color mode
   80a80:	47a8      	blx	r5
   80a82:	6803      	ldr	r3, [r0, #0]
   80a84:	4621      	mov	r1, r4
   80a86:	689b      	ldr	r3, [r3, #8]
   80a88:	4798      	blx	r3
    swp->data = 0x05;
   80a8a:	2305      	movs	r3, #5
   80a8c:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80a8e:	47a8      	blx	r5
   80a90:	6803      	ldr	r3, [r0, #0]
   80a92:	4621      	mov	r1, r4
   80a94:	689b      	ldr	r3, [r3, #8]
   80a96:	4798      	blx	r3
    swp->data = 0xA1;
   80a98:	23a1      	movs	r3, #161	; 0xa1
   80a9a:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set segment re-map
   80a9c:	47a8      	blx	r5
   80a9e:	6803      	ldr	r3, [r0, #0]
   80aa0:	4621      	mov	r1, r4
   80aa2:	689b      	ldr	r3, [r3, #8]
   80aa4:	4798      	blx	r3
    swp->data = 0xC8;
   80aa6:	23c8      	movs	r3, #200	; 0xc8
   80aa8:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set com output scan direction
   80aaa:	47a8      	blx	r5
   80aac:	6803      	ldr	r3, [r0, #0]
   80aae:	4621      	mov	r1, r4
   80ab0:	689b      	ldr	r3, [r3, #8]
   80ab2:	4798      	blx	r3
    swp->data = 0xDA;
   80ab4:	23da      	movs	r3, #218	; 0xda
   80ab6:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set com pins hardware configuration
   80ab8:	47a8      	blx	r5
   80aba:	6803      	ldr	r3, [r0, #0]
   80abc:	4621      	mov	r1, r4
   80abe:	689b      	ldr	r3, [r3, #8]
   80ac0:	4798      	blx	r3
    swp->data = 0x12;
   80ac2:	2312      	movs	r3, #18
   80ac4:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80ac6:	47a8      	blx	r5
   80ac8:	6803      	ldr	r3, [r0, #0]
   80aca:	4621      	mov	r1, r4
   80acc:	689b      	ldr	r3, [r3, #8]
   80ace:	4798      	blx	r3
    swp->data = 0x91;
   80ad0:	2391      	movs	r3, #145	; 0x91
   80ad2:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set lookup table
   80ad4:	47a8      	blx	r5
   80ad6:	6803      	ldr	r3, [r0, #0]
   80ad8:	4621      	mov	r1, r4
   80ada:	689b      	ldr	r3, [r3, #8]
   80adc:	4798      	blx	r3
    swp->data = 0x3F;
   80ade:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80ae0:	47a8      	blx	r5
   80ae2:	6803      	ldr	r3, [r0, #0]
   80ae4:	4621      	mov	r1, r4
   80ae6:	689b      	ldr	r3, [r3, #8]
   80ae8:	4798      	blx	r3
    swp->data = 0x3F;
   80aea:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80aec:	47a8      	blx	r5
   80aee:	6803      	ldr	r3, [r0, #0]
   80af0:	4621      	mov	r1, r4
   80af2:	689b      	ldr	r3, [r3, #8]
   80af4:	4798      	blx	r3
    swp->data = 0x3F;
   80af6:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80af8:	47a8      	blx	r5
   80afa:	6803      	ldr	r3, [r0, #0]
   80afc:	4621      	mov	r1, r4
   80afe:	689b      	ldr	r3, [r3, #8]
   80b00:	4798      	blx	r3
    swp->data = 0x3F;
   80b02:	8026      	strh	r6, [r4, #0]
    SPI::Instance().write((void*)swp);
   80b04:	47a8      	blx	r5
   80b06:	6803      	ldr	r3, [r0, #0]
   80b08:	4621      	mov	r1, r4
   80b0a:	689b      	ldr	r3, [r3, #8]
   80b0c:	4798      	blx	r3
    swp->data = 0x81;
   80b0e:	2381      	movs	r3, #129	; 0x81
   80b10:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set current control for bank 0
   80b12:	47a8      	blx	r5
   80b14:	6803      	ldr	r3, [r0, #0]
   80b16:	4621      	mov	r1, r4
   80b18:	689b      	ldr	r3, [r3, #8]
   80b1a:	4798      	blx	r3
    swp->data = 0x8F;
   80b1c:	238f      	movs	r3, #143	; 0x8f
   80b1e:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80b20:	47a8      	blx	r5
   80b22:	6803      	ldr	r3, [r0, #0]
   80b24:	4621      	mov	r1, r4
   80b26:	689b      	ldr	r3, [r3, #8]
   80b28:	4798      	blx	r3
    swp->data = 0xD9;
   80b2a:	23d9      	movs	r3, #217	; 0xd9
   80b2c:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set pre-charge period
   80b2e:	47a8      	blx	r5
   80b30:	6803      	ldr	r3, [r0, #0]
   80b32:	4621      	mov	r1, r4
   80b34:	689b      	ldr	r3, [r3, #8]
   80b36:	4798      	blx	r3
    swp->data = 0xD2;
   80b38:	23d2      	movs	r3, #210	; 0xd2
   80b3a:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80b3c:	47a8      	blx	r5
   80b3e:	6803      	ldr	r3, [r0, #0]
   80b40:	4621      	mov	r1, r4
   80b42:	689b      	ldr	r3, [r3, #8]
   80b44:	4798      	blx	r3
    swp->data = 0xDB;
   80b46:	23db      	movs	r3, #219	; 0xdb
   80b48:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set vcomh deselect level
   80b4a:	47a8      	blx	r5
   80b4c:	6803      	ldr	r3, [r0, #0]
   80b4e:	4621      	mov	r1, r4
   80b50:	689b      	ldr	r3, [r3, #8]
   80b52:	4798      	blx	r3
    swp->data = 0x34;
   80b54:	2334      	movs	r3, #52	; 0x34
   80b56:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);
   80b58:	47a8      	blx	r5
   80b5a:	6803      	ldr	r3, [r0, #0]
   80b5c:	4621      	mov	r1, r4
   80b5e:	689b      	ldr	r3, [r3, #8]
   80b60:	4798      	blx	r3
    swp->data = 0xA4;
   80b62:	23a4      	movs	r3, #164	; 0xa4
   80b64:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Set entire display on/off
   80b66:	47a8      	blx	r5
   80b68:	6803      	ldr	r3, [r0, #0]
   80b6a:	4621      	mov	r1, r4
   80b6c:	689b      	ldr	r3, [r3, #8]
   80b6e:	4798      	blx	r3
    swp->data = 0xA6;
   80b70:	23a6      	movs	r3, #166	; 0xa6
   80b72:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // set normal/inverse display
   80b74:	47a8      	blx	r5
   80b76:	6803      	ldr	r3, [r0, #0]
   80b78:	4621      	mov	r1, r4
   80b7a:	689b      	ldr	r3, [r3, #8]
   80b7c:	4798      	blx	r3
    swp->data = 0x20;
   80b7e:	2320      	movs	r3, #32
   80b80:	8023      	strh	r3, [r4, #0]
    SPI::Instance().write((void*)swp);  // Page mode
   80b82:	47a8      	blx	r5
   80b84:	6803      	ldr	r3, [r0, #0]
   80b86:	4621      	mov	r1, r4
   80b88:	689b      	ldr	r3, [r3, #8]
   80b8a:	4798      	blx	r3
    swp->data = 0X00;
   80b8c:	f8a4 8000 	strh.w	r8, [r4]
    SPI::Instance().write((void*)swp);
   80b90:	47a8      	blx	r5
   80b92:	6803      	ldr	r3, [r0, #0]
   80b94:	4621      	mov	r1, r4
   80b96:	689b      	ldr	r3, [r3, #8]
   80b98:	4798      	blx	r3
    
    SPI::Instance().ioctl(SPI_BLOCK_UNTIL_TRANSFERRED, NULL);
   80b9a:	47a8      	blx	r5
   80b9c:	6803      	ldr	r3, [r0, #0]
   80b9e:	4641      	mov	r1, r8
   80ba0:	4642      	mov	r2, r8
   80ba2:	691b      	ldr	r3, [r3, #16]
   80ba4:	4798      	blx	r3
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);
   80ba6:	4648      	mov	r0, r9
   80ba8:	211c      	movs	r1, #28
   80baa:	465a      	mov	r2, fp
   80bac:	47b8      	blx	r7

    // Transfer 0 for every buffer
    swp->data = 0x00;
   80bae:	f44f 6684 	mov.w	r6, #1056	; 0x420
   80bb2:	f8a4 8000 	strh.w	r8, [r4]
   80bb6:	46a8      	mov	r8, r5
   80bb8:	e00c      	b.n	80bd4 <_ZN7SSD13054openEPv+0x25c>
   80bba:	bf00      	nop
   80bbc:	00080255 	.word	0x00080255
   80bc0:	00080359 	.word	0x00080359
   80bc4:	000803a1 	.word	0x000803a1
   80bc8:	00080e99 	.word	0x00080e99
   80bcc:	0008093d 	.word	0x0008093d
   80bd0:	00080ea9 	.word	0x00080ea9
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
        SPI::Instance().write(swp);
   80bd4:	47c0      	blx	r8
   80bd6:	6803      	ldr	r3, [r0, #0]
   80bd8:	4621      	mov	r1, r4
   80bda:	689b      	ldr	r3, [r3, #8]
   80bdc:	4798      	blx	r3
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);

    // Transfer 0 for every buffer
    swp->data = 0x00;
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
   80bde:	3e01      	subs	r6, #1
        SPI::Instance().write(swp);
   80be0:	4d0c      	ldr	r5, [pc, #48]	; (80c14 <_ZN7SSD13054openEPv+0x29c>)
    // Clear content
    pinSetOutput(dcPort, dcPin, HIGH);

    // Transfer 0 for every buffer
    swp->data = 0x00;
    for (int i = 0; i < ((SSD1305Params*)params)->total_buffers; i++) {
   80be2:	d1f7      	bne.n	80bd4 <_ZN7SSD13054openEPv+0x25c>
        SPI::Instance().write(swp);
    }

    SPI::Instance().ioctl(SPI_BLOCK_UNTIL_TRANSFERRED, NULL);
   80be4:	47a8      	blx	r5
   80be6:	6803      	ldr	r3, [r0, #0]
   80be8:	4631      	mov	r1, r6
   80bea:	691b      	ldr	r3, [r3, #16]
   80bec:	4632      	mov	r2, r6
   80bee:	4798      	blx	r3
    pinSetOutput(dcPort, dcPin, LOW);
   80bf0:	4632      	mov	r2, r6
   80bf2:	211c      	movs	r1, #28
   80bf4:	2002      	movs	r0, #2
   80bf6:	47b8      	blx	r7

    swp->data = 0xAF;
   80bf8:	23af      	movs	r3, #175	; 0xaf
   80bfa:	8023      	strh	r3, [r4, #0]
    swp->mode = SPI_LAST;
   80bfc:	6066      	str	r6, [r4, #4]
    SPI::Instance().write(swp);
   80bfe:	47a8      	blx	r5
   80c00:	6803      	ldr	r3, [r0, #0]
   80c02:	4621      	mov	r1, r4
   80c04:	689b      	ldr	r3, [r3, #8]
   80c06:	4798      	blx	r3

    free(swp);
   80c08:	4620      	mov	r0, r4
   80c0a:	47d0      	blx	sl

    return 0;
 }
   80c0c:	4630      	mov	r0, r6
   80c0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80c12:	bf00      	nop
   80c14:	0008093d 	.word	0x0008093d

00080c18 <_ZN7SSD13055writeEPv>:

 int SSD1305::close() {
    return 0;
 }

 int SSD1305::write( void* params) {
   80c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
   80c1c:	2002      	movs	r0, #2
   80c1e:	2201      	movs	r2, #1
   80c20:	4b20      	ldr	r3, [pc, #128]	; (80ca4 <_ZN7SSD13055writeEPv+0x8c>)

 int SSD1305::close() {
    return 0;
 }

 int SSD1305::write( void* params) {
   80c22:	4688      	mov	r8, r1
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
   80c24:	211c      	movs	r1, #28
   80c26:	4798      	blx	r3
    SPIWriteParams *swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   80c28:	4b1f      	ldr	r3, [pc, #124]	; (80ca8 <_ZN7SSD13055writeEPv+0x90>)
   80c2a:	2008      	movs	r0, #8
   80c2c:	4798      	blx	r3
    
    // transfer color data (we don't use this)
    swp->data = 0x00;
   80c2e:	2300      	movs	r3, #0
   80c30:	8003      	strh	r3, [r0, #0]
    swp->mode = SPI_CONTINUE;
   80c32:	2301      	movs	r3, #1

 int SSD1305::write( void* params) {
    SSD1305Params *ssdp = (SSD1305Params*)params;

    pinSetOutput(dcPort, dcPin, HIGH);
    SPIWriteParams *swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
   80c34:	4604      	mov	r4, r0
    
    // transfer color data (we don't use this)
    swp->data = 0x00;
    swp->mode = SPI_CONTINUE;
   80c36:	6043      	str	r3, [r0, #4]
   80c38:	f44f 7505 	mov.w	r5, #532	; 0x214
    for (int i = 0; i < ssdp->junk_buffer; i++) {
        SPI::Instance().write(swp);
   80c3c:	4f1b      	ldr	r7, [pc, #108]	; (80cac <_ZN7SSD13055writeEPv+0x94>)
   80c3e:	47b8      	blx	r7
   80c40:	6803      	ldr	r3, [r0, #0]
   80c42:	4621      	mov	r1, r4
   80c44:	689b      	ldr	r3, [r3, #8]
   80c46:	4798      	blx	r3
    SPIWriteParams *swp = (SPIWriteParams*)malloc(sizeof(SPIWriteParams));
    
    // transfer color data (we don't use this)
    swp->data = 0x00;
    swp->mode = SPI_CONTINUE;
    for (int i = 0; i < ssdp->junk_buffer; i++) {
   80c48:	3d01      	subs	r5, #1
   80c4a:	d1f7      	bne.n	80c3c <_ZN7SSD13055writeEPv+0x24>
        SPI::Instance().write(swp);
    }

    for (int i = 0; i < ssdp->visible_buffers; i++) {
        swp->data = ssdp->buffer[i];
   80c4c:	f818 3005 	ldrb.w	r3, [r8, r5]
   80c50:	8023      	strh	r3, [r4, #0]
        if (i == ssdp->visible_buffers - 1)
   80c52:	f240 13ff 	movw	r3, #511	; 0x1ff
   80c56:	429d      	cmp	r5, r3
            swp->mode = SPI_LAST;
   80c58:	bf04      	itt	eq
   80c5a:	2300      	moveq	r3, #0
   80c5c:	6063      	streq	r3, [r4, #4]
        SPI::Instance().write(swp);
   80c5e:	47b8      	blx	r7
   80c60:	6803      	ldr	r3, [r0, #0]
   80c62:	4621      	mov	r1, r4
   80c64:	689b      	ldr	r3, [r3, #8]
   80c66:	4798      	blx	r3

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
   80c68:	f005 037f 	and.w	r3, r5, #127	; 0x7f
   80c6c:	2b7f      	cmp	r3, #127	; 0x7f
   80c6e:	d009      	beq.n	80c84 <_ZN7SSD13055writeEPv+0x6c>
    swp->mode = SPI_CONTINUE;
    for (int i = 0; i < ssdp->junk_buffer; i++) {
        SPI::Instance().write(swp);
    }

    for (int i = 0; i < ssdp->visible_buffers; i++) {
   80c70:	3501      	adds	r5, #1
   80c72:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   80c76:	d1e9      	bne.n	80c4c <_ZN7SSD13055writeEPv+0x34>
                SPI::Instance().write(swp);
            }
        }
    }

    free(swp);
   80c78:	4620      	mov	r0, r4
   80c7a:	4b0d      	ldr	r3, [pc, #52]	; (80cb0 <_ZN7SSD13055writeEPv+0x98>)
   80c7c:	4798      	blx	r3
    return 0;
 }
   80c7e:	2000      	movs	r0, #0
   80c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        swp->data = ssdp->buffer[i];
        if (i == ssdp->visible_buffers - 1)
            swp->mode = SPI_LAST;
        SPI::Instance().write(swp);

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
   80c84:	f240 13ff 	movw	r3, #511	; 0x1ff
   80c88:	429d      	cmp	r5, r3
   80c8a:	d0f1      	beq.n	80c70 <_ZN7SSD13055writeEPv+0x58>
   80c8c:	2604      	movs	r6, #4
            for (int j = 0; j < ssdp->blank; j++) {
                swp->data = 255;
   80c8e:	23ff      	movs	r3, #255	; 0xff
   80c90:	8023      	strh	r3, [r4, #0]
                SPI::Instance().write(swp);
   80c92:	47b8      	blx	r7
   80c94:	6803      	ldr	r3, [r0, #0]
   80c96:	4621      	mov	r1, r4
   80c98:	689b      	ldr	r3, [r3, #8]
   80c9a:	4798      	blx	r3
        if (i == ssdp->visible_buffers - 1)
            swp->mode = SPI_LAST;
        SPI::Instance().write(swp);

        if (i % ssdp->width == ssdp->width - 1 && i != ssdp->visible_buffers - 1) {
            for (int j = 0; j < ssdp->blank; j++) {
   80c9c:	3e01      	subs	r6, #1
   80c9e:	d1f6      	bne.n	80c8e <_ZN7SSD13055writeEPv+0x76>
   80ca0:	e7e6      	b.n	80c70 <_ZN7SSD13055writeEPv+0x58>
   80ca2:	bf00      	nop
   80ca4:	000803a1 	.word	0x000803a1
   80ca8:	00080e99 	.word	0x00080e99
   80cac:	0008093d 	.word	0x0008093d
   80cb0:	00080ea9 	.word	0x00080ea9

00080cb4 <_ZN14ShiftRegisters8InstanceEv>:
    // Make this a singleton
    ShiftRegisters() {};
    ShiftRegisters(ShiftRegisters const&);
    void operator=(ShiftRegisters const&);
  public:
    static ShiftRegisters& Instance()
   80cb4:	b510      	push	{r4, lr}
    {
        static ShiftRegisters instance;
   80cb6:	4c08      	ldr	r4, [pc, #32]	; (80cd8 <_ZN14ShiftRegisters8InstanceEv+0x24>)
   80cb8:	6823      	ldr	r3, [r4, #0]
   80cba:	07db      	lsls	r3, r3, #31
   80cbc:	d409      	bmi.n	80cd2 <_ZN14ShiftRegisters8InstanceEv+0x1e>
   80cbe:	4620      	mov	r0, r4
   80cc0:	4b06      	ldr	r3, [pc, #24]	; (80cdc <_ZN14ShiftRegisters8InstanceEv+0x28>)
   80cc2:	4798      	blx	r3
   80cc4:	b128      	cbz	r0, 80cd2 <_ZN14ShiftRegisters8InstanceEv+0x1e>
    static const int  funcClkPin   = 21;
    static const Port funcOePort   =  C;
    static const int  funcOePin    = 22;

    // Make this a singleton
    ShiftRegisters() {};
   80cc6:	4b06      	ldr	r3, [pc, #24]	; (80ce0 <_ZN14ShiftRegisters8InstanceEv+0x2c>)
   80cc8:	4a06      	ldr	r2, [pc, #24]	; (80ce4 <_ZN14ShiftRegisters8InstanceEv+0x30>)
    ShiftRegisters(ShiftRegisters const&);
    void operator=(ShiftRegisters const&);
  public:
    static ShiftRegisters& Instance()
    {
        static ShiftRegisters instance;
   80cca:	4620      	mov	r0, r4
    static const int  funcClkPin   = 21;
    static const Port funcOePort   =  C;
    static const int  funcOePin    = 22;

    // Make this a singleton
    ShiftRegisters() {};
   80ccc:	601a      	str	r2, [r3, #0]
    ShiftRegisters(ShiftRegisters const&);
    void operator=(ShiftRegisters const&);
  public:
    static ShiftRegisters& Instance()
    {
        static ShiftRegisters instance;
   80cce:	4b06      	ldr	r3, [pc, #24]	; (80ce8 <_ZN14ShiftRegisters8InstanceEv+0x34>)
   80cd0:	4798      	blx	r3
        return instance;
    };
   80cd2:	4803      	ldr	r0, [pc, #12]	; (80ce0 <_ZN14ShiftRegisters8InstanceEv+0x2c>)
   80cd4:	bd10      	pop	{r4, pc}
   80cd6:	bf00      	nop
   80cd8:	200000a8 	.word	0x200000a8
   80cdc:	00080e1d 	.word	0x00080e1d
   80ce0:	200000a4 	.word	0x200000a4
   80ce4:	00081ab0 	.word	0x00081ab0
   80ce8:	00080e39 	.word	0x00080e39

00080cec <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm>:
#include "Display.h"

#include <stdlib.h>
#include <stdio.h>

void Reporting::reportCode(Priority p, VisualStateMethod method, uint32_t code) {
   80cec:	b5f0      	push	{r4, r5, r6, r7, lr}
   80cee:	4606      	mov	r6, r0
   80cf0:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
   80cf4:	460c      	mov	r4, r1
   80cf6:	461f      	mov	r7, r3
    if (method == LIGHTS) {
   80cf8:	b9b2      	cbnz	r2, 80d28 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x3c>
        if (p == d) {
   80cfa:	2900      	cmp	r1, #0
   80cfc:	d12b      	bne.n	80d56 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x6a>
          #ifdef DEBUG
            srwp->stepLights = code;
   80cfe:	6803      	ldr	r3, [r0, #0]
            srwp->functionLights = 0xFFFF;
   80d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80d04:	809a      	strh	r2, [r3, #4]
            ShiftRegisters::Instance().open(NULL);
   80d06:	4d15      	ldr	r5, [pc, #84]	; (80d5c <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x70>)

void Reporting::reportCode(Priority p, VisualStateMethod method, uint32_t code) {
    if (method == LIGHTS) {
        if (p == d) {
          #ifdef DEBUG
            srwp->stepLights = code;
   80d08:	601f      	str	r7, [r3, #0]
            srwp->functionLights = 0xFFFF;
            ShiftRegisters::Instance().open(NULL);
   80d0a:	47a8      	blx	r5
   80d0c:	6803      	ldr	r3, [r0, #0]
   80d0e:	4621      	mov	r1, r4
   80d10:	681b      	ldr	r3, [r3, #0]
   80d12:	4798      	blx	r3
            ShiftRegisters::Instance().write(srwp);
   80d14:	47a8      	blx	r5
   80d16:	6803      	ldr	r3, [r0, #0]
   80d18:	6831      	ldr	r1, [r6, #0]
   80d1a:	689b      	ldr	r3, [r3, #8]
   80d1c:	4798      	blx	r3
            ShiftRegisters::Instance().close();
   80d1e:	47a8      	blx	r5
   80d20:	6803      	ldr	r3, [r0, #0]
   80d22:	685b      	ldr	r3, [r3, #4]
   80d24:	4798      	blx	r3
   80d26:	e016      	b.n	80d56 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x6a>
          #endif
        }
    }
    else {
        if (p == d)  {
   80d28:	b9a9      	cbnz	r1, 80d56 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x6a>
            #ifdef DEBUG
                Display disp = Display();
   80d2a:	4b0d      	ldr	r3, [pc, #52]	; (80d60 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x74>)
                char hexString[10];
                sprintf(hexString, "0x%X", (unsigned int)code);
   80d2c:	ad03      	add	r5, sp, #12
        }
    }
    else {
        if (p == d)  {
            #ifdef DEBUG
                Display disp = Display();
   80d2e:	a806      	add	r0, sp, #24
   80d30:	4798      	blx	r3
                char hexString[10];
                sprintf(hexString, "0x%X", (unsigned int)code);
   80d32:	490c      	ldr	r1, [pc, #48]	; (80d64 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x78>)
   80d34:	463a      	mov	r2, r7
   80d36:	4b0c      	ldr	r3, [pc, #48]	; (80d68 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x7c>)
   80d38:	4628      	mov	r0, r5
   80d3a:	4798      	blx	r3
                disp.drawText(0, 0, SMALL_FONT, hexString);
   80d3c:	4621      	mov	r1, r4
   80d3e:	4622      	mov	r2, r4
   80d40:	4623      	mov	r3, r4
   80d42:	a806      	add	r0, sp, #24
   80d44:	9500      	str	r5, [sp, #0]
   80d46:	4c09      	ldr	r4, [pc, #36]	; (80d6c <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x80>)
   80d48:	47a0      	blx	r4
                disp.paint();
   80d4a:	a806      	add	r0, sp, #24
   80d4c:	4b08      	ldr	r3, [pc, #32]	; (80d70 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x84>)
   80d4e:	4798      	blx	r3
   80d50:	a806      	add	r0, sp, #24
   80d52:	4b08      	ldr	r3, [pc, #32]	; (80d74 <_ZN9Reporting10reportCodeE8Priority17VisualStateMethodm+0x88>)
   80d54:	4798      	blx	r3
            #endif
        }
    }
}
   80d56:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
   80d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80d5c:	00080cb5 	.word	0x00080cb5
   80d60:	0008045d 	.word	0x0008045d
   80d64:	00081b08 	.word	0x00081b08
   80d68:	000810a5 	.word	0x000810a5
   80d6c:	000804d1 	.word	0x000804d1
   80d70:	000805d9 	.word	0x000805d9
   80d74:	000804b1 	.word	0x000804b1

00080d78 <_ZN9Reporting8InstanceEv>:

    // Make this a singleton
    Reporting(Reporting const&);
    void operator=(Reporting const&);
  public:
    static Reporting &Instance() {
   80d78:	b510      	push	{r4, lr}
        static Reporting instance;
   80d7a:	4c09      	ldr	r4, [pc, #36]	; (80da0 <_ZN9Reporting8InstanceEv+0x28>)
   80d7c:	6823      	ldr	r3, [r4, #0]
   80d7e:	07db      	lsls	r3, r3, #31
   80d80:	d40b      	bmi.n	80d9a <_ZN9Reporting8InstanceEv+0x22>
   80d82:	4620      	mov	r0, r4
   80d84:	4b07      	ldr	r3, [pc, #28]	; (80da4 <_ZN9Reporting8InstanceEv+0x2c>)
   80d86:	4798      	blx	r3
   80d88:	b138      	cbz	r0, 80d9a <_ZN9Reporting8InstanceEv+0x22>
enum Priority { d};

class Reporting {
  private:
    Reporting() {
        srwp = (ShiftRegistersWriteParams*)malloc(sizeof(ShiftRegistersWriteParams));
   80d8a:	4b07      	ldr	r3, [pc, #28]	; (80da8 <_ZN9Reporting8InstanceEv+0x30>)
   80d8c:	2008      	movs	r0, #8
   80d8e:	4798      	blx	r3
   80d90:	4b06      	ldr	r3, [pc, #24]	; (80dac <_ZN9Reporting8InstanceEv+0x34>)
   80d92:	6018      	str	r0, [r3, #0]
    // Make this a singleton
    Reporting(Reporting const&);
    void operator=(Reporting const&);
  public:
    static Reporting &Instance() {
        static Reporting instance;
   80d94:	4620      	mov	r0, r4
   80d96:	4b06      	ldr	r3, [pc, #24]	; (80db0 <_ZN9Reporting8InstanceEv+0x38>)
   80d98:	4798      	blx	r3
        return instance;
    };
   80d9a:	4804      	ldr	r0, [pc, #16]	; (80dac <_ZN9Reporting8InstanceEv+0x34>)
   80d9c:	bd10      	pop	{r4, pc}
   80d9e:	bf00      	nop
   80da0:	200000b0 	.word	0x200000b0
   80da4:	00080e1d 	.word	0x00080e1d
   80da8:	00080e99 	.word	0x00080e99
   80dac:	200000ac 	.word	0x200000ac
   80db0:	00080e39 	.word	0x00080e39

00080db4 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80db4:	b570      	push	{r4, r5, r6, lr}
    /* Initialize the SAM system */
    SystemInit();
   80db6:	4b0f      	ldr	r3, [pc, #60]	; (80df4 <main+0x40>)
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80db8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    /* Initialize the SAM system */
    SystemInit();

    Reporting::Instance().reportCode(d, LIGHTS, 0xDEADBEEF);
   80dbc:	4d0e      	ldr	r5, [pc, #56]	; (80df8 <main+0x44>)
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
    /* Initialize the SAM system */
    SystemInit();
   80dbe:	4798      	blx	r3

    Reporting::Instance().reportCode(d, LIGHTS, 0xDEADBEEF);
   80dc0:	47a8      	blx	r5
   80dc2:	2100      	movs	r1, #0
   80dc4:	460a      	mov	r2, r1
   80dc6:	4b0d      	ldr	r3, [pc, #52]	; (80dfc <main+0x48>)
   80dc8:	4c0d      	ldr	r4, [pc, #52]	; (80e00 <main+0x4c>)
   80dca:	47a0      	blx	r4
    //Reporting::Instance().reportCode(d, LIGHTS, 0x00080008);
    //SSD1305::Instance().open((void*)&ssdp);
    //Reporting::Instance().reportCode(d, LIGHTS, 0xFFFF0000);
    //SSD1305::Instance().write((void*)&ssdp);

    Display disp = Display();
   80dcc:	4b0d      	ldr	r3, [pc, #52]	; (80e04 <main+0x50>)
   80dce:	a802      	add	r0, sp, #8
   80dd0:	4798      	blx	r3
    //Bitmap b = Bitmap(edit_note);
    //disp.drawBitmap(b);
    disp.drawFilledRectangle(0, 0, 31, 31);
   80dd2:	2100      	movs	r1, #0
   80dd4:	231f      	movs	r3, #31
   80dd6:	460a      	mov	r2, r1
   80dd8:	9300      	str	r3, [sp, #0]
   80dda:	a802      	add	r0, sp, #8
   80ddc:	4e0a      	ldr	r6, [pc, #40]	; (80e08 <main+0x54>)
   80dde:	47b0      	blx	r6
    //disp.drawPixel(0, 0);
    //disp.drawPixel(127, 0);
    //disp.drawPixel(127, 31);
    //disp.drawPixel(0, 31);
    //disp.drawText(0, 0, LARGE_FONT, "123456789!");
    disp.paint();
   80de0:	4b0a      	ldr	r3, [pc, #40]	; (80e0c <main+0x58>)
   80de2:	a802      	add	r0, sp, #8
   80de4:	4798      	blx	r3

    Reporting::Instance().reportCode(d, LIGHTS, 0xAAAA5555);
   80de6:	47a8      	blx	r5
   80de8:	2100      	movs	r1, #0
   80dea:	460a      	mov	r2, r1
   80dec:	4b08      	ldr	r3, [pc, #32]	; (80e10 <main+0x5c>)
   80dee:	47a0      	blx	r4
   80df0:	e7fe      	b.n	80df0 <main+0x3c>
   80df2:	bf00      	nop
   80df4:	000801bd 	.word	0x000801bd
   80df8:	00080d79 	.word	0x00080d79
   80dfc:	deadbeef 	.word	0xdeadbeef
   80e00:	00080ced 	.word	0x00080ced
   80e04:	0008045d 	.word	0x0008045d
   80e08:	000805a5 	.word	0x000805a5
   80e0c:	000805d9 	.word	0x000805d9
   80e10:	aaaa5555 	.word	0xaaaa5555

00080e14 <_ZdlPv>:
   80e14:	b108      	cbz	r0, 80e1a <_ZdlPv+0x6>
   80e16:	f000 b847 	b.w	80ea8 <free>
   80e1a:	4770      	bx	lr

00080e1c <__cxa_guard_acquire>:
   80e1c:	b508      	push	{r3, lr}
   80e1e:	6803      	ldr	r3, [r0, #0]
   80e20:	07db      	lsls	r3, r3, #31
   80e22:	d407      	bmi.n	80e34 <__cxa_guard_acquire+0x18>
   80e24:	7843      	ldrb	r3, [r0, #1]
   80e26:	b10b      	cbz	r3, 80e2c <__cxa_guard_acquire+0x10>
   80e28:	f000 f809 	bl	80e3e <abort>
   80e2c:	2301      	movs	r3, #1
   80e2e:	7043      	strb	r3, [r0, #1]
   80e30:	4618      	mov	r0, r3
   80e32:	bd08      	pop	{r3, pc}
   80e34:	2000      	movs	r0, #0
   80e36:	bd08      	pop	{r3, pc}

00080e38 <__cxa_guard_release>:
   80e38:	2301      	movs	r3, #1
   80e3a:	6003      	str	r3, [r0, #0]
   80e3c:	4770      	bx	lr

00080e3e <abort>:
   80e3e:	b508      	push	{r3, lr}
   80e40:	2006      	movs	r0, #6
   80e42:	f000 f913 	bl	8106c <raise>
   80e46:	2001      	movs	r0, #1
   80e48:	f000 fca8 	bl	8179c <_exit>

00080e4c <__libc_init_array>:
   80e4c:	b570      	push	{r4, r5, r6, lr}
   80e4e:	4b0e      	ldr	r3, [pc, #56]	; (80e88 <__libc_init_array+0x3c>)
   80e50:	4d0e      	ldr	r5, [pc, #56]	; (80e8c <__libc_init_array+0x40>)
   80e52:	2400      	movs	r4, #0
   80e54:	1aed      	subs	r5, r5, r3
   80e56:	10ad      	asrs	r5, r5, #2
   80e58:	461e      	mov	r6, r3
   80e5a:	42ac      	cmp	r4, r5
   80e5c:	d004      	beq.n	80e68 <__libc_init_array+0x1c>
   80e5e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   80e62:	4790      	blx	r2
   80e64:	3401      	adds	r4, #1
   80e66:	e7f8      	b.n	80e5a <__libc_init_array+0xe>
   80e68:	f000 fe6c 	bl	81b44 <_init>
   80e6c:	4d08      	ldr	r5, [pc, #32]	; (80e90 <__libc_init_array+0x44>)
   80e6e:	4b09      	ldr	r3, [pc, #36]	; (80e94 <__libc_init_array+0x48>)
   80e70:	2400      	movs	r4, #0
   80e72:	1aed      	subs	r5, r5, r3
   80e74:	10ad      	asrs	r5, r5, #2
   80e76:	461e      	mov	r6, r3
   80e78:	42ac      	cmp	r4, r5
   80e7a:	d004      	beq.n	80e86 <__libc_init_array+0x3a>
   80e7c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   80e80:	4790      	blx	r2
   80e82:	3401      	adds	r4, #1
   80e84:	e7f8      	b.n	80e78 <__libc_init_array+0x2c>
   80e86:	bd70      	pop	{r4, r5, r6, pc}
   80e88:	00081b50 	.word	0x00081b50
   80e8c:	00081b50 	.word	0x00081b50
   80e90:	00081b54 	.word	0x00081b54
   80e94:	00081b50 	.word	0x00081b50

00080e98 <malloc>:
   80e98:	4b02      	ldr	r3, [pc, #8]	; (80ea4 <malloc+0xc>)
   80e9a:	4601      	mov	r1, r0
   80e9c:	6818      	ldr	r0, [r3, #0]
   80e9e:	f000 b859 	b.w	80f54 <_malloc_r>
   80ea2:	bf00      	nop
   80ea4:	20000064 	.word	0x20000064

00080ea8 <free>:
   80ea8:	4b02      	ldr	r3, [pc, #8]	; (80eb4 <free+0xc>)
   80eaa:	4601      	mov	r1, r0
   80eac:	6818      	ldr	r0, [r3, #0]
   80eae:	f000 b80d 	b.w	80ecc <_free_r>
   80eb2:	bf00      	nop
   80eb4:	20000064 	.word	0x20000064

00080eb8 <memcpy>:
   80eb8:	b510      	push	{r4, lr}
   80eba:	2300      	movs	r3, #0
   80ebc:	4293      	cmp	r3, r2
   80ebe:	d003      	beq.n	80ec8 <memcpy+0x10>
   80ec0:	5ccc      	ldrb	r4, [r1, r3]
   80ec2:	54c4      	strb	r4, [r0, r3]
   80ec4:	3301      	adds	r3, #1
   80ec6:	e7f9      	b.n	80ebc <memcpy+0x4>
   80ec8:	bd10      	pop	{r4, pc}
	...

00080ecc <_free_r>:
   80ecc:	b530      	push	{r4, r5, lr}
   80ece:	2900      	cmp	r1, #0
   80ed0:	d03c      	beq.n	80f4c <_free_r+0x80>
   80ed2:	f851 2c04 	ldr.w	r2, [r1, #-4]
   80ed6:	1f0b      	subs	r3, r1, #4
   80ed8:	491d      	ldr	r1, [pc, #116]	; (80f50 <_free_r+0x84>)
   80eda:	2a00      	cmp	r2, #0
   80edc:	bfb8      	it	lt
   80ede:	189b      	addlt	r3, r3, r2
   80ee0:	680a      	ldr	r2, [r1, #0]
   80ee2:	460c      	mov	r4, r1
   80ee4:	b912      	cbnz	r2, 80eec <_free_r+0x20>
   80ee6:	605a      	str	r2, [r3, #4]
   80ee8:	600b      	str	r3, [r1, #0]
   80eea:	bd30      	pop	{r4, r5, pc}
   80eec:	4293      	cmp	r3, r2
   80eee:	d20d      	bcs.n	80f0c <_free_r+0x40>
   80ef0:	6819      	ldr	r1, [r3, #0]
   80ef2:	1858      	adds	r0, r3, r1
   80ef4:	4290      	cmp	r0, r2
   80ef6:	d103      	bne.n	80f00 <_free_r+0x34>
   80ef8:	585a      	ldr	r2, [r3, r1]
   80efa:	4411      	add	r1, r2
   80efc:	6842      	ldr	r2, [r0, #4]
   80efe:	6019      	str	r1, [r3, #0]
   80f00:	605a      	str	r2, [r3, #4]
   80f02:	6023      	str	r3, [r4, #0]
   80f04:	bd30      	pop	{r4, r5, pc}
   80f06:	4299      	cmp	r1, r3
   80f08:	d803      	bhi.n	80f12 <_free_r+0x46>
   80f0a:	460a      	mov	r2, r1
   80f0c:	6851      	ldr	r1, [r2, #4]
   80f0e:	2900      	cmp	r1, #0
   80f10:	d1f9      	bne.n	80f06 <_free_r+0x3a>
   80f12:	6814      	ldr	r4, [r2, #0]
   80f14:	1915      	adds	r5, r2, r4
   80f16:	429d      	cmp	r5, r3
   80f18:	d10a      	bne.n	80f30 <_free_r+0x64>
   80f1a:	681b      	ldr	r3, [r3, #0]
   80f1c:	4423      	add	r3, r4
   80f1e:	18d0      	adds	r0, r2, r3
   80f20:	4288      	cmp	r0, r1
   80f22:	6013      	str	r3, [r2, #0]
   80f24:	d112      	bne.n	80f4c <_free_r+0x80>
   80f26:	6808      	ldr	r0, [r1, #0]
   80f28:	4403      	add	r3, r0
   80f2a:	6013      	str	r3, [r2, #0]
   80f2c:	684b      	ldr	r3, [r1, #4]
   80f2e:	e00c      	b.n	80f4a <_free_r+0x7e>
   80f30:	d902      	bls.n	80f38 <_free_r+0x6c>
   80f32:	230c      	movs	r3, #12
   80f34:	6003      	str	r3, [r0, #0]
   80f36:	bd30      	pop	{r4, r5, pc}
   80f38:	6818      	ldr	r0, [r3, #0]
   80f3a:	181c      	adds	r4, r3, r0
   80f3c:	428c      	cmp	r4, r1
   80f3e:	d103      	bne.n	80f48 <_free_r+0x7c>
   80f40:	680c      	ldr	r4, [r1, #0]
   80f42:	6849      	ldr	r1, [r1, #4]
   80f44:	4420      	add	r0, r4
   80f46:	6018      	str	r0, [r3, #0]
   80f48:	6059      	str	r1, [r3, #4]
   80f4a:	6053      	str	r3, [r2, #4]
   80f4c:	bd30      	pop	{r4, r5, pc}
   80f4e:	bf00      	nop
   80f50:	200000b8 	.word	0x200000b8

00080f54 <_malloc_r>:
   80f54:	b570      	push	{r4, r5, r6, lr}
   80f56:	1ccd      	adds	r5, r1, #3
   80f58:	f025 0503 	bic.w	r5, r5, #3
   80f5c:	3508      	adds	r5, #8
   80f5e:	2d0c      	cmp	r5, #12
   80f60:	bf38      	it	cc
   80f62:	250c      	movcc	r5, #12
   80f64:	2d00      	cmp	r5, #0
   80f66:	4606      	mov	r6, r0
   80f68:	db3f      	blt.n	80fea <_malloc_r+0x96>
   80f6a:	428d      	cmp	r5, r1
   80f6c:	d33d      	bcc.n	80fea <_malloc_r+0x96>
   80f6e:	4b21      	ldr	r3, [pc, #132]	; (80ff4 <_malloc_r+0xa0>)
   80f70:	681c      	ldr	r4, [r3, #0]
   80f72:	4618      	mov	r0, r3
   80f74:	4621      	mov	r1, r4
   80f76:	b1a1      	cbz	r1, 80fa2 <_malloc_r+0x4e>
   80f78:	680b      	ldr	r3, [r1, #0]
   80f7a:	1b5b      	subs	r3, r3, r5
   80f7c:	d40e      	bmi.n	80f9c <_malloc_r+0x48>
   80f7e:	2b0b      	cmp	r3, #11
   80f80:	d903      	bls.n	80f8a <_malloc_r+0x36>
   80f82:	600b      	str	r3, [r1, #0]
   80f84:	18cc      	adds	r4, r1, r3
   80f86:	50cd      	str	r5, [r1, r3]
   80f88:	e01f      	b.n	80fca <_malloc_r+0x76>
   80f8a:	428c      	cmp	r4, r1
   80f8c:	d102      	bne.n	80f94 <_malloc_r+0x40>
   80f8e:	6862      	ldr	r2, [r4, #4]
   80f90:	6002      	str	r2, [r0, #0]
   80f92:	e01a      	b.n	80fca <_malloc_r+0x76>
   80f94:	684b      	ldr	r3, [r1, #4]
   80f96:	6063      	str	r3, [r4, #4]
   80f98:	460c      	mov	r4, r1
   80f9a:	e016      	b.n	80fca <_malloc_r+0x76>
   80f9c:	460c      	mov	r4, r1
   80f9e:	6849      	ldr	r1, [r1, #4]
   80fa0:	e7e9      	b.n	80f76 <_malloc_r+0x22>
   80fa2:	4c15      	ldr	r4, [pc, #84]	; (80ff8 <_malloc_r+0xa4>)
   80fa4:	6823      	ldr	r3, [r4, #0]
   80fa6:	b91b      	cbnz	r3, 80fb0 <_malloc_r+0x5c>
   80fa8:	4630      	mov	r0, r6
   80faa:	f000 f827 	bl	80ffc <_sbrk_r>
   80fae:	6020      	str	r0, [r4, #0]
   80fb0:	4629      	mov	r1, r5
   80fb2:	4630      	mov	r0, r6
   80fb4:	f000 f822 	bl	80ffc <_sbrk_r>
   80fb8:	1c43      	adds	r3, r0, #1
   80fba:	4601      	mov	r1, r0
   80fbc:	d015      	beq.n	80fea <_malloc_r+0x96>
   80fbe:	1cc4      	adds	r4, r0, #3
   80fc0:	f024 0403 	bic.w	r4, r4, #3
   80fc4:	4284      	cmp	r4, r0
   80fc6:	d10a      	bne.n	80fde <_malloc_r+0x8a>
   80fc8:	6025      	str	r5, [r4, #0]
   80fca:	f104 000b 	add.w	r0, r4, #11
   80fce:	1d23      	adds	r3, r4, #4
   80fd0:	f020 0007 	bic.w	r0, r0, #7
   80fd4:	1ac3      	subs	r3, r0, r3
   80fd6:	d00b      	beq.n	80ff0 <_malloc_r+0x9c>
   80fd8:	425a      	negs	r2, r3
   80fda:	50e2      	str	r2, [r4, r3]
   80fdc:	bd70      	pop	{r4, r5, r6, pc}
   80fde:	4630      	mov	r0, r6
   80fe0:	1a61      	subs	r1, r4, r1
   80fe2:	f000 f80b 	bl	80ffc <_sbrk_r>
   80fe6:	3001      	adds	r0, #1
   80fe8:	d1ee      	bne.n	80fc8 <_malloc_r+0x74>
   80fea:	230c      	movs	r3, #12
   80fec:	6033      	str	r3, [r6, #0]
   80fee:	2000      	movs	r0, #0
   80ff0:	bd70      	pop	{r4, r5, r6, pc}
   80ff2:	bf00      	nop
   80ff4:	200000b8 	.word	0x200000b8
   80ff8:	200000b4 	.word	0x200000b4

00080ffc <_sbrk_r>:
   80ffc:	b538      	push	{r3, r4, r5, lr}
   80ffe:	4c06      	ldr	r4, [pc, #24]	; (81018 <_sbrk_r+0x1c>)
   81000:	2300      	movs	r3, #0
   81002:	4605      	mov	r5, r0
   81004:	4608      	mov	r0, r1
   81006:	6023      	str	r3, [r4, #0]
   81008:	f000 fbae 	bl	81768 <_sbrk>
   8100c:	1c43      	adds	r3, r0, #1
   8100e:	d102      	bne.n	81016 <_sbrk_r+0x1a>
   81010:	6823      	ldr	r3, [r4, #0]
   81012:	b103      	cbz	r3, 81016 <_sbrk_r+0x1a>
   81014:	602b      	str	r3, [r5, #0]
   81016:	bd38      	pop	{r3, r4, r5, pc}
   81018:	200000c0 	.word	0x200000c0

0008101c <_raise_r>:
   8101c:	291f      	cmp	r1, #31
   8101e:	b538      	push	{r3, r4, r5, lr}
   81020:	4605      	mov	r5, r0
   81022:	460c      	mov	r4, r1
   81024:	d904      	bls.n	81030 <_raise_r+0x14>
   81026:	2316      	movs	r3, #22
   81028:	6003      	str	r3, [r0, #0]
   8102a:	f04f 30ff 	mov.w	r0, #4294967295
   8102e:	bd38      	pop	{r3, r4, r5, pc}
   81030:	6c42      	ldr	r2, [r0, #68]	; 0x44
   81032:	b112      	cbz	r2, 8103a <_raise_r+0x1e>
   81034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   81038:	b94b      	cbnz	r3, 8104e <_raise_r+0x32>
   8103a:	4628      	mov	r0, r5
   8103c:	f000 f830 	bl	810a0 <_getpid_r>
   81040:	4622      	mov	r2, r4
   81042:	4601      	mov	r1, r0
   81044:	4628      	mov	r0, r5
   81046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8104a:	f000 b817 	b.w	8107c <_kill_r>
   8104e:	2b01      	cmp	r3, #1
   81050:	d00a      	beq.n	81068 <_raise_r+0x4c>
   81052:	1c59      	adds	r1, r3, #1
   81054:	d103      	bne.n	8105e <_raise_r+0x42>
   81056:	2316      	movs	r3, #22
   81058:	6003      	str	r3, [r0, #0]
   8105a:	2001      	movs	r0, #1
   8105c:	bd38      	pop	{r3, r4, r5, pc}
   8105e:	2500      	movs	r5, #0
   81060:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   81064:	4620      	mov	r0, r4
   81066:	4798      	blx	r3
   81068:	2000      	movs	r0, #0
   8106a:	bd38      	pop	{r3, r4, r5, pc}

0008106c <raise>:
   8106c:	4b02      	ldr	r3, [pc, #8]	; (81078 <raise+0xc>)
   8106e:	4601      	mov	r1, r0
   81070:	6818      	ldr	r0, [r3, #0]
   81072:	f7ff bfd3 	b.w	8101c <_raise_r>
   81076:	bf00      	nop
   81078:	20000064 	.word	0x20000064

0008107c <_kill_r>:
   8107c:	b538      	push	{r3, r4, r5, lr}
   8107e:	4c07      	ldr	r4, [pc, #28]	; (8109c <_kill_r+0x20>)
   81080:	2300      	movs	r3, #0
   81082:	4605      	mov	r5, r0
   81084:	4608      	mov	r0, r1
   81086:	4611      	mov	r1, r2
   81088:	6023      	str	r3, [r4, #0]
   8108a:	f000 fb65 	bl	81758 <_kill>
   8108e:	1c43      	adds	r3, r0, #1
   81090:	d102      	bne.n	81098 <_kill_r+0x1c>
   81092:	6823      	ldr	r3, [r4, #0]
   81094:	b103      	cbz	r3, 81098 <_kill_r+0x1c>
   81096:	602b      	str	r3, [r5, #0]
   81098:	bd38      	pop	{r3, r4, r5, pc}
   8109a:	bf00      	nop
   8109c:	200000c0 	.word	0x200000c0

000810a0 <_getpid_r>:
   810a0:	f000 bb52 	b.w	81748 <_getpid>

000810a4 <siprintf>:
   810a4:	b40e      	push	{r1, r2, r3}
   810a6:	b500      	push	{lr}
   810a8:	f44f 7102 	mov.w	r1, #520	; 0x208
   810ac:	b09c      	sub	sp, #112	; 0x70
   810ae:	f8ad 1014 	strh.w	r1, [sp, #20]
   810b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   810b6:	9104      	str	r1, [sp, #16]
   810b8:	9107      	str	r1, [sp, #28]
   810ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   810be:	ab1d      	add	r3, sp, #116	; 0x74
   810c0:	f8ad 1016 	strh.w	r1, [sp, #22]
   810c4:	4908      	ldr	r1, [pc, #32]	; (810e8 <siprintf+0x44>)
   810c6:	f853 2b04 	ldr.w	r2, [r3], #4
   810ca:	9002      	str	r0, [sp, #8]
   810cc:	9006      	str	r0, [sp, #24]
   810ce:	6808      	ldr	r0, [r1, #0]
   810d0:	a902      	add	r1, sp, #8
   810d2:	9301      	str	r3, [sp, #4]
   810d4:	f000 f866 	bl	811a4 <_svfiprintf_r>
   810d8:	9b02      	ldr	r3, [sp, #8]
   810da:	2200      	movs	r2, #0
   810dc:	701a      	strb	r2, [r3, #0]
   810de:	b01c      	add	sp, #112	; 0x70
   810e0:	f85d eb04 	ldr.w	lr, [sp], #4
   810e4:	b003      	add	sp, #12
   810e6:	4770      	bx	lr
   810e8:	20000064 	.word	0x20000064

000810ec <__ssputs_r>:
   810ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   810f0:	688d      	ldr	r5, [r1, #8]
   810f2:	4681      	mov	r9, r0
   810f4:	42ab      	cmp	r3, r5
   810f6:	460c      	mov	r4, r1
   810f8:	4692      	mov	sl, r2
   810fa:	461f      	mov	r7, r3
   810fc:	d343      	bcc.n	81186 <__ssputs_r+0x9a>
   810fe:	898b      	ldrh	r3, [r1, #12]
   81100:	f413 6f90 	tst.w	r3, #1152	; 0x480
   81104:	d03d      	beq.n	81182 <__ssputs_r+0x96>
   81106:	6826      	ldr	r6, [r4, #0]
   81108:	6909      	ldr	r1, [r1, #16]
   8110a:	2202      	movs	r2, #2
   8110c:	ebc1 0806 	rsb	r8, r1, r6
   81110:	6966      	ldr	r6, [r4, #20]
   81112:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   81116:	fb96 f6f2 	sdiv	r6, r6, r2
   8111a:	f108 0201 	add.w	r2, r8, #1
   8111e:	443a      	add	r2, r7
   81120:	4296      	cmp	r6, r2
   81122:	bf38      	it	cc
   81124:	4616      	movcc	r6, r2
   81126:	055b      	lsls	r3, r3, #21
   81128:	d50f      	bpl.n	8114a <__ssputs_r+0x5e>
   8112a:	4631      	mov	r1, r6
   8112c:	f7ff ff12 	bl	80f54 <_malloc_r>
   81130:	4605      	mov	r5, r0
   81132:	b198      	cbz	r0, 8115c <__ssputs_r+0x70>
   81134:	6921      	ldr	r1, [r4, #16]
   81136:	4642      	mov	r2, r8
   81138:	f7ff febe 	bl	80eb8 <memcpy>
   8113c:	89a3      	ldrh	r3, [r4, #12]
   8113e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   81142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81146:	81a3      	strh	r3, [r4, #12]
   81148:	e013      	b.n	81172 <__ssputs_r+0x86>
   8114a:	4632      	mov	r2, r6
   8114c:	f000 fac5 	bl	816da <_realloc_r>
   81150:	4605      	mov	r5, r0
   81152:	b970      	cbnz	r0, 81172 <__ssputs_r+0x86>
   81154:	4648      	mov	r0, r9
   81156:	6921      	ldr	r1, [r4, #16]
   81158:	f7ff feb8 	bl	80ecc <_free_r>
   8115c:	230c      	movs	r3, #12
   8115e:	f8c9 3000 	str.w	r3, [r9]
   81162:	89a3      	ldrh	r3, [r4, #12]
   81164:	f04f 30ff 	mov.w	r0, #4294967295
   81168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8116c:	81a3      	strh	r3, [r4, #12]
   8116e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81172:	6125      	str	r5, [r4, #16]
   81174:	6166      	str	r6, [r4, #20]
   81176:	4445      	add	r5, r8
   81178:	ebc8 0606 	rsb	r6, r8, r6
   8117c:	6025      	str	r5, [r4, #0]
   8117e:	60a6      	str	r6, [r4, #8]
   81180:	463d      	mov	r5, r7
   81182:	42af      	cmp	r7, r5
   81184:	d200      	bcs.n	81188 <__ssputs_r+0x9c>
   81186:	463d      	mov	r5, r7
   81188:	462a      	mov	r2, r5
   8118a:	6820      	ldr	r0, [r4, #0]
   8118c:	4651      	mov	r1, sl
   8118e:	f000 fa89 	bl	816a4 <memmove>
   81192:	68a3      	ldr	r3, [r4, #8]
   81194:	2000      	movs	r0, #0
   81196:	1b5b      	subs	r3, r3, r5
   81198:	60a3      	str	r3, [r4, #8]
   8119a:	6823      	ldr	r3, [r4, #0]
   8119c:	441d      	add	r5, r3
   8119e:	6025      	str	r5, [r4, #0]
   811a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000811a4 <_svfiprintf_r>:
   811a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   811a8:	b09d      	sub	sp, #116	; 0x74
   811aa:	9303      	str	r3, [sp, #12]
   811ac:	898b      	ldrh	r3, [r1, #12]
   811ae:	4607      	mov	r7, r0
   811b0:	061c      	lsls	r4, r3, #24
   811b2:	460d      	mov	r5, r1
   811b4:	4616      	mov	r6, r2
   811b6:	d50c      	bpl.n	811d2 <_svfiprintf_r+0x2e>
   811b8:	690b      	ldr	r3, [r1, #16]
   811ba:	b953      	cbnz	r3, 811d2 <_svfiprintf_r+0x2e>
   811bc:	2140      	movs	r1, #64	; 0x40
   811be:	f7ff fec9 	bl	80f54 <_malloc_r>
   811c2:	6028      	str	r0, [r5, #0]
   811c4:	6128      	str	r0, [r5, #16]
   811c6:	b910      	cbnz	r0, 811ce <_svfiprintf_r+0x2a>
   811c8:	230c      	movs	r3, #12
   811ca:	603b      	str	r3, [r7, #0]
   811cc:	e0c7      	b.n	8135e <_svfiprintf_r+0x1ba>
   811ce:	2340      	movs	r3, #64	; 0x40
   811d0:	616b      	str	r3, [r5, #20]
   811d2:	2300      	movs	r3, #0
   811d4:	9309      	str	r3, [sp, #36]	; 0x24
   811d6:	2320      	movs	r3, #32
   811d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   811dc:	2330      	movs	r3, #48	; 0x30
   811de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   811e2:	4633      	mov	r3, r6
   811e4:	461c      	mov	r4, r3
   811e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   811ea:	b91a      	cbnz	r2, 811f4 <_svfiprintf_r+0x50>
   811ec:	ebb4 0906 	subs.w	r9, r4, r6
   811f0:	d00f      	beq.n	81212 <_svfiprintf_r+0x6e>
   811f2:	e002      	b.n	811fa <_svfiprintf_r+0x56>
   811f4:	2a25      	cmp	r2, #37	; 0x25
   811f6:	d1f5      	bne.n	811e4 <_svfiprintf_r+0x40>
   811f8:	e7f8      	b.n	811ec <_svfiprintf_r+0x48>
   811fa:	4638      	mov	r0, r7
   811fc:	4629      	mov	r1, r5
   811fe:	4632      	mov	r2, r6
   81200:	464b      	mov	r3, r9
   81202:	f7ff ff73 	bl	810ec <__ssputs_r>
   81206:	3001      	adds	r0, #1
   81208:	f000 80a4 	beq.w	81354 <_svfiprintf_r+0x1b0>
   8120c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8120e:	444b      	add	r3, r9
   81210:	9309      	str	r3, [sp, #36]	; 0x24
   81212:	7823      	ldrb	r3, [r4, #0]
   81214:	2b00      	cmp	r3, #0
   81216:	f000 809d 	beq.w	81354 <_svfiprintf_r+0x1b0>
   8121a:	2300      	movs	r3, #0
   8121c:	f04f 32ff 	mov.w	r2, #4294967295
   81220:	9304      	str	r3, [sp, #16]
   81222:	9307      	str	r3, [sp, #28]
   81224:	9205      	str	r2, [sp, #20]
   81226:	9306      	str	r3, [sp, #24]
   81228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   8122c:	931a      	str	r3, [sp, #104]	; 0x68
   8122e:	f104 0901 	add.w	r9, r4, #1
   81232:	4e4d      	ldr	r6, [pc, #308]	; (81368 <_svfiprintf_r+0x1c4>)
   81234:	464c      	mov	r4, r9
   81236:	4630      	mov	r0, r6
   81238:	7821      	ldrb	r1, [r4, #0]
   8123a:	2205      	movs	r2, #5
   8123c:	f000 fa24 	bl	81688 <memchr>
   81240:	f109 0901 	add.w	r9, r9, #1
   81244:	9b04      	ldr	r3, [sp, #16]
   81246:	b128      	cbz	r0, 81254 <_svfiprintf_r+0xb0>
   81248:	1b86      	subs	r6, r0, r6
   8124a:	2001      	movs	r0, #1
   8124c:	40b0      	lsls	r0, r6
   8124e:	4303      	orrs	r3, r0
   81250:	9304      	str	r3, [sp, #16]
   81252:	e7ee      	b.n	81232 <_svfiprintf_r+0x8e>
   81254:	06d9      	lsls	r1, r3, #27
   81256:	bf44      	itt	mi
   81258:	2220      	movmi	r2, #32
   8125a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   8125e:	071a      	lsls	r2, r3, #28
   81260:	bf44      	itt	mi
   81262:	222b      	movmi	r2, #43	; 0x2b
   81264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   81268:	7822      	ldrb	r2, [r4, #0]
   8126a:	2a2a      	cmp	r2, #42	; 0x2a
   8126c:	d002      	beq.n	81274 <_svfiprintf_r+0xd0>
   8126e:	9b07      	ldr	r3, [sp, #28]
   81270:	4621      	mov	r1, r4
   81272:	e00e      	b.n	81292 <_svfiprintf_r+0xee>
   81274:	9a03      	ldr	r2, [sp, #12]
   81276:	1d11      	adds	r1, r2, #4
   81278:	6812      	ldr	r2, [r2, #0]
   8127a:	9103      	str	r1, [sp, #12]
   8127c:	2a00      	cmp	r2, #0
   8127e:	db01      	blt.n	81284 <_svfiprintf_r+0xe0>
   81280:	9207      	str	r2, [sp, #28]
   81282:	e004      	b.n	8128e <_svfiprintf_r+0xea>
   81284:	4252      	negs	r2, r2
   81286:	f043 0302 	orr.w	r3, r3, #2
   8128a:	9207      	str	r2, [sp, #28]
   8128c:	9304      	str	r3, [sp, #16]
   8128e:	3401      	adds	r4, #1
   81290:	e00a      	b.n	812a8 <_svfiprintf_r+0x104>
   81292:	460c      	mov	r4, r1
   81294:	7822      	ldrb	r2, [r4, #0]
   81296:	3101      	adds	r1, #1
   81298:	3a30      	subs	r2, #48	; 0x30
   8129a:	2a09      	cmp	r2, #9
   8129c:	d803      	bhi.n	812a6 <_svfiprintf_r+0x102>
   8129e:	200a      	movs	r0, #10
   812a0:	fb00 2303 	mla	r3, r0, r3, r2
   812a4:	e7f5      	b.n	81292 <_svfiprintf_r+0xee>
   812a6:	9307      	str	r3, [sp, #28]
   812a8:	7823      	ldrb	r3, [r4, #0]
   812aa:	2b2e      	cmp	r3, #46	; 0x2e
   812ac:	d119      	bne.n	812e2 <_svfiprintf_r+0x13e>
   812ae:	7863      	ldrb	r3, [r4, #1]
   812b0:	2b2a      	cmp	r3, #42	; 0x2a
   812b2:	d109      	bne.n	812c8 <_svfiprintf_r+0x124>
   812b4:	9b03      	ldr	r3, [sp, #12]
   812b6:	3402      	adds	r4, #2
   812b8:	1d1a      	adds	r2, r3, #4
   812ba:	681b      	ldr	r3, [r3, #0]
   812bc:	9203      	str	r2, [sp, #12]
   812be:	2b00      	cmp	r3, #0
   812c0:	bfb8      	it	lt
   812c2:	f04f 33ff 	movlt.w	r3, #4294967295
   812c6:	e00b      	b.n	812e0 <_svfiprintf_r+0x13c>
   812c8:	1c61      	adds	r1, r4, #1
   812ca:	2300      	movs	r3, #0
   812cc:	460c      	mov	r4, r1
   812ce:	7822      	ldrb	r2, [r4, #0]
   812d0:	3101      	adds	r1, #1
   812d2:	3a30      	subs	r2, #48	; 0x30
   812d4:	2a09      	cmp	r2, #9
   812d6:	d803      	bhi.n	812e0 <_svfiprintf_r+0x13c>
   812d8:	200a      	movs	r0, #10
   812da:	fb00 2303 	mla	r3, r0, r3, r2
   812de:	e7f5      	b.n	812cc <_svfiprintf_r+0x128>
   812e0:	9305      	str	r3, [sp, #20]
   812e2:	4e22      	ldr	r6, [pc, #136]	; (8136c <_svfiprintf_r+0x1c8>)
   812e4:	7821      	ldrb	r1, [r4, #0]
   812e6:	4630      	mov	r0, r6
   812e8:	2203      	movs	r2, #3
   812ea:	f000 f9cd 	bl	81688 <memchr>
   812ee:	b130      	cbz	r0, 812fe <_svfiprintf_r+0x15a>
   812f0:	1b86      	subs	r6, r0, r6
   812f2:	2040      	movs	r0, #64	; 0x40
   812f4:	40b0      	lsls	r0, r6
   812f6:	9b04      	ldr	r3, [sp, #16]
   812f8:	3401      	adds	r4, #1
   812fa:	4303      	orrs	r3, r0
   812fc:	9304      	str	r3, [sp, #16]
   812fe:	7821      	ldrb	r1, [r4, #0]
   81300:	481b      	ldr	r0, [pc, #108]	; (81370 <_svfiprintf_r+0x1cc>)
   81302:	2206      	movs	r2, #6
   81304:	1c66      	adds	r6, r4, #1
   81306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   8130a:	f000 f9bd 	bl	81688 <memchr>
   8130e:	b188      	cbz	r0, 81334 <_svfiprintf_r+0x190>
   81310:	4b18      	ldr	r3, [pc, #96]	; (81374 <_svfiprintf_r+0x1d0>)
   81312:	b933      	cbnz	r3, 81322 <_svfiprintf_r+0x17e>
   81314:	9b03      	ldr	r3, [sp, #12]
   81316:	3307      	adds	r3, #7
   81318:	f023 0307 	bic.w	r3, r3, #7
   8131c:	3308      	adds	r3, #8
   8131e:	9303      	str	r3, [sp, #12]
   81320:	e014      	b.n	8134c <_svfiprintf_r+0x1a8>
   81322:	ab03      	add	r3, sp, #12
   81324:	9300      	str	r3, [sp, #0]
   81326:	4638      	mov	r0, r7
   81328:	a904      	add	r1, sp, #16
   8132a:	462a      	mov	r2, r5
   8132c:	4b12      	ldr	r3, [pc, #72]	; (81378 <_svfiprintf_r+0x1d4>)
   8132e:	f3af 8000 	nop.w
   81332:	e007      	b.n	81344 <_svfiprintf_r+0x1a0>
   81334:	ab03      	add	r3, sp, #12
   81336:	9300      	str	r3, [sp, #0]
   81338:	4638      	mov	r0, r7
   8133a:	a904      	add	r1, sp, #16
   8133c:	462a      	mov	r2, r5
   8133e:	4b0e      	ldr	r3, [pc, #56]	; (81378 <_svfiprintf_r+0x1d4>)
   81340:	f000 f88e 	bl	81460 <_printf_i>
   81344:	f1b0 3fff 	cmp.w	r0, #4294967295
   81348:	4680      	mov	r8, r0
   8134a:	d003      	beq.n	81354 <_svfiprintf_r+0x1b0>
   8134c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8134e:	4443      	add	r3, r8
   81350:	9309      	str	r3, [sp, #36]	; 0x24
   81352:	e746      	b.n	811e2 <_svfiprintf_r+0x3e>
   81354:	89ab      	ldrh	r3, [r5, #12]
   81356:	065b      	lsls	r3, r3, #25
   81358:	d401      	bmi.n	8135e <_svfiprintf_r+0x1ba>
   8135a:	9809      	ldr	r0, [sp, #36]	; 0x24
   8135c:	e001      	b.n	81362 <_svfiprintf_r+0x1be>
   8135e:	f04f 30ff 	mov.w	r0, #4294967295
   81362:	b01d      	add	sp, #116	; 0x74
   81364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81368:	00081b0f 	.word	0x00081b0f
   8136c:	00081b15 	.word	0x00081b15
   81370:	00081b19 	.word	0x00081b19
   81374:	00000000 	.word	0x00000000
   81378:	000810ed 	.word	0x000810ed

0008137c <_printf_common>:
   8137c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81380:	4615      	mov	r5, r2
   81382:	461f      	mov	r7, r3
   81384:	688a      	ldr	r2, [r1, #8]
   81386:	690b      	ldr	r3, [r1, #16]
   81388:	4606      	mov	r6, r0
   8138a:	429a      	cmp	r2, r3
   8138c:	bfa8      	it	ge
   8138e:	4613      	movge	r3, r2
   81390:	602b      	str	r3, [r5, #0]
   81392:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   81396:	460c      	mov	r4, r1
   81398:	f8dd 8020 	ldr.w	r8, [sp, #32]
   8139c:	b10a      	cbz	r2, 813a2 <_printf_common+0x26>
   8139e:	3301      	adds	r3, #1
   813a0:	602b      	str	r3, [r5, #0]
   813a2:	6823      	ldr	r3, [r4, #0]
   813a4:	0699      	lsls	r1, r3, #26
   813a6:	d502      	bpl.n	813ae <_printf_common+0x32>
   813a8:	682b      	ldr	r3, [r5, #0]
   813aa:	3302      	adds	r3, #2
   813ac:	602b      	str	r3, [r5, #0]
   813ae:	6823      	ldr	r3, [r4, #0]
   813b0:	f013 0906 	ands.w	r9, r3, #6
   813b4:	d01d      	beq.n	813f2 <_printf_common+0x76>
   813b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   813ba:	6822      	ldr	r2, [r4, #0]
   813bc:	3300      	adds	r3, #0
   813be:	bf18      	it	ne
   813c0:	2301      	movne	r3, #1
   813c2:	0692      	lsls	r2, r2, #26
   813c4:	d51f      	bpl.n	81406 <_printf_common+0x8a>
   813c6:	18e1      	adds	r1, r4, r3
   813c8:	2030      	movs	r0, #48	; 0x30
   813ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   813ce:	1c5a      	adds	r2, r3, #1
   813d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   813d4:	4422      	add	r2, r4
   813d6:	3302      	adds	r3, #2
   813d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   813dc:	e013      	b.n	81406 <_printf_common+0x8a>
   813de:	4630      	mov	r0, r6
   813e0:	4639      	mov	r1, r7
   813e2:	f104 0219 	add.w	r2, r4, #25
   813e6:	2301      	movs	r3, #1
   813e8:	47c0      	blx	r8
   813ea:	3001      	adds	r0, #1
   813ec:	d007      	beq.n	813fe <_printf_common+0x82>
   813ee:	f109 0901 	add.w	r9, r9, #1
   813f2:	68e2      	ldr	r2, [r4, #12]
   813f4:	682b      	ldr	r3, [r5, #0]
   813f6:	1ad3      	subs	r3, r2, r3
   813f8:	4599      	cmp	r9, r3
   813fa:	dbf0      	blt.n	813de <_printf_common+0x62>
   813fc:	e7db      	b.n	813b6 <_printf_common+0x3a>
   813fe:	f04f 30ff 	mov.w	r0, #4294967295
   81402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81406:	4630      	mov	r0, r6
   81408:	4639      	mov	r1, r7
   8140a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8140e:	47c0      	blx	r8
   81410:	3001      	adds	r0, #1
   81412:	d0f4      	beq.n	813fe <_printf_common+0x82>
   81414:	6823      	ldr	r3, [r4, #0]
   81416:	682a      	ldr	r2, [r5, #0]
   81418:	f003 0306 	and.w	r3, r3, #6
   8141c:	68e1      	ldr	r1, [r4, #12]
   8141e:	2b04      	cmp	r3, #4
   81420:	bf08      	it	eq
   81422:	ebc2 0501 	rsbeq	r5, r2, r1
   81426:	6923      	ldr	r3, [r4, #16]
   81428:	68a2      	ldr	r2, [r4, #8]
   8142a:	bf0c      	ite	eq
   8142c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   81430:	2500      	movne	r5, #0
   81432:	429a      	cmp	r2, r3
   81434:	bfc4      	itt	gt
   81436:	ebc3 0302 	rsbgt	r3, r3, r2
   8143a:	18ed      	addgt	r5, r5, r3
   8143c:	f04f 0900 	mov.w	r9, #0
   81440:	45a9      	cmp	r9, r5
   81442:	da0a      	bge.n	8145a <_printf_common+0xde>
   81444:	4630      	mov	r0, r6
   81446:	4639      	mov	r1, r7
   81448:	f104 021a 	add.w	r2, r4, #26
   8144c:	2301      	movs	r3, #1
   8144e:	47c0      	blx	r8
   81450:	3001      	adds	r0, #1
   81452:	d0d4      	beq.n	813fe <_printf_common+0x82>
   81454:	f109 0901 	add.w	r9, r9, #1
   81458:	e7f2      	b.n	81440 <_printf_common+0xc4>
   8145a:	2000      	movs	r0, #0
   8145c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081460 <_printf_i>:
   81460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   81464:	7e0e      	ldrb	r6, [r1, #24]
   81466:	4680      	mov	r8, r0
   81468:	2e6e      	cmp	r6, #110	; 0x6e
   8146a:	460c      	mov	r4, r1
   8146c:	4691      	mov	r9, r2
   8146e:	469a      	mov	sl, r3
   81470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   81472:	f101 0043 	add.w	r0, r1, #67	; 0x43
   81476:	f000 80a5 	beq.w	815c4 <_printf_i+0x164>
   8147a:	d811      	bhi.n	814a0 <_printf_i+0x40>
   8147c:	2e63      	cmp	r6, #99	; 0x63
   8147e:	d022      	beq.n	814c6 <_printf_i+0x66>
   81480:	d809      	bhi.n	81496 <_printf_i+0x36>
   81482:	2e00      	cmp	r6, #0
   81484:	f000 80af 	beq.w	815e6 <_printf_i+0x186>
   81488:	2e58      	cmp	r6, #88	; 0x58
   8148a:	f040 80bf 	bne.w	8160c <_printf_i+0x1ac>
   8148e:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
   81492:	4a7b      	ldr	r2, [pc, #492]	; (81680 <_printf_i+0x220>)
   81494:	e04f      	b.n	81536 <_printf_i+0xd6>
   81496:	2e64      	cmp	r6, #100	; 0x64
   81498:	d01e      	beq.n	814d8 <_printf_i+0x78>
   8149a:	2e69      	cmp	r6, #105	; 0x69
   8149c:	d01c      	beq.n	814d8 <_printf_i+0x78>
   8149e:	e0b5      	b.n	8160c <_printf_i+0x1ac>
   814a0:	2e73      	cmp	r6, #115	; 0x73
   814a2:	f000 80a4 	beq.w	815ee <_printf_i+0x18e>
   814a6:	d809      	bhi.n	814bc <_printf_i+0x5c>
   814a8:	2e6f      	cmp	r6, #111	; 0x6f
   814aa:	d02b      	beq.n	81504 <_printf_i+0xa4>
   814ac:	2e70      	cmp	r6, #112	; 0x70
   814ae:	f040 80ad 	bne.w	8160c <_printf_i+0x1ac>
   814b2:	680b      	ldr	r3, [r1, #0]
   814b4:	f043 0320 	orr.w	r3, r3, #32
   814b8:	600b      	str	r3, [r1, #0]
   814ba:	e038      	b.n	8152e <_printf_i+0xce>
   814bc:	2e75      	cmp	r6, #117	; 0x75
   814be:	d021      	beq.n	81504 <_printf_i+0xa4>
   814c0:	2e78      	cmp	r6, #120	; 0x78
   814c2:	d034      	beq.n	8152e <_printf_i+0xce>
   814c4:	e0a2      	b.n	8160c <_printf_i+0x1ac>
   814c6:	682b      	ldr	r3, [r5, #0]
   814c8:	f101 0742 	add.w	r7, r1, #66	; 0x42
   814cc:	1d1a      	adds	r2, r3, #4
   814ce:	681b      	ldr	r3, [r3, #0]
   814d0:	602a      	str	r2, [r5, #0]
   814d2:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
   814d6:	e09d      	b.n	81614 <_printf_i+0x1b4>
   814d8:	6822      	ldr	r2, [r4, #0]
   814da:	682b      	ldr	r3, [r5, #0]
   814dc:	f012 0f80 	tst.w	r2, #128	; 0x80
   814e0:	d003      	beq.n	814ea <_printf_i+0x8a>
   814e2:	1d1a      	adds	r2, r3, #4
   814e4:	602a      	str	r2, [r5, #0]
   814e6:	681d      	ldr	r5, [r3, #0]
   814e8:	e005      	b.n	814f6 <_printf_i+0x96>
   814ea:	0651      	lsls	r1, r2, #25
   814ec:	d5f9      	bpl.n	814e2 <_printf_i+0x82>
   814ee:	1d1a      	adds	r2, r3, #4
   814f0:	602a      	str	r2, [r5, #0]
   814f2:	f9b3 5000 	ldrsh.w	r5, [r3]
   814f6:	2d00      	cmp	r5, #0
   814f8:	da39      	bge.n	8156e <_printf_i+0x10e>
   814fa:	232d      	movs	r3, #45	; 0x2d
   814fc:	426d      	negs	r5, r5
   814fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81502:	e034      	b.n	8156e <_printf_i+0x10e>
   81504:	6822      	ldr	r2, [r4, #0]
   81506:	682b      	ldr	r3, [r5, #0]
   81508:	f012 0f80 	tst.w	r2, #128	; 0x80
   8150c:	d003      	beq.n	81516 <_printf_i+0xb6>
   8150e:	1d1a      	adds	r2, r3, #4
   81510:	602a      	str	r2, [r5, #0]
   81512:	681d      	ldr	r5, [r3, #0]
   81514:	e004      	b.n	81520 <_printf_i+0xc0>
   81516:	0652      	lsls	r2, r2, #25
   81518:	d5f9      	bpl.n	8150e <_printf_i+0xae>
   8151a:	1d1a      	adds	r2, r3, #4
   8151c:	602a      	str	r2, [r5, #0]
   8151e:	881d      	ldrh	r5, [r3, #0]
   81520:	7e23      	ldrb	r3, [r4, #24]
   81522:	4a57      	ldr	r2, [pc, #348]	; (81680 <_printf_i+0x220>)
   81524:	2b6f      	cmp	r3, #111	; 0x6f
   81526:	bf14      	ite	ne
   81528:	230a      	movne	r3, #10
   8152a:	2308      	moveq	r3, #8
   8152c:	e01b      	b.n	81566 <_printf_i+0x106>
   8152e:	2378      	movs	r3, #120	; 0x78
   81530:	4a54      	ldr	r2, [pc, #336]	; (81684 <_printf_i+0x224>)
   81532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   81536:	6823      	ldr	r3, [r4, #0]
   81538:	6829      	ldr	r1, [r5, #0]
   8153a:	f013 0f80 	tst.w	r3, #128	; 0x80
   8153e:	f101 0604 	add.w	r6, r1, #4
   81542:	602e      	str	r6, [r5, #0]
   81544:	d001      	beq.n	8154a <_printf_i+0xea>
   81546:	680d      	ldr	r5, [r1, #0]
   81548:	e002      	b.n	81550 <_printf_i+0xf0>
   8154a:	065f      	lsls	r7, r3, #25
   8154c:	d5fb      	bpl.n	81546 <_printf_i+0xe6>
   8154e:	880d      	ldrh	r5, [r1, #0]
   81550:	07de      	lsls	r6, r3, #31
   81552:	bf44      	itt	mi
   81554:	f043 0320 	orrmi.w	r3, r3, #32
   81558:	6023      	strmi	r3, [r4, #0]
   8155a:	b91d      	cbnz	r5, 81564 <_printf_i+0x104>
   8155c:	6823      	ldr	r3, [r4, #0]
   8155e:	f023 0320 	bic.w	r3, r3, #32
   81562:	6023      	str	r3, [r4, #0]
   81564:	2310      	movs	r3, #16
   81566:	2100      	movs	r1, #0
   81568:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   8156c:	e001      	b.n	81572 <_printf_i+0x112>
   8156e:	4a44      	ldr	r2, [pc, #272]	; (81680 <_printf_i+0x220>)
   81570:	230a      	movs	r3, #10
   81572:	6866      	ldr	r6, [r4, #4]
   81574:	2e00      	cmp	r6, #0
   81576:	60a6      	str	r6, [r4, #8]
   81578:	db03      	blt.n	81582 <_printf_i+0x122>
   8157a:	6821      	ldr	r1, [r4, #0]
   8157c:	f021 0104 	bic.w	r1, r1, #4
   81580:	6021      	str	r1, [r4, #0]
   81582:	b905      	cbnz	r5, 81586 <_printf_i+0x126>
   81584:	b16e      	cbz	r6, 815a2 <_printf_i+0x142>
   81586:	f104 0142 	add.w	r1, r4, #66	; 0x42
   8158a:	fbb5 f6f3 	udiv	r6, r5, r3
   8158e:	fb03 5516 	mls	r5, r3, r6, r5
   81592:	5d55      	ldrb	r5, [r2, r5]
   81594:	460f      	mov	r7, r1
   81596:	f801 5901 	strb.w	r5, [r1], #-1
   8159a:	4635      	mov	r5, r6
   8159c:	2e00      	cmp	r6, #0
   8159e:	d1f4      	bne.n	8158a <_printf_i+0x12a>
   815a0:	e000      	b.n	815a4 <_printf_i+0x144>
   815a2:	4607      	mov	r7, r0
   815a4:	2b08      	cmp	r3, #8
   815a6:	d10a      	bne.n	815be <_printf_i+0x15e>
   815a8:	6823      	ldr	r3, [r4, #0]
   815aa:	07dd      	lsls	r5, r3, #31
   815ac:	d507      	bpl.n	815be <_printf_i+0x15e>
   815ae:	6862      	ldr	r2, [r4, #4]
   815b0:	6923      	ldr	r3, [r4, #16]
   815b2:	429a      	cmp	r2, r3
   815b4:	dc03      	bgt.n	815be <_printf_i+0x15e>
   815b6:	2330      	movs	r3, #48	; 0x30
   815b8:	f807 3c01 	strb.w	r3, [r7, #-1]
   815bc:	3f01      	subs	r7, #1
   815be:	1bc0      	subs	r0, r0, r7
   815c0:	6120      	str	r0, [r4, #16]
   815c2:	e02c      	b.n	8161e <_printf_i+0x1be>
   815c4:	6809      	ldr	r1, [r1, #0]
   815c6:	682b      	ldr	r3, [r5, #0]
   815c8:	f011 0f80 	tst.w	r1, #128	; 0x80
   815cc:	6962      	ldr	r2, [r4, #20]
   815ce:	d004      	beq.n	815da <_printf_i+0x17a>
   815d0:	1d19      	adds	r1, r3, #4
   815d2:	6029      	str	r1, [r5, #0]
   815d4:	681b      	ldr	r3, [r3, #0]
   815d6:	601a      	str	r2, [r3, #0]
   815d8:	e005      	b.n	815e6 <_printf_i+0x186>
   815da:	0649      	lsls	r1, r1, #25
   815dc:	d5f8      	bpl.n	815d0 <_printf_i+0x170>
   815de:	1d19      	adds	r1, r3, #4
   815e0:	6029      	str	r1, [r5, #0]
   815e2:	681b      	ldr	r3, [r3, #0]
   815e4:	801a      	strh	r2, [r3, #0]
   815e6:	2300      	movs	r3, #0
   815e8:	6123      	str	r3, [r4, #16]
   815ea:	4607      	mov	r7, r0
   815ec:	e017      	b.n	8161e <_printf_i+0x1be>
   815ee:	682b      	ldr	r3, [r5, #0]
   815f0:	1d1a      	adds	r2, r3, #4
   815f2:	602a      	str	r2, [r5, #0]
   815f4:	681f      	ldr	r7, [r3, #0]
   815f6:	4638      	mov	r0, r7
   815f8:	f000 f895 	bl	81726 <strlen>
   815fc:	6863      	ldr	r3, [r4, #4]
   815fe:	6120      	str	r0, [r4, #16]
   81600:	4298      	cmp	r0, r3
   81602:	bf88      	it	hi
   81604:	6123      	strhi	r3, [r4, #16]
   81606:	6923      	ldr	r3, [r4, #16]
   81608:	6063      	str	r3, [r4, #4]
   8160a:	e005      	b.n	81618 <_printf_i+0x1b8>
   8160c:	f104 0742 	add.w	r7, r4, #66	; 0x42
   81610:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
   81614:	2301      	movs	r3, #1
   81616:	6123      	str	r3, [r4, #16]
   81618:	2300      	movs	r3, #0
   8161a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   8161e:	f8cd a000 	str.w	sl, [sp]
   81622:	4640      	mov	r0, r8
   81624:	4621      	mov	r1, r4
   81626:	aa03      	add	r2, sp, #12
   81628:	464b      	mov	r3, r9
   8162a:	f7ff fea7 	bl	8137c <_printf_common>
   8162e:	3001      	adds	r0, #1
   81630:	d102      	bne.n	81638 <_printf_i+0x1d8>
   81632:	f04f 30ff 	mov.w	r0, #4294967295
   81636:	e01f      	b.n	81678 <_printf_i+0x218>
   81638:	4640      	mov	r0, r8
   8163a:	4649      	mov	r1, r9
   8163c:	463a      	mov	r2, r7
   8163e:	6923      	ldr	r3, [r4, #16]
   81640:	47d0      	blx	sl
   81642:	3001      	adds	r0, #1
   81644:	d0f5      	beq.n	81632 <_printf_i+0x1d2>
   81646:	6823      	ldr	r3, [r4, #0]
   81648:	079b      	lsls	r3, r3, #30
   8164a:	d405      	bmi.n	81658 <_printf_i+0x1f8>
   8164c:	68e0      	ldr	r0, [r4, #12]
   8164e:	9b03      	ldr	r3, [sp, #12]
   81650:	4298      	cmp	r0, r3
   81652:	bfb8      	it	lt
   81654:	4618      	movlt	r0, r3
   81656:	e00f      	b.n	81678 <_printf_i+0x218>
   81658:	2500      	movs	r5, #0
   8165a:	68e2      	ldr	r2, [r4, #12]
   8165c:	9b03      	ldr	r3, [sp, #12]
   8165e:	1ad3      	subs	r3, r2, r3
   81660:	429d      	cmp	r5, r3
   81662:	daf3      	bge.n	8164c <_printf_i+0x1ec>
   81664:	4640      	mov	r0, r8
   81666:	4649      	mov	r1, r9
   81668:	f104 0219 	add.w	r2, r4, #25
   8166c:	2301      	movs	r3, #1
   8166e:	47d0      	blx	sl
   81670:	3001      	adds	r0, #1
   81672:	d0de      	beq.n	81632 <_printf_i+0x1d2>
   81674:	3501      	adds	r5, #1
   81676:	e7f0      	b.n	8165a <_printf_i+0x1fa>
   81678:	b004      	add	sp, #16
   8167a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8167e:	bf00      	nop
   81680:	00081b20 	.word	0x00081b20
   81684:	00081b31 	.word	0x00081b31

00081688 <memchr>:
   81688:	b510      	push	{r4, lr}
   8168a:	b2c9      	uxtb	r1, r1
   8168c:	4402      	add	r2, r0
   8168e:	4290      	cmp	r0, r2
   81690:	4603      	mov	r3, r0
   81692:	d005      	beq.n	816a0 <memchr+0x18>
   81694:	781c      	ldrb	r4, [r3, #0]
   81696:	3001      	adds	r0, #1
   81698:	428c      	cmp	r4, r1
   8169a:	d1f8      	bne.n	8168e <memchr+0x6>
   8169c:	4618      	mov	r0, r3
   8169e:	bd10      	pop	{r4, pc}
   816a0:	2000      	movs	r0, #0
   816a2:	bd10      	pop	{r4, pc}

000816a4 <memmove>:
   816a4:	4281      	cmp	r1, r0
   816a6:	b570      	push	{r4, r5, r6, lr}
   816a8:	d301      	bcc.n	816ae <memmove+0xa>
   816aa:	2300      	movs	r3, #0
   816ac:	e00e      	b.n	816cc <memmove+0x28>
   816ae:	188c      	adds	r4, r1, r2
   816b0:	42a0      	cmp	r0, r4
   816b2:	d2fa      	bcs.n	816aa <memmove+0x6>
   816b4:	1885      	adds	r5, r0, r2
   816b6:	4613      	mov	r3, r2
   816b8:	f113 33ff 	adds.w	r3, r3, #4294967295
   816bc:	d305      	bcc.n	816ca <memmove+0x26>
   816be:	4251      	negs	r1, r2
   816c0:	1866      	adds	r6, r4, r1
   816c2:	5cf6      	ldrb	r6, [r6, r3]
   816c4:	4429      	add	r1, r5
   816c6:	54ce      	strb	r6, [r1, r3]
   816c8:	e7f6      	b.n	816b8 <memmove+0x14>
   816ca:	bd70      	pop	{r4, r5, r6, pc}
   816cc:	4293      	cmp	r3, r2
   816ce:	d003      	beq.n	816d8 <memmove+0x34>
   816d0:	5ccc      	ldrb	r4, [r1, r3]
   816d2:	54c4      	strb	r4, [r0, r3]
   816d4:	3301      	adds	r3, #1
   816d6:	e7f9      	b.n	816cc <memmove+0x28>
   816d8:	bd70      	pop	{r4, r5, r6, pc}

000816da <_realloc_r>:
   816da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   816dc:	4606      	mov	r6, r0
   816de:	4614      	mov	r4, r2
   816e0:	460d      	mov	r5, r1
   816e2:	b921      	cbnz	r1, 816ee <_realloc_r+0x14>
   816e4:	4611      	mov	r1, r2
   816e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   816ea:	f7ff bc33 	b.w	80f54 <_malloc_r>
   816ee:	b91a      	cbnz	r2, 816f8 <_realloc_r+0x1e>
   816f0:	f7ff fbec 	bl	80ecc <_free_r>
   816f4:	4620      	mov	r0, r4
   816f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   816f8:	f000 f81d 	bl	81736 <_malloc_usable_size_r>
   816fc:	42a0      	cmp	r0, r4
   816fe:	d20e      	bcs.n	8171e <_realloc_r+0x44>
   81700:	4630      	mov	r0, r6
   81702:	4621      	mov	r1, r4
   81704:	f7ff fc26 	bl	80f54 <_malloc_r>
   81708:	4607      	mov	r7, r0
   8170a:	b150      	cbz	r0, 81722 <_realloc_r+0x48>
   8170c:	4629      	mov	r1, r5
   8170e:	4622      	mov	r2, r4
   81710:	f7ff fbd2 	bl	80eb8 <memcpy>
   81714:	4630      	mov	r0, r6
   81716:	4629      	mov	r1, r5
   81718:	f7ff fbd8 	bl	80ecc <_free_r>
   8171c:	e001      	b.n	81722 <_realloc_r+0x48>
   8171e:	4628      	mov	r0, r5
   81720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81722:	4638      	mov	r0, r7
   81724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00081726 <strlen>:
   81726:	4603      	mov	r3, r0
   81728:	f813 2b01 	ldrb.w	r2, [r3], #1
   8172c:	2a00      	cmp	r2, #0
   8172e:	d1fb      	bne.n	81728 <strlen+0x2>
   81730:	1a18      	subs	r0, r3, r0
   81732:	3801      	subs	r0, #1
   81734:	4770      	bx	lr

00081736 <_malloc_usable_size_r>:
   81736:	f851 0c04 	ldr.w	r0, [r1, #-4]
   8173a:	2800      	cmp	r0, #0
   8173c:	da02      	bge.n	81744 <_malloc_usable_size_r+0xe>
   8173e:	3904      	subs	r1, #4
   81740:	580b      	ldr	r3, [r1, r0]
   81742:	4418      	add	r0, r3
   81744:	3804      	subs	r0, #4
   81746:	4770      	bx	lr

00081748 <_getpid>:
   81748:	4b02      	ldr	r3, [pc, #8]	; (81754 <_getpid+0xc>)
   8174a:	2258      	movs	r2, #88	; 0x58
   8174c:	601a      	str	r2, [r3, #0]
   8174e:	f04f 30ff 	mov.w	r0, #4294967295
   81752:	4770      	bx	lr
   81754:	200000c0 	.word	0x200000c0

00081758 <_kill>:
   81758:	4b02      	ldr	r3, [pc, #8]	; (81764 <_kill+0xc>)
   8175a:	2258      	movs	r2, #88	; 0x58
   8175c:	601a      	str	r2, [r3, #0]
   8175e:	f04f 30ff 	mov.w	r0, #4294967295
   81762:	4770      	bx	lr
   81764:	200000c0 	.word	0x200000c0

00081768 <_sbrk>:
   81768:	4a09      	ldr	r2, [pc, #36]	; (81790 <_sbrk+0x28>)
   8176a:	6813      	ldr	r3, [r2, #0]
   8176c:	b163      	cbz	r3, 81788 <_sbrk+0x20>
   8176e:	4418      	add	r0, r3
   81770:	4669      	mov	r1, sp
   81772:	4288      	cmp	r0, r1
   81774:	d802      	bhi.n	8177c <_sbrk+0x14>
   81776:	6010      	str	r0, [r2, #0]
   81778:	4618      	mov	r0, r3
   8177a:	4770      	bx	lr
   8177c:	4b05      	ldr	r3, [pc, #20]	; (81794 <_sbrk+0x2c>)
   8177e:	220c      	movs	r2, #12
   81780:	601a      	str	r2, [r3, #0]
   81782:	f04f 30ff 	mov.w	r0, #4294967295
   81786:	4770      	bx	lr
   81788:	4b03      	ldr	r3, [pc, #12]	; (81798 <_sbrk+0x30>)
   8178a:	6013      	str	r3, [r2, #0]
   8178c:	e7ef      	b.n	8176e <_sbrk+0x6>
   8178e:	bf00      	nop
   81790:	200000bc 	.word	0x200000bc
   81794:	200000c0 	.word	0x200000c0
   81798:	20000000 	.word	0x20000000

0008179c <_exit>:
   8179c:	e7fe      	b.n	8179c <_exit>
   8179e:	bf00      	nop

000817a0 <_ZL10font_small>:
   817a0:	2840 0000 0000 0000 8000 0000 820e 81c3     @(..............
   817b0:	a0f0 0000 4209 4326 9010 0000 0109 2182     .....B&C.......!
   817c0:	9838 9f00 0104 9101 a440 8000 8084 f910     8.......@.......
   817d0:	a641 0000 e083 40e3 9c3c 0000 0780 2000     A......@<...... 
   817e0:	c000 3c3e 0cc7 2000 c000 9210 0c0c 10c0     ..><... ........
   817f0:	a060 8c08 0704 7120 bc10 1208 0183 9110     `..... q........
   81800:	9208 1104 0001 8890 9208 8e04 20c0 7960     ............. `y
   81810:	9c70 3000 0200 2303 8020 0800 0206 2000     p..0...# ...... 
   81820:	8020 3f18 0109 9100 ac10 0424 8109 5100      ..?......$....Q
   81830:	d410 043e 870e 3080 d410 8202 4484 4890     ..>....0.....D.H
   81840:	aa08 821c 4483 8860 aa08 0000 0000 0000     .....D`.........
   81850:	8000 0000 0306 4000 8000 0c14 8489 f0c2     .......@........
   81860:	a248 122c 8449 2121 9248 1124 8387 2040     H.,.I.!!H.$...@ 
   81870:	8a24 8912 4200 1090 8624 8612 4100 1060     $....B..$....A`.
   81880:	8258 0000 0000 0000 8000 0000 0011 0000     X...............
   81890:	8000 1254 078a 0000 8000 0c54 0206 0000     ..T.......T.....
   818a0:	8000 042a 0102 0000 8000 0a2a 0081 0000     ..*.......*.....
   818b0:	8000 8914 03c0 0000 8000 ffff ffff ffff     ................
   818c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   818d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   818e0:	ffff                                        ..

000818e2 <_ZL10font_large>:
   818e2:	4038 0000 0000 0000 0000 0000 0000 0000     8@..............
	...
   81902:	1800 7e3c 0030 0000 3c1c 3022 0000 1e00     ..<~0....<"0....
   81912:	1066 0030 0000 661a 3808 0000 1800 1e60     f.0....f.8....`.
   81922:	0038 0000 6018 3830 0000 1800 2060 0038     8....`08....` 8.
   81932:	0000 3018 3820 0000 1800 6030 0038 0000     ...0 8....0`8...
   81942:	3018 3460 0000 1800 6018 0034 007c 1818     .0`4.....`4.|...
   81952:	3460 3e00 1800 6018 0034 0000 0c18 3460     `4.>...`4.....`4
   81962:	0000 1800 600c 0032 0000 0c18 3260 0000     .....`2.....`2..
   81972:	1800 6006 0032 0000 0618 3260 0000 1800     ...`2.....`2....
   81982:	6006 0032 0000 0618 7e60 0000 1800 6206     .`2.....`~.....b
   81992:	007e 0000 0618 3022 0000 7e00 227e 0030     ~....."0...~~"0.
   819a2:	0000 7e7e 301c 0000 0000 0000 0000 0000     ..~~.0..........
	...
   819d6:	0000 7e00 7e00 1818 0000 4046 2c62 3c24     ...~.~....F@b,$<
   819e6:	0600 6020 4246 003c 2006 4660 6642 1e00     .. `FB<.. `FBf..
   819f6:	3010 4246 0066 1030 4630 6642 2000 1818     .0FBf.0.0FBf. ..
   81a06:	4246 0066 1820 4618 6642 6000 1808 4246     FBf. ..FBf.`..FB
   81a16:	0060 0c60 4618 6064 6000 0c0c 5846 0060     `.`..Fd`.`..FX`.
   81a26:	0460 460c 6040 6000 0c04 4046 0030 0660     `..F@`.`..F@0.`.
   81a36:	2c0c 3040 6000 0c1e 4018 0018 2660 340c     .,@0.`...@..`&.4
   81a46:	1840 6000 0c42 4062 0018 4260 620c 1840     @..`B.b@..`B.b@.
   81a56:	6000 0c42 4062 0018 4260 620c 1840 6000     .`B.b@..`B.b@..`
   81a66:	1c42 4062 0018 4262 620e 0044 2200 0c42     B.b@..bB.bD.."B.
   81a76:	2462 0000 2422 340c 1824 1c00 0c18 1818     b$.."$.4$.......
   81a86:	0018 0000 0000 0000 0000 0000 0000 0000     ................
	...

00081aa8 <_ZTV14ShiftRegisters>:
	...
   81ab0:	06f5 0008 06e9 0008 0791 0008 06ed 0008     ................
   81ac0:	06f1 0008 0000 0000                         ........

00081ac8 <_ZTV3SPI>:
	...
   81ad0:	0859 0008 0839 0008 08e9 0008 0855 0008     Y...9.......U...
   81ae0:	08d5 0008 0000 0000                         ........

00081ae8 <_ZTV7SSD1305>:
	...
   81af0:	0979 0008 0931 0008 0c19 0008 0935 0008     y...1.......5...
   81b00:	0939 0008 0000 0000 7830 5825 4300 2300     9.......0x%X.C.#
   81b10:	302d 202b 6800 4c6c 6500 6766 4645 0047     -0+ .hlL.efgEFG.
   81b20:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   81b30:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
   81b40:	0066 0000                                   f...

00081b44 <_init>:
   81b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b46:	bf00      	nop
   81b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81b4a:	bc08      	pop	{r3}
   81b4c:	469e      	mov	lr, r3
   81b4e:	4770      	bx	lr

00081b50 <__init_array_start>:
   81b50:	00080119 	.word	0x00080119

00081b54 <_fini>:
   81b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81b56:	bf00      	nop
   81b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81b5a:	bc08      	pop	{r3}
   81b5c:	469e      	mov	lr, r3
   81b5e:	4770      	bx	lr

00081b60 <__fini_array_start>:
   81b60:	000800f5 	.word	0x000800f5
