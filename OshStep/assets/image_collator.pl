use strict;
use warnings;

use GD;

main();

sub main {
    my $oFile = "images.h";
    my $dir   = "images";

    open HEADER_FILE, ">$oFile" or die "Could not open file $dir $!";
    print HEADER_FILE "\/*\n *images.h header file automatically generated by image_collator.pl\n *\/\n";
    print HEADER_FILE "\n\n";

    print HEADER_FILE "#ifndef IMAGES_H_\n";
    print HEADER_FILE "#define IMAGES_H_\n";

    opendir (DIR, $dir) or die $!;
    my @images = readdir(DIR);

    foreach my $image_fn (@images) {
        if ($image_fn =~ /^(.*)\.\b(png|bmp)\b$/) {
            my $asset_name = $1;
            print "\nEncoding $asset_name:\n";

            my $img = GD::Image->new($dir.'/'.$image_fn) or die "Could not open " . $image_fn;
            my ($width, $height) = $img->getBounds();

            if ($width % 8 != 0 || $height % 8 != 0) {
                print "Error: width, height must be divisible by 8. Skipping";
                next;
            }

            print HEADER_FILE "static const unsigned char $asset_name\[\] {\n";

            my $t = "    ";
            print HEADER_FILE "$t$width, $height,\n";

            # We're going to be constructing each byte
            my ($byte, $bit) = (0, 1);
             for (my $y = 0; $y < $height; $y++) {
                print HEADER_FILE $t;
                for (my $x = 0; $x < $width; $x++) {
                    my $color_index = $img->getPixel($x, $y);
                    my ($r, $g, $b) = $img->rgb($color_index);
                    
                    #if we have a non-black color
                    if ($r > 50 && $g > 50 && $b > 50) {
                        #add a bit to our color
                        $byte += $bit;
                        print "|";
                    } else {
                        print "_";
                    }
                    # Shift over, or roll around
                    if ($bit == 128) {
                        $bit = 1;
                        print HEADER_FILE sprintf("0x%02X", $byte).", ";
                        $byte = 0;
                    }
                    else {
                        $bit = $bit << 1;
                    }
                }
                print HEADER_FILE "\n";
                print "\n";
             }

            print HEADER_FILE "};\n";
        }
    }

    print HEADER_FILE "\n\n";
    print HEADER_FILE "#endif \/* IMAGES_H_ *\/\n";
    close HEADER_FILE;
}